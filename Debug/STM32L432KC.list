
STM32L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08005c58  08005c58  00015c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060cc  080060cc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080060cc  080060cc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060cc  080060cc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080060d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000002ac  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a3b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001531  00000000  00000000  00026c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  00028188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004e0  00000000  00000000  00028740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a064  00000000  00000000  00028c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098cd  00000000  00000000  00042c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000826e4  00000000  00000000  0004c551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cec35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002708  00000000  00000000  000cec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  000d1390  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  000d1444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c3c 	.word	0x08005c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08005c3c 	.word	0x08005c3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000bac:	4904      	ldr	r1, [pc, #16]	; (8000bc0 <MX_FATFS_Init+0x18>)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_FATFS_Init+0x1c>)
 8000bb0:	f001 fd20 	bl	80025f4 <FATFS_LinkDriver>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <MX_FATFS_Init+0x20>)
 8000bba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000020c 	.word	0x2000020c
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20000208 	.word	0x20000208

08000bcc <SELECT>:
#define MS_DELAY(ms) rcc_msDelay(ms)
#define MS_TICKS() rcc_msGetTicks()

//SPI Chip Select
static void SELECT(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  spi_cs_sd_write(0);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f002 f865 	bl	8002ca0 <spi_cs_sd_write>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <DESELECT>:

//SPI Chip Deselect
static void DESELECT(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  spi_cs_sd_write(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f002 f85e 	bl	8002ca0 <spi_cs_sd_write>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <SPI_TxByte>:

//SPI Transmit uint8_t
static void SPI_TxByte(uint8_t data)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  spi_transmit(&data, 1, SPI_TIMEOUT);
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 ff52 	bl	8002aa4 <spi_transmit>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SPI_RxByte>:

//SPI Receive uint8_t
static uint8_t SPI_RxByte(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  uint8_t data=0, dummy = 0xFF;;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	23ff      	movs	r3, #255	; 0xff
 8000c14:	71bb      	strb	r3, [r7, #6]

  spi_transmitReceive(&dummy, &data, 1, SPI_TIMEOUT);
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	1db8      	adds	r0, r7, #6
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f001 ff90 	bl	8002b44 <spi_transmitReceive>
  return data;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <SPI_RxBytePtr>:

//Receive by pointer
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c36:	f7ff ffe7 	bl	8000c08 <SPI_RxByte>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <SD_ReadyWait>:

//SD Card Read State implementation
static uint8_t SD_ReadyWait(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
  uint8_t res;

  uint32_t startTicks = MS_TICKS();
 8000c50:	f001 fda2 	bl	8002798 <rcc_msGetTicks>
 8000c54:	6078      	str	r0, [r7, #4]
  SPI_RxByte();
 8000c56:	f7ff ffd7 	bl	8000c08 <SPI_RxByte>

  do
  {
    res = SPI_RxByte();
 8000c5a:	f7ff ffd5 	bl	8000c08 <SPI_RxByte>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	70fb      	strb	r3, [r7, #3]
  } while ((res != 0xFF) && ((MS_TICKS() - startTicks) < 500));
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d007      	beq.n	8000c78 <SD_ReadyWait+0x2e>
 8000c68:	f001 fd96 	bl	8002798 <rcc_msGetTicks>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c76:	d3f0      	bcc.n	8000c5a <SD_ReadyWait+0x10>

  return res;
 8000c78:	78fb      	ldrb	r3, [r7, #3]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <SD_PowerOn>:

//Power ON SD Card
static void SD_PowerOn(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c8a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c8e:	617b      	str	r3, [r7, #20]

  DESELECT();
 8000c90:	f7ff ffa3 	bl	8000bda <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	e005      	b.n	8000ca6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c9a:	20ff      	movs	r0, #255	; 0xff
 8000c9c:	f7ff ffa4 	bl	8000be8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	ddf6      	ble.n	8000c9a <SD_PowerOn+0x16>
  }

  SELECT();
 8000cac:	f7ff ff8e 	bl	8000bcc <SELECT>

  //GO IDLE STATE
  cmd_arg[0] = (CMD0 | 0x40);
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cc4:	2395      	movs	r3, #149	; 0x95
 8000cc6:	727b      	strb	r3, [r7, #9]

  //Send Command Argument
  for (int i = 0; i < 6; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e009      	b.n	8000ce2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cce:	1d3a      	adds	r2, r7, #4
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff86 	bl	8000be8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	ddf2      	ble.n	8000cce <SD_PowerOn+0x4a>
  }

  //Wait for Response
  while ((SPI_RxByte() != 0x01) && Count)
 8000ce8:	e002      	b.n	8000cf0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cf0:	f7ff ff8a 	bl	8000c08 <SPI_RxByte>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d002      	beq.n	8000d00 <SD_PowerOn+0x7c>
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f4      	bne.n	8000cea <SD_PowerOn+0x66>
  }

  DESELECT();
 8000d00:	f7ff ff6b 	bl	8000bda <DESELECT>
  SPI_TxByte(0XFF);
 8000d04:	20ff      	movs	r0, #255	; 0xff
 8000d06:	f7ff ff6f 	bl	8000be8 <SPI_TxByte>

  PowerFlag = 1;
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <SD_PowerOn+0x94>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000211 	.word	0x20000211

08000d1c <SD_PowerOff>:

//Power Off
static void SD_PowerOff(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <SD_PowerOff+0x14>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20000211 	.word	0x20000211

08000d34 <SD_CheckPower>:

//Return power state
static uint8_t SD_CheckPower(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SD_CheckPower+0x14>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000211 	.word	0x20000211

08000d4c <SD_RxDataBlock>:

//Read Block, 512 uint8_ts = 256*2
static bool SD_RxDataBlock(uint8_t *buff, unsigned int btr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint8_t token;

  uint32_t startTicks = MS_TICKS();
 8000d56:	f001 fd1f 	bl	8002798 <rcc_msGetTicks>
 8000d5a:	60f8      	str	r0, [r7, #12]
  //Wait for SD Response
  do
  {
    token = SPI_RxByte();
 8000d5c:	f7ff ff54 	bl	8000c08 <SPI_RxByte>
 8000d60:	4603      	mov	r3, r0
 8000d62:	72fb      	strb	r3, [r7, #11]
  } while((token == 0xFF) && ((MS_TICKS() - startTicks) < 100));
 8000d64:	7afb      	ldrb	r3, [r7, #11]
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d106      	bne.n	8000d78 <SD_RxDataBlock+0x2c>
 8000d6a:	f001 fd15 	bl	8002798 <rcc_msGetTicks>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b63      	cmp	r3, #99	; 0x63
 8000d76:	d9f1      	bls.n	8000d5c <SD_RxDataBlock+0x10>

  if(token != 0xFE)
 8000d78:	7afb      	ldrb	r3, [r7, #11]
 8000d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7c:	d001      	beq.n	8000d82 <SD_RxDataBlock+0x36>
    return false;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e016      	b.n	8000db0 <SD_RxDataBlock+0x64>

  //Receive the data and write to buffer
  do
  {
    SPI_RxBytePtr(buff++);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff50 	bl	8000c2e <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff4a 	bl	8000c2e <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ed      	bne.n	8000d82 <SD_RxDataBlock+0x36>

  //Read CRC
  SPI_RxByte();
 8000da6:	f7ff ff2f 	bl	8000c08 <SPI_RxByte>
  SPI_RxByte();
 8000daa:	f7ff ff2d 	bl	8000c08 <SPI_RxByte>

  return true;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SD_TxDataBlock>:

//Write Data Block
#if _READONLY == 0
static bool SD_TxDataBlock(const uint8_t *buff, uint8_t token)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8000dc8:	f7ff ff3f 	bl	8000c4a <SD_ReadyWait>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2bff      	cmp	r3, #255	; 0xff
 8000dd0:	d001      	beq.n	8000dd6 <SD_TxDataBlock+0x1e>
    return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e040      	b.n	8000e58 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff05 	bl	8000be8 <SPI_TxByte>

  if (token != 0xFD)
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2bfd      	cmp	r3, #253	; 0xfd
 8000de2:	d031      	beq.n	8000e48 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73bb      	strb	r3, [r7, #14]

    //Transmit Block data 512 uint8_ts = 256*2
    do
    {
      SPI_TxByte(*buff++);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fef9 	bl	8000be8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fef2 	bl	8000be8 <SPI_TxByte>
    } while (--wc);
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	73bb      	strb	r3, [r7, #14]
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1eb      	bne.n	8000de8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC Read */
 8000e10:	f7ff fefa 	bl	8000c08 <SPI_RxByte>
    SPI_RxByte();
 8000e14:	f7ff fef8 	bl	8000c08 <SPI_RxByte>

    //Data response receive
    while (i <= 64)
 8000e18:	e00b      	b.n	8000e32 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e1a:	f7ff fef5 	bl	8000c08 <SPI_RxByte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]

      //Handle Error
      if ((resp & 0x1F) == 0x05)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d006      	beq.n	8000e3a <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e2c:	7b7b      	ldrb	r3, [r7, #13]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	2b40      	cmp	r3, #64	; 0x40
 8000e36:	d9f0      	bls.n	8000e1a <SD_TxDataBlock+0x62>
 8000e38:	e000      	b.n	8000e3c <SD_TxDataBlock+0x84>
        break;
 8000e3a:	bf00      	nop
    }

    //Clear Receive Buffer
    while (SPI_RxByte() == 0);
 8000e3c:	bf00      	nop
 8000e3e:	f7ff fee3 	bl	8000c08 <SPI_RxByte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0fa      	beq.n	8000e3e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d101      	bne.n	8000e56 <SD_TxDataBlock+0x9e>
    return true;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <SD_TxDataBlock+0xa0>
  else
    return false;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SD_SendCmd>:
#endif /* _READONLY */

//Send Command
static uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  //Get SD Ready
  if (SD_ReadyWait() != 0xFF)
 8000e6c:	f7ff feed 	bl	8000c4a <SD_ReadyWait>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d001      	beq.n	8000e7a <SD_SendCmd+0x1a>
    return 0xFF;
 8000e76:	23ff      	movs	r3, #255	; 0xff
 8000e78:	e040      	b.n	8000efc <SD_SendCmd+0x9c>

  //Build command
  SPI_TxByte(cmd);      /* Command */
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff feb3 	bl	8000be8 <SPI_TxByte>
  SPI_TxByte((uint8_t) (arg >> 24));   /* Argument[31..24] */
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	0e1b      	lsrs	r3, r3, #24
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fead 	bl	8000be8 <SPI_TxByte>
  SPI_TxByte((uint8_t) (arg >> 16));   /* Argument[23..16] */
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0c1b      	lsrs	r3, r3, #16
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fea7 	bl	8000be8 <SPI_TxByte>
  SPI_TxByte((uint8_t) (arg >> 8));  /* Argument[15..8] */
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fea1 	bl	8000be8 <SPI_TxByte>
  SPI_TxByte((uint8_t) arg);     /* Argument[7..0] */
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe9c 	bl	8000be8 <SPI_TxByte>

  crc = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b40      	cmp	r3, #64	; 0x40
 8000eb8:	d101      	bne.n	8000ebe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000eba:	2395      	movs	r3, #149	; 0x95
 8000ebc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b48      	cmp	r3, #72	; 0x48
 8000ec2:	d101      	bne.n	8000ec8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ec4:	2387      	movs	r3, #135	; 0x87
 8000ec6:	73fb      	strb	r3, [r7, #15]

  SPI_TxByte(crc);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe8c 	bl	8000be8 <SPI_TxByte>

  /* CMD12 Stop Reading, Discard 1 response uint8_t */
  if (cmd == CMD12)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b4c      	cmp	r3, #76	; 0x4c
 8000ed4:	d101      	bne.n	8000eda <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ed6:	f7ff fe97 	bl	8000c08 <SPI_RxByte>

  //Response within 10 tries
  uint8_t n = 10;
 8000eda:	230a      	movs	r3, #10
 8000edc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ede:	f7ff fe93 	bl	8000c08 <SPI_RxByte>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ee6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da05      	bge.n	8000efa <SD_SendCmd+0x9a>
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	73bb      	strb	r3, [r7, #14]
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f1      	bne.n	8000ede <SD_SendCmd+0x7e>

  return res;
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <sd_driver_ll_getSectorCount>:

//*** Low-Level functions ***//
//Get Sector Count
bool sd_driver_ll_getSectorCount(uint32_t *sectorCount)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint8_t n, csd[16];
  uint32_t csize;
  bool ret=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77fb      	strb	r3, [r7, #31]
  SELECT();
 8000f10:	f7ff fe5c 	bl	8000bcc <SELECT>

  if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f14:	2100      	movs	r1, #0
 8000f16:	2049      	movs	r0, #73	; 0x49
 8000f18:	f7ff ffa2 	bl	8000e60 <SD_SendCmd>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d142      	bne.n	8000fa8 <sd_driver_ll_getSectorCount+0xa4>
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2110      	movs	r1, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff0f 	bl	8000d4c <SD_RxDataBlock>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d039      	beq.n	8000fa8 <sd_driver_ll_getSectorCount+0xa4>
  {
    if ((csd[0] >> 6) == 1)
 8000f34:	7a3b      	ldrb	r3, [r7, #8]
 8000f36:	099b      	lsrs	r3, r3, #6
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10b      	bne.n	8000f56 <sd_driver_ll_getSectorCount+0x52>
    {
      /* SDC ver 2.00 */
      csize = csd[9] + ((uint32_t) csd[8] << 8) + 1;
 8000f3e:	7c7b      	ldrb	r3, [r7, #17]
 8000f40:	461a      	mov	r2, r3
 8000f42:	7c3b      	ldrb	r3, [r7, #16]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	4413      	add	r3, r2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
      *sectorCount = (uint32_t) csize << 10;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	029a      	lsls	r2, r3, #10
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e026      	b.n	8000fa4 <sd_driver_ll_getSectorCount+0xa0>
    }
    else
    {
      /* MMC or SDC ver 1.XX */
      n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f56:	7b7b      	ldrb	r3, [r7, #13]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	7cbb      	ldrb	r3, [r7, #18]
 8000f60:	09db      	lsrs	r3, r3, #7
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	7c7b      	ldrb	r3, [r7, #17]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0306 	and.w	r3, r3, #6
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3302      	adds	r3, #2
 8000f7a:	77bb      	strb	r3, [r7, #30]
      csize = (csd[8] >> 6) + ((uint32_t) csd[7] << 2) + ((uint32_t) (csd[6] & 3) << 10) + 1;
 8000f7c:	7c3b      	ldrb	r3, [r7, #16]
 8000f7e:	099b      	lsrs	r3, r3, #6
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	441a      	add	r2, r3
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	029b      	lsls	r3, r3, #10
 8000f8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f92:	4413      	add	r3, r2
 8000f94:	3301      	adds	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
      *sectorCount = (uint32_t) csize << (n - 9);
 8000f98:	7fbb      	ldrb	r3, [r7, #30]
 8000f9a:	3b09      	subs	r3, #9
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	601a      	str	r2, [r3, #0]
    }
    ret = true;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	77fb      	strb	r3, [r7, #31]
  }
  DESELECT();
 8000fa8:	f7ff fe17 	bl	8000bda <DESELECT>
  SPI_RxByte();
 8000fac:	f7ff fe2c 	bl	8000c08 <SPI_RxByte>
  return ret;
 8000fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <sd_driver_ll_getSectorSize>:
//Get Sector Size
bool sd_driver_ll_getSectorSize(uint32_t *sectorSize)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  *sectorSize=512;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc8:	601a      	str	r2, [r3, #0]
  return true;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <sd_driver_ll_controlPower>:
//Control Power
void sd_driver_ll_controlPower(bool stateOnOff)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if(stateOnOff)
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <sd_driver_ll_controlPower+0x16>
  {
    SD_PowerOn();   /* Power On */
 8000fe8:	f7ff fe4c 	bl	8000c84 <SD_PowerOn>
  }
  else
  {
    SD_PowerOff();  /* Power Off */
  }
}
 8000fec:	e001      	b.n	8000ff2 <sd_driver_ll_controlPower+0x1a>
    SD_PowerOff();  /* Power Off */
 8000fee:	f7ff fe95 	bl	8000d1c <SD_PowerOff>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <sd_driver_ll_getPowerState>:
bool sd_driver_ll_getPowerState(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  return SD_CheckPower();
 8000ffe:	f7ff fe99 	bl	8000d34 <SD_CheckPower>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}

08001012 <sd_driver_ll_sync>:
//Control Sync
bool sd_driver_ll_sync(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  bool ret=0;
 8001018:	2300      	movs	r3, #0
 800101a:	71fb      	strb	r3, [r7, #7]
  SELECT();
 800101c:	f7ff fdd6 	bl	8000bcc <SELECT>
  if (SD_ReadyWait() == 0xFF)
 8001020:	f7ff fe13 	bl	8000c4a <SD_ReadyWait>
 8001024:	4603      	mov	r3, r0
 8001026:	2bff      	cmp	r3, #255	; 0xff
 8001028:	d101      	bne.n	800102e <sd_driver_ll_sync+0x1c>
  {
    ret= true;
 800102a:	2301      	movs	r3, #1
 800102c:	71fb      	strb	r3, [r7, #7]
  }
  DESELECT();
 800102e:	f7ff fdd4 	bl	8000bda <DESELECT>
  SPI_RxByte();
 8001032:	f7ff fde9 	bl	8000c08 <SPI_RxByte>
  return ret;
 8001036:	79fb      	ldrb	r3, [r7, #7]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <sd_driver_ll_getCSD>:
//Get CSD
bool sd_driver_ll_getCSD(uint8_t *pBuf16uint8_ts)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  bool ret=0;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  SELECT();
 800104c:	f7ff fdbe 	bl	8000bcc <SELECT>
  uint8_t *ptr = pBuf16uint8_ts;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60bb      	str	r3, [r7, #8]
  /* CSD information (16 uint8_ts) */
  if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001054:	2100      	movs	r1, #0
 8001056:	2049      	movs	r0, #73	; 0x49
 8001058:	f7ff ff02 	bl	8000e60 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d108      	bne.n	8001074 <sd_driver_ll_getCSD+0x34>
 8001062:	2110      	movs	r1, #16
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f7ff fe71 	bl	8000d4c <SD_RxDataBlock>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <sd_driver_ll_getCSD+0x34>
  {
    ret = true;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }
  DESELECT();
 8001074:	f7ff fdb1 	bl	8000bda <DESELECT>
  SPI_RxByte();
 8001078:	f7ff fdc6 	bl	8000c08 <SPI_RxByte>
  return ret;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <sd_driver_ll_getCID>:
//Get CID
bool sd_driver_ll_getCID(uint8_t *pBuf16uint8_ts)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = pBuf16uint8_ts;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60bb      	str	r3, [r7, #8]
  bool ret=0;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  SELECT();
 8001096:	f7ff fd99 	bl	8000bcc <SELECT>
  /* CID information (16 uint8_ts) */
  if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800109a:	2100      	movs	r1, #0
 800109c:	204a      	movs	r0, #74	; 0x4a
 800109e:	f7ff fedf 	bl	8000e60 <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d108      	bne.n	80010ba <sd_driver_ll_getCID+0x34>
 80010a8:	2110      	movs	r1, #16
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f7ff fe4e 	bl	8000d4c <SD_RxDataBlock>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <sd_driver_ll_getCID+0x34>
  {
    ret = true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
  }
  DESELECT();
 80010ba:	f7ff fd8e 	bl	8000bda <DESELECT>
  SPI_RxByte();
 80010be:	f7ff fda3 	bl	8000c08 <SPI_RxByte>
  return ret;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <sd_driver_ll_getOCR>:
//Get OCR
bool sd_driver_ll_getOCR(uint8_t *pBuf4uint8_ts)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint8_t n, *ptr = pBuf4uint8_ts;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	613b      	str	r3, [r7, #16]
  bool ret=0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  SELECT();
 80010dc:	f7ff fd76 	bl	8000bcc <SELECT>
  /* OCR information (4 uint8_ts) */
  if (SD_SendCmd(CMD58, 0) == 0)
 80010e0:	2100      	movs	r1, #0
 80010e2:	207a      	movs	r0, #122	; 0x7a
 80010e4:	f7ff febc 	bl	8000e60 <SD_SendCmd>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d111      	bne.n	8001112 <sd_driver_ll_getOCR+0x46>
  {
    for (n = 0; n < 4; n++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]
 80010f2:	e009      	b.n	8001108 <sd_driver_ll_getOCR+0x3c>
    {
      *ptr++ = SPI_RxByte();
 80010f4:	693c      	ldr	r4, [r7, #16]
 80010f6:	1c63      	adds	r3, r4, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	f7ff fd85 	bl	8000c08 <SPI_RxByte>
 80010fe:	4603      	mov	r3, r0
 8001100:	7023      	strb	r3, [r4, #0]
    for (n = 0; n < 4; n++)
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	3301      	adds	r3, #1
 8001106:	75fb      	strb	r3, [r7, #23]
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d9f2      	bls.n	80010f4 <sd_driver_ll_getOCR+0x28>
    }
    ret = true;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
  }
  DESELECT();
 8001112:	f7ff fd62 	bl	8000bda <DESELECT>
  SPI_RxByte();
 8001116:	f7ff fd77 	bl	8000c08 <SPI_RxByte>
  return ret;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <sd_driver_init>:

/**
 * @brief SD Card Initialise
 */
DiskStatus_e sd_driver_init(void)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  uint8_t n, type, ocr[4];
  //Card Not inserted
  if(Stat & STATUS_NODISK)
 800112a:	4b73      	ldr	r3, [pc, #460]	; (80012f8 <sd_driver_init+0x1d4>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <sd_driver_init+0x1c>
  {
    return Stat;
 8001138:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <sd_driver_init+0x1d4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	e0d7      	b.n	80012f0 <sd_driver_init+0x1cc>
  }
  //Power ON Sequence
  SD_PowerOn();
 8001140:	f7ff fda0 	bl	8000c84 <SD_PowerOn>
  SELECT();
 8001144:	f7ff fd42 	bl	8000bcc <SELECT>
  type = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	73bb      	strb	r3, [r7, #14]

  //Idle State
  if (SD_SendCmd(CMD0, 0) == 1)
 800114c:	2100      	movs	r1, #0
 800114e:	2040      	movs	r0, #64	; 0x40
 8001150:	f7ff fe86 	bl	8000e60 <SD_SendCmd>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	f040 80b2 	bne.w	80012c0 <sd_driver_init+0x19c>
  {
    uint32_t startTicks = MS_TICKS();
 800115c:	f001 fb1c 	bl	8002798 <rcc_msGetTicks>
 8001160:	60b8      	str	r0, [r7, #8]
    //Read SD Card Interface specifications
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001162:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001166:	2048      	movs	r0, #72	; 0x48
 8001168:	f7ff fe7a 	bl	8000e60 <SD_SendCmd>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d15f      	bne.n	8001232 <sd_driver_init+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e00c      	b.n	8001192 <sd_driver_init+0x6e>
      {
        ocr[n] = SPI_RxByte();
 8001178:	7bfc      	ldrb	r4, [r7, #15]
 800117a:	f7ff fd45 	bl	8000c08 <SPI_RxByte>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	f104 0310 	add.w	r3, r4, #16
 8001186:	443b      	add	r3, r7
 8001188:	f803 2c0c 	strb.w	r2, [r3, #-12]
      for (n = 0; n < 4; n++)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d9ef      	bls.n	8001178 <sd_driver_init+0x54>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 8090 	bne.w	80012c0 <sd_driver_init+0x19c>
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2baa      	cmp	r3, #170	; 0xaa
 80011a4:	f040 808c 	bne.w	80012c0 <sd_driver_init+0x19c>
      {
        /* Voltage Range 2.7-3.6V */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80011a8:	2100      	movs	r1, #0
 80011aa:	2077      	movs	r0, #119	; 0x77
 80011ac:	f7ff fe58 	bl	8000e60 <SD_SendCmd>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d807      	bhi.n	80011c6 <sd_driver_init+0xa2>
 80011b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011ba:	2069      	movs	r0, #105	; 0x69
 80011bc:	f7ff fe50 	bl	8000e60 <SD_SendCmd>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d008      	beq.n	80011d8 <sd_driver_init+0xb4>
            break; /* ACMD41 with HCS bit */
        } while ((MS_TICKS() - startTicks) < 1000);
 80011c6:	f001 fae7 	bl	8002798 <rcc_msGetTicks>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d4:	d3e8      	bcc.n	80011a8 <sd_driver_init+0x84>
 80011d6:	e000      	b.n	80011da <sd_driver_init+0xb6>
            break; /* ACMD41 with HCS bit */
 80011d8:	bf00      	nop

        if (((MS_TICKS() - startTicks) < 1000) && SD_SendCmd(CMD58, 0) == 0)
 80011da:	f001 fadd 	bl	8002798 <rcc_msGetTicks>
 80011de:	4602      	mov	r2, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e8:	d26a      	bcs.n	80012c0 <sd_driver_init+0x19c>
 80011ea:	2100      	movs	r1, #0
 80011ec:	207a      	movs	r0, #122	; 0x7a
 80011ee:	f7ff fe37 	bl	8000e60 <SD_SendCmd>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d163      	bne.n	80012c0 <sd_driver_init+0x19c>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e00c      	b.n	8001218 <sd_driver_init+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80011fe:	7bfc      	ldrb	r4, [r7, #15]
 8001200:	f7ff fd02 	bl	8000c08 <SPI_RxByte>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	f104 0310 	add.w	r3, r4, #16
 800120c:	443b      	add	r3, r7
 800120e:	f803 2c0c 	strb.w	r2, [r3, #-12]
          for (n = 0; n < 4; n++)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	3301      	adds	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d9ef      	bls.n	80011fe <sd_driver_init+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <sd_driver_init+0x108>
 8001228:	2306      	movs	r3, #6
 800122a:	e000      	b.n	800122e <sd_driver_init+0x10a>
 800122c:	2302      	movs	r3, #2
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	e046      	b.n	80012c0 <sd_driver_init+0x19c>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001232:	2100      	movs	r1, #0
 8001234:	2077      	movs	r0, #119	; 0x77
 8001236:	f7ff fe13 	bl	8000e60 <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	d808      	bhi.n	8001252 <sd_driver_init+0x12e>
 8001240:	2100      	movs	r1, #0
 8001242:	2069      	movs	r0, #105	; 0x69
 8001244:	f7ff fe0c 	bl	8000e60 <SD_SendCmd>
 8001248:	4603      	mov	r3, r0
 800124a:	2b01      	cmp	r3, #1
 800124c:	d801      	bhi.n	8001252 <sd_driver_init+0x12e>
 800124e:	2302      	movs	r3, #2
 8001250:	e000      	b.n	8001254 <sd_driver_init+0x130>
 8001252:	2301      	movs	r3, #1
 8001254:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d10e      	bne.n	800127a <sd_driver_init+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800125c:	2100      	movs	r1, #0
 800125e:	2077      	movs	r0, #119	; 0x77
 8001260:	f7ff fdfe 	bl	8000e60 <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d80e      	bhi.n	8001288 <sd_driver_init+0x164>
 800126a:	2100      	movs	r1, #0
 800126c:	2069      	movs	r0, #105	; 0x69
 800126e:	f7ff fdf7 	bl	8000e60 <SD_SendCmd>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <sd_driver_init+0x164>
            break; /* ACMD41 */
 8001278:	e010      	b.n	800129c <sd_driver_init+0x178>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800127a:	2100      	movs	r1, #0
 800127c:	2041      	movs	r0, #65	; 0x41
 800127e:	f7ff fdef 	bl	8000e60 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <sd_driver_init+0x176>
            break; /* CMD1 */
        }
      } while ((MS_TICKS() - startTicks) < 1000);
 8001288:	f001 fa86 	bl	8002798 <rcc_msGetTicks>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001296:	d3de      	bcc.n	8001256 <sd_driver_init+0x132>
 8001298:	e000      	b.n	800129c <sd_driver_init+0x178>
            break; /* CMD1 */
 800129a:	bf00      	nop

      if (((MS_TICKS() - startTicks) > 1000) || SD_SendCmd(CMD16, 512) != 0)
 800129c:	f001 fa7c 	bl	8002798 <rcc_msGetTicks>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012aa:	d807      	bhi.n	80012bc <sd_driver_init+0x198>
 80012ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b0:	2050      	movs	r0, #80	; 0x50
 80012b2:	f7ff fdd5 	bl	8000e60 <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <sd_driver_init+0x19c>
      {
        //Block Length based on type
        type = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <sd_driver_init+0x1d8>)
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	7013      	strb	r3, [r2, #0]
  DESELECT();
 80012c6:	f7ff fc88 	bl	8000bda <DESELECT>
  SPI_RxByte(); /* Idle State exist */
 80012ca:	f7ff fc9d 	bl	8000c08 <SPI_RxByte>
  if (type)
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <sd_driver_init+0x1c2>
  {
    /* Clear STATUS_NOINIT */
    Stat &= ~STATUS_NOINIT;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <sd_driver_init+0x1d4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <sd_driver_init+0x1d4>)
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e001      	b.n	80012ea <sd_driver_init+0x1c6>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80012e6:	f7ff fd19 	bl	8000d1c <SD_PowerOff>
  }
  return Stat;
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <sd_driver_init+0x1d4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000210 	.word	0x20000210

08001300 <sd_driver_getState>:

/**
 * @brief SD Card Status
 */
SD_State_e sd_driver_getState(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return Stat;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <sd_driver_getState+0x14>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000

08001318 <sd_driver_readBlocks>:

/**
 * @brief Read Block
 */
bool sd_driver_readBlocks(uint8_t *pData, uint32_t readAddr, uint32_t numOfBlocks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  if (Stat & STATUS_NOINIT)
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <sd_driver_readBlocks+0xc0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <sd_driver_readBlocks+0x1e>
    return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e04b      	b.n	80013ce <sd_driver_readBlocks+0xb6>
  if (!(CardType & 4))
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <sd_driver_readBlocks+0xc4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <sd_driver_readBlocks+0x30>
    readAddr *= 512; //Sector size
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	60bb      	str	r3, [r7, #8]
  SELECT();
 8001348:	f7ff fc40 	bl	8000bcc <SELECT>

  if (numOfBlocks == 1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d111      	bne.n	8001376 <sd_driver_readBlocks+0x5e>
  {
    //Read single Block
    if ((SD_SendCmd(CMD17, readAddr) == 0) && SD_RxDataBlock(pData, 512))
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	2051      	movs	r0, #81	; 0x51
 8001356:	f7ff fd83 	bl	8000e60 <SD_SendCmd>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d12c      	bne.n	80013ba <sd_driver_readBlocks+0xa2>
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f7ff fcf1 	bl	8000d4c <SD_RxDataBlock>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d024      	beq.n	80013ba <sd_driver_readBlocks+0xa2>
      numOfBlocks = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	e021      	b.n	80013ba <sd_driver_readBlocks+0xa2>
  }
  else
  {
    //Read Multiple Blocks
    if (SD_SendCmd(CMD18, readAddr) == 0)
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	2052      	movs	r0, #82	; 0x52
 800137a:	f7ff fd71 	bl	8000e60 <SD_SendCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d11a      	bne.n	80013ba <sd_driver_readBlocks+0xa2>
    {
      do {
        if (!SD_RxDataBlock(pData, 512))
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fcdf 	bl	8000d4c <SD_RxDataBlock>
 800138e:	4603      	mov	r3, r0
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10a      	bne.n	80013b0 <sd_driver_readBlocks+0x98>
          break;

        pData += 512;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013a0:	60fb      	str	r3, [r7, #12]
      } while (--numOfBlocks);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ea      	bne.n	8001384 <sd_driver_readBlocks+0x6c>
 80013ae:	e000      	b.n	80013b2 <sd_driver_readBlocks+0x9a>
          break;
 80013b0:	bf00      	nop

      /* STOP_TRANSMISSION request send */
      SD_SendCmd(CMD12, 0);
 80013b2:	2100      	movs	r1, #0
 80013b4:	204c      	movs	r0, #76	; 0x4c
 80013b6:	f7ff fd53 	bl	8000e60 <SD_SendCmd>
    }
  }
  DESELECT();
 80013ba:	f7ff fc0e 	bl	8000bda <DESELECT>
  SPI_RxByte(); /* Idle Exit */
 80013be:	f7ff fc23 	bl	8000c08 <SPI_RxByte>
  return numOfBlocks ? false : true;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000210 	.word	0x20000210

080013e0 <sd_driver_writeBlocks>:

/**
 * @brief Write Block
 */
bool sd_driver_writeBlocks(uint8_t *pData, uint32_t writeAddr, uint32_t numOfBlocks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  if (Stat & STATUS_NOINIT)
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <sd_driver_writeBlocks+0xf8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <sd_driver_writeBlocks+0x1e>
    return false;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e068      	b.n	80014d0 <sd_driver_writeBlocks+0xf0>

  if (Stat & STATUS_PROTECT)
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <sd_driver_writeBlocks+0xf8>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <sd_driver_writeBlocks+0x30>
    return false;
 800140c:	2300      	movs	r3, #0
 800140e:	e05f      	b.n	80014d0 <sd_driver_writeBlocks+0xf0>

  if (!(CardType & 4))
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <sd_driver_writeBlocks+0xfc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <sd_driver_writeBlocks+0x42>
    writeAddr *= 512; //Sector size
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	025b      	lsls	r3, r3, #9
 8001420:	60bb      	str	r3, [r7, #8]

  SELECT();
 8001422:	f7ff fbd3 	bl	8000bcc <SELECT>

  if (numOfBlocks == 1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d110      	bne.n	800144e <sd_driver_writeBlocks+0x6e>
  {
    //Write Single Block
    if ((SD_SendCmd(CMD24, writeAddr) == 0) && SD_TxDataBlock(pData, 0xFE))
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	2058      	movs	r0, #88	; 0x58
 8001430:	f7ff fd16 	bl	8000e60 <SD_SendCmd>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d140      	bne.n	80014bc <sd_driver_writeBlocks+0xdc>
 800143a:	21fe      	movs	r1, #254	; 0xfe
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fcbb 	bl	8000db8 <SD_TxDataBlock>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d039      	beq.n	80014bc <sd_driver_writeBlocks+0xdc>
      numOfBlocks = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	e036      	b.n	80014bc <sd_driver_writeBlocks+0xdc>
  }
  else
  {
    //Write Multiple Blocks
    if (CardType & 2)
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <sd_driver_writeBlocks+0xfc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <sd_driver_writeBlocks+0x8a>
    {
      SD_SendCmd(CMD55, 0);
 800145a:	2100      	movs	r1, #0
 800145c:	2077      	movs	r0, #119	; 0x77
 800145e:	f7ff fcff 	bl	8000e60 <SD_SendCmd>
      SD_SendCmd(CMD23, numOfBlocks); /* ACMD23 */
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2057      	movs	r0, #87	; 0x57
 8001466:	f7ff fcfb 	bl	8000e60 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, writeAddr) == 0)
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	2059      	movs	r0, #89	; 0x59
 800146e:	f7ff fcf7 	bl	8000e60 <SD_SendCmd>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d121      	bne.n	80014bc <sd_driver_writeBlocks+0xdc>
    {
      do {
        if(!SD_TxDataBlock(pData, 0xFC))
 8001478:	21fc      	movs	r1, #252	; 0xfc
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fc9c 	bl	8000db8 <SD_TxDataBlock>
 8001480:	4603      	mov	r3, r0
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <sd_driver_writeBlocks+0xc2>
          break;

        pData += 512;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001492:	60fb      	str	r3, [r7, #12]
      } while (--numOfBlocks);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1eb      	bne.n	8001478 <sd_driver_writeBlocks+0x98>
 80014a0:	e000      	b.n	80014a4 <sd_driver_writeBlocks+0xc4>
          break;
 80014a2:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80014a4:	21fd      	movs	r1, #253	; 0xfd
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fc86 	bl	8000db8 <SD_TxDataBlock>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f083 0301 	eor.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <sd_driver_writeBlocks+0xdc>
      {
        numOfBlocks = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
      }
    }
  }

  DESELECT();
 80014bc:	f7ff fb8d 	bl	8000bda <DESELECT>
  SPI_RxByte();
 80014c0:	f7ff fba2 	bl	8000c08 <SPI_RxByte>

  return numOfBlocks ? false : true;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bf0c      	ite	eq
 80014ca:	2301      	moveq	r3, #1
 80014cc:	2300      	movne	r3, #0
 80014ce:	b2db      	uxtb	r3, r3
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000210 	.word	0x20000210

080014e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
  BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return (DSTATUS)sd_driver_init();
 80014ea:	f7ff fe1b 	bl	8001124 <sd_driver_init>
 80014ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
  BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  if(sd_driver_getState() == SD_State_OK)
 8001502:	f7ff fefd 	bl	8001300 <sd_driver_getState>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <USER_status+0x24>
  {
    Stat &= ~STA_NOINIT;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <USER_status+0x34>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <USER_status+0x34>)
 800151a:	701a      	strb	r2, [r3, #0]
  }
    return Stat;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <USER_status+0x34>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000001 	.word	0x20000001

08001530 <USER_read>:
  BYTE pdrv,      /* Physical drive nmuber to identify the drive */
  BYTE *buff,     /* Data buffer to store read data */
  DWORD sector,   /* Sector address in LBA */
  UINT count      /* Number of sectors to read */
)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  if(sd_driver_readBlocks((uint8_t*)buff, (uint32_t)(sector), count))
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f7ff fee7 	bl	8001318 <sd_driver_readBlocks>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <USER_read+0x24>
  {
    return RES_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e000      	b.n	8001556 <USER_read+0x26>
  }
  return RES_ERROR;
 8001554:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <USER_write>:
  BYTE pdrv,          /* Physical drive nmuber to identify the drive */
  const BYTE *buff,   /* Data to be written */
  DWORD sector,       /* Sector address in LBA */
  UINT count          /* Number of sectors to write */
)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  if(sd_driver_writeBlocks((uint8_t*)buff, (uint32_t)(sector), count))
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f7ff ff34 	bl	80013e0 <sd_driver_writeBlocks>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <USER_write+0x24>
  {
    return RES_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <USER_write+0x26>
  }
  return RES_ERROR;
 8001582:	2301      	movs	r3, #1
  /* USER CODE END WRITE */
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <USER_ioctl>:
DRESULT USER_ioctl (
  BYTE pdrv,      /* Physical drive nmuber (0..) */
  BYTE cmd,       /* Control code */
  void *buff      /* Buffer to send/receive control data */
)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	603a      	str	r2, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	460b      	mov	r3, r1
 800159a:	71bb      	strb	r3, [r7, #6]
  BYTE *ptr = buff;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN IOCTL */
  DRESULT res = RES_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75fb      	strb	r3, [r7, #23]
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015a4:	4b51      	ldr	r3, [pc, #324]	; (80016ec <USER_ioctl+0x160>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <USER_ioctl+0x2a>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e095      	b.n	80016e2 <USER_ioctl+0x156>

  switch (cmd)
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	2b0d      	cmp	r3, #13
 80015ba:	f200 8083 	bhi.w	80016c4 <USER_ioctl+0x138>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <USER_ioctl+0x38>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	08001635 	.word	0x08001635
 80015c8:	080015fd 	.word	0x080015fd
 80015cc:	08001619 	.word	0x08001619
 80015d0:	080016c5 	.word	0x080016c5
 80015d4:	080016c5 	.word	0x080016c5
 80015d8:	0800167b 	.word	0x0800167b
 80015dc:	080016c5 	.word	0x080016c5
 80015e0:	080016c5 	.word	0x080016c5
 80015e4:	080016c5 	.word	0x080016c5
 80015e8:	080016c5 	.word	0x080016c5
 80015ec:	080016c5 	.word	0x080016c5
 80015f0:	08001645 	.word	0x08001645
 80015f4:	08001657 	.word	0x08001657
 80015f8:	08001669 	.word	0x08001669
  {
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
  {
    uint32_t sectorCount;
    if(sd_driver_ll_getSectorCount(&sectorCount))
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fc7f 	bl	8000f04 <sd_driver_ll_getSectorCount>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d05e      	beq.n	80016ca <USER_ioctl+0x13e>
    {
      *(DWORD*)buff = sectorCount;
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    }
  }
    break;
 8001616:	e058      	b.n	80016ca <USER_ioctl+0x13e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
  {
    uint32_t sectorSize;
    if(sd_driver_ll_getSectorSize(&sectorSize))
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fccc 	bl	8000fba <sd_driver_ll_getSectorSize>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d052      	beq.n	80016ce <USER_ioctl+0x142>
    {
      *(DWORD*)buff = sectorSize;
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]
    }
  }
    break;
 8001632:	e04c      	b.n	80016ce <USER_ioctl+0x142>
  case CTRL_SYNC:
    if(sd_driver_ll_sync())
 8001634:	f7ff fced 	bl	8001012 <sd_driver_ll_sync>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d049      	beq.n	80016d2 <USER_ioctl+0x146>
    {
      res = RES_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8001642:	e046      	b.n	80016d2 <USER_ioctl+0x146>

  case MMC_GET_CSD:
    if(sd_driver_ll_getCSD((uint8_t *)buff))
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff fcfb 	bl	8001040 <sd_driver_ll_getCSD>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d042      	beq.n	80016d6 <USER_ioctl+0x14a>
    {
      res = RES_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8001654:	e03f      	b.n	80016d6 <USER_ioctl+0x14a>

  case MMC_GET_CID:
    if(sd_driver_ll_getCID((uint8_t *)buff))
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f7ff fd15 	bl	8001086 <sd_driver_ll_getCID>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03b      	beq.n	80016da <USER_ioctl+0x14e>
    {
      res = RES_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8001666:	e038      	b.n	80016da <USER_ioctl+0x14e>

  case MMC_GET_OCR:
    if(sd_driver_ll_getOCR((uint8_t *)buff))
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7ff fd2f 	bl	80010cc <sd_driver_ll_getOCR>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d034      	beq.n	80016de <USER_ioctl+0x152>
    {
      res = RES_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]
    }
    break;
 8001678:	e031      	b.n	80016de <USER_ioctl+0x152>

  case CTRL_POWER:
  {
    switch (*ptr)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d012      	beq.n	80016a8 <USER_ioctl+0x11c>
 8001682:	2b02      	cmp	r3, #2
 8001684:	dc1a      	bgt.n	80016bc <USER_ioctl+0x130>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <USER_ioctl+0x104>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d006      	beq.n	800169c <USER_ioctl+0x110>
 800168e:	e015      	b.n	80016bc <USER_ioctl+0x130>
    {
    case 0:
      sd_driver_ll_controlPower(0);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fca1 	bl	8000fd8 <sd_driver_ll_controlPower>
      res = RES_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
      break;
 800169a:	e012      	b.n	80016c2 <USER_ioctl+0x136>
    case 1:
      sd_driver_ll_controlPower(1);
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff fc9b 	bl	8000fd8 <sd_driver_ll_controlPower>
      res = RES_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
      break;
 80016a6:	e00c      	b.n	80016c2 <USER_ioctl+0x136>
    case 2:
      *(ptr + 1) = (BYTE) sd_driver_ll_getPowerState();
 80016a8:	f7ff fca7 	bl	8000ffa <sd_driver_ll_getPowerState>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	701a      	strb	r2, [r3, #0]
      res = RES_OK;             /* Power Check */
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
      break;
 80016ba:	e002      	b.n	80016c2 <USER_ioctl+0x136>
    default:
      res = RES_PARERR;
 80016bc:	2304      	movs	r3, #4
 80016be:	75fb      	strb	r3, [r7, #23]
      break;
 80016c0:	bf00      	nop
    }
  }
  break;
 80016c2:	e00d      	b.n	80016e0 <USER_ioctl+0x154>

  default:
    res = RES_PARERR;
 80016c4:	2304      	movs	r3, #4
 80016c6:	75fb      	strb	r3, [r7, #23]
 80016c8:	e00a      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016ca:	bf00      	nop
 80016cc:	e008      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016ce:	bf00      	nop
 80016d0:	e006      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016d2:	bf00      	nop
 80016d4:	e004      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016d6:	bf00      	nop
 80016d8:	e002      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <USER_ioctl+0x154>
    break;
 80016de:	bf00      	nop
  }

  return res;
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END IOCTL */
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000001 	.word	0x20000001

080016f0 <main>:
FATFS fs;
DWORD freeClusters;
FATFS *pFatFs;
uint32_t total_size,free_space;;
int main (void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	//----------Setup------------------------------//
	//16 MHz HSI Clock configuration
	rcc_HSI_UART_config();
 80016f4:	f001 f872 	bl	80027dc <rcc_HSI_UART_config>
	//System Timer Configuration
	rcc_SysTick_config(SYSTEM_CLK/8000);
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <main+0xe0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a35      	ldr	r2, [pc, #212]	; (80017d4 <main+0xe4>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0a5b      	lsrs	r3, r3, #9
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f80d 	bl	8002724 <rcc_SysTick_config>
	//User led configuration
	gpio_LED_config();
 800170a:	f000 ff83 	bl	8002614 <gpio_LED_config>
	//UART configuration
	uart_UART2_GPIO_config();
 800170e:	f001 fb53 	bl	8002db8 <uart_UART2_GPIO_config>
	uart_UART2_config(SYSTEM_CLK);
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <main+0xe0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fbb0 	bl	8002e7c <uart_UART2_config>
	//SD Card initialization
	spi_SD_CS_config();
 800171c:	f001 fa78 	bl	8002c10 <spi_SD_CS_config>
	spi_GPIO_config();
 8001720:	f001 f890 	bl	8002844 <spi_GPIO_config>
	spi_config(SYSTEM_CLK);
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <main+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f001 f94b 	bl	80029c4 <spi_config>
	MX_FATFS_Init(); //Initialize FatFs layer
 800172e:	f7ff fa3b 	bl	8000ba8 <MX_FATFS_Init>
	rcc_msDelay(100);
 8001732:	2064      	movs	r0, #100	; 0x64
 8001734:	f001 f83c 	bl	80027b0 <rcc_msDelay>
	//Mount SD Card
	fresult=f_mount(&fs, "", 1);
 8001738:	2201      	movs	r2, #1
 800173a:	4927      	ldr	r1, [pc, #156]	; (80017d8 <main+0xe8>)
 800173c:	4827      	ldr	r0, [pc, #156]	; (80017dc <main+0xec>)
 800173e:	f000 fdf7 	bl	8002330 <f_mount>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <main+0xf0>)
 8001748:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <main+0xf0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <main+0x6a>
	{
		printf("Failed to mount SD card to FatFs\r\n");
 8001752:	4824      	ldr	r0, [pc, #144]	; (80017e4 <main+0xf4>)
 8001754:	f002 f978 	bl	8003a48 <puts>
 8001758:	e002      	b.n	8001760 <main+0x70>
	}
	else
	{
		printf("Successfully Mounted SD card\r\n");
 800175a:	4823      	ldr	r0, [pc, #140]	; (80017e8 <main+0xf8>)
 800175c:	f002 f974 	bl	8003a48 <puts>
	}
	//Print status
	printf("SD card result = %d\r\n",fresult);
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <main+0xf0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4821      	ldr	r0, [pc, #132]	; (80017ec <main+0xfc>)
 8001768:	f002 f8e8 	bl	800393c <iprintf>
	//Read SD card size and free space
	f_getfree("",&freeClusters, &pFatFs);
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <main+0x100>)
 800176e:	4921      	ldr	r1, [pc, #132]	; (80017f4 <main+0x104>)
 8001770:	4819      	ldr	r0, [pc, #100]	; (80017d8 <main+0xe8>)
 8001772:	f000 fe25 	bl	80023c0 <f_getfree>
    total_size= (pFatFs->n_fatent - 2)*pFatFs->csize;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <main+0x100>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800177e:	3b02      	subs	r3, #2
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <main+0x100>)
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <main+0x108>)
 800178e:	6013      	str	r3, [r2, #0]
    free_space = freeClusters*pFatFs->csize;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <main+0x100>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001798:	461a      	mov	r2, r3
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <main+0x104>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <main+0x10c>)
 80017a4:	6013      	str	r3, [r2, #0]
    //SD card clusters have 512Bytes
    //For that we want the number of clusters/2
    //(number of 1024bytes(1KB) clusters)
    printf("%lu KB total drive space.\r\n",total_size/2);
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <main+0x108>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	4619      	mov	r1, r3
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <main+0x110>)
 80017b0:	f002 f8c4 	bl	800393c <iprintf>
    printf("%lu KB available space.\r\n",free_space/2);
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <main+0x10c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <main+0x114>)
 80017be:	f002 f8bd 	bl	800393c <iprintf>

	//----------Loop forever-----------------------//
	while(1)
	{
       gpio_LED_toggleGreen();
 80017c2:	f000 ff57 	bl	8002674 <gpio_LED_toggleGreen>
       rcc_msDelay(500);
 80017c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ca:	f000 fff1 	bl	80027b0 <rcc_msDelay>
       gpio_LED_toggleGreen();
 80017ce:	e7f8      	b.n	80017c2 <main+0xd2>
 80017d0:	20000018 	.word	0x20000018
 80017d4:	10624dd3 	.word	0x10624dd3
 80017d8:	08005c58 	.word	0x08005c58
 80017dc:	20000214 	.word	0x20000214
 80017e0:	20000212 	.word	0x20000212
 80017e4:	08005c5c 	.word	0x08005c5c
 80017e8:	08005c80 	.word	0x08005c80
 80017ec:	08005ca0 	.word	0x08005ca0
 80017f0:	20000448 	.word	0x20000448
 80017f4:	20000444 	.word	0x20000444
 80017f8:	2000044c 	.word	0x2000044c
 80017fc:	20000450 	.word	0x20000450
 8001800:	08005cb8 	.word	0x08005cb8
 8001804:	08005cd4 	.word	0x08005cd4

08001808 <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2264      	movs	r2, #100	; 0x64
 800181c:	2101      	movs	r1, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fb88 	bl	8002f34 <uart_UART2_TX>
 return ch;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

int _write(int file,char *ptr, int len) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
  __io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ffdd 	bl	8001808 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
 }
 return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <disk_status+0x30>)
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	4905      	ldr	r1, [pc, #20]	; (80018bc <disk_status+0x30>)
 80018a6:	440a      	add	r2, r1
 80018a8:	7a12      	ldrb	r2, [r2, #8]
 80018aa:	4610      	mov	r0, r2
 80018ac:	4798      	blx	r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000474 	.word	0x20000474

080018c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <disk_initialize+0x48>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <disk_initialize+0x48>)
 80018dc:	2101      	movs	r1, #1
 80018de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <disk_initialize+0x48>)
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	4906      	ldr	r1, [pc, #24]	; (8001908 <disk_initialize+0x48>)
 80018f0:	440a      	add	r2, r1
 80018f2:	7a12      	ldrb	r2, [r2, #8]
 80018f4:	4610      	mov	r0, r2
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000474 	.word	0x20000474

0800190c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <disk_read+0x3c>)
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	689c      	ldr	r4, [r3, #8]
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <disk_read+0x3c>)
 800192c:	4413      	add	r3, r2
 800192e:	7a18      	ldrb	r0, [r3, #8]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	47a0      	blx	r4
 8001938:	4603      	mov	r3, r0
 800193a:	75fb      	strb	r3, [r7, #23]
  return res;
 800193c:	7dfb      	ldrb	r3, [r7, #23]
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000474 	.word	0x20000474

0800194c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <disk_write+0x3c>)
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68dc      	ldr	r4, [r3, #12]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <disk_write+0x3c>)
 800196c:	4413      	add	r3, r2
 800196e:	7a18      	ldrb	r0, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	47a0      	blx	r4
 8001978:	4603      	mov	r3, r0
 800197a:	75fb      	strb	r3, [r7, #23]
  return res;
 800197c:	7dfb      	ldrb	r3, [r7, #23]
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	20000474 	.word	0x20000474

0800198c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e016      	b.n	80019c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800199a:	4910      	ldr	r1, [pc, #64]	; (80019dc <clear_lock+0x50>)
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d108      	bne.n	80019c2 <clear_lock+0x36>
 80019b0:	490a      	ldr	r1, [pc, #40]	; (80019dc <clear_lock+0x50>)
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d9e5      	bls.n	800199a <clear_lock+0xe>
	}
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	2000045c 	.word	0x2000045c

080019e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d038      	beq.n	8001a68 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80019fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	2301      	movs	r3, #1
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	f7ff ff9f 	bl	800194c <disk_write>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e026      	b.n	8001a68 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	1ad2      	subs	r2, r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d218      	bcs.n	8001a68 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e010      	b.n	8001a62 <sync_window+0x82>
					wsect += fs->fsize;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	2301      	movs	r3, #1
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f7ff ff78 	bl	800194c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d8eb      	bhi.n	8001a40 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d01b      	beq.n	8001ac4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffa7 	bl	80019e0 <sync_window>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d113      	bne.n	8001ac4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	f7ff ff30 	bl	800190c <disk_read>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d905      	bls.n	8001aea <get_fat+0x1c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d302      	bcc.n	8001af0 <get_fat+0x22>
		val = 1;	/* Internal error */
 8001aea:	2301      	movs	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e0a3      	b.n	8001c38 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d068      	beq.n	8001bd2 <get_fat+0x104>
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	f300 808f 	bgt.w	8001c24 <get_fat+0x156>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d002      	beq.n	8001b10 <get_fat+0x42>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d040      	beq.n	8001b90 <get_fat+0xc2>
 8001b0e:	e089      	b.n	8001c24 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	0a5b      	lsrs	r3, r3, #9
 8001b28:	4413      	add	r3, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffa0 	bl	8001a72 <move_window>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d178      	bne.n	8001c2a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60fa      	str	r2, [r7, #12]
 8001b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	0a5b      	lsrs	r3, r3, #9
 8001b52:	4413      	add	r3, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ff8b 	bl	8001a72 <move_window>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d165      	bne.n	8001c2e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <get_fat+0xb8>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	e002      	b.n	8001b8c <get_fat+0xbe>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	617b      	str	r3, [r7, #20]
			break;
 8001b8e:	e053      	b.n	8001c38 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff67 	bl	8001a72 <move_window>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d143      	bne.n	8001c32 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	617b      	str	r3, [r7, #20]
			break;
 8001bd0:	e032      	b.n	8001c38 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	09db      	lsrs	r3, r3, #7
 8001bdc:	4413      	add	r3, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff46 	bl	8001a72 <move_window>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d124      	bne.n	8001c36 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	061a      	lsls	r2, r3, #24
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3302      	adds	r3, #2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	3201      	adds	r2, #1
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	0212      	lsls	r2, r2, #8
 8001c14:	4313      	orrs	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c20:	617b      	str	r3, [r7, #20]
			break;
 8001c22:	e009      	b.n	8001c38 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e006      	b.n	8001c38 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c2a:	bf00      	nop
 8001c2c:	e004      	b.n	8001c38 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001c36:	bf00      	nop
		}
	}

	return val;
 8001c38:	697b      	ldr	r3, [r7, #20]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b087      	sub	sp, #28
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d031      	beq.n	8001cbc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e002      	b.n	8001c66 <get_ldnumber+0x24>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d903      	bls.n	8001c76 <get_ldnumber+0x34>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b3a      	cmp	r3, #58	; 0x3a
 8001c74:	d1f4      	bne.n	8001c60 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8001c7c:	d11c      	bne.n	8001cb8 <get_ldnumber+0x76>
			tp = *path;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60fa      	str	r2, [r7, #12]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b30      	subs	r3, #48	; 0x30
 8001c8e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d80e      	bhi.n	8001cb4 <get_ldnumber+0x72>
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d10a      	bne.n	8001cb4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <get_ldnumber+0x72>
					vol = (int)i;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	e002      	b.n	8001cbe <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8001cbc:	693b      	ldr	r3, [r7, #16]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fec1 	bl	8001a72 <move_window>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <check_fs+0x2e>
		return 3;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04a      	b.n	8001d90 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001d00:	3301      	adds	r3, #1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <check_fs+0xcc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d001      	beq.n	8001d1e <check_fs+0x52>
		return 2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e038      	b.n	8001d90 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3336      	adds	r3, #54	; 0x36
 8001d22:	3303      	adds	r3, #3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	061a      	lsls	r2, r3, #24
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3336      	adds	r3, #54	; 0x36
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	4313      	orrs	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	3236      	adds	r2, #54	; 0x36
 8001d38:	3201      	adds	r2, #1
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	0212      	lsls	r2, r2, #8
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <check_fs+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <check_fs+0x8a>
		return 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e01c      	b.n	8001d90 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3352      	adds	r3, #82	; 0x52
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	061a      	lsls	r2, r3, #24
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3352      	adds	r3, #82	; 0x52
 8001d64:	3302      	adds	r3, #2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	3252      	adds	r2, #82	; 0x52
 8001d70:	3201      	adds	r2, #1
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	4313      	orrs	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <check_fs+0xd0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <check_fs+0xc2>
		return 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <check_fs+0xc4>

	return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	ffffaa55 	.word	0xffffaa55
 8001d9c:	00544146 	.word	0x00544146

08001da0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b096      	sub	sp, #88	; 0x58
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f7ff ff44 	bl	8001c42 <get_ldnumber>
 8001dba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da01      	bge.n	8001dc6 <find_volume+0x26>
 8001dc2:	230b      	movs	r3, #11
 8001dc4:	e2a8      	b.n	8002318 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001dc6:	4a9d      	ldr	r2, [pc, #628]	; (800203c <find_volume+0x29c>)
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <find_volume+0x3a>
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	e29e      	b.n	8002318 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dde:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01b      	beq.n	8001e22 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fd4b 	bl	800188c <disk_status>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10c      	bne.n	8001e22 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <find_volume+0x7e>
 8001e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	e27c      	b.n	8002318 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e27a      	b.n	8002318 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e36:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fd40 	bl	80018c0 <disk_initialize>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8001e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001e52:	2303      	movs	r3, #3
 8001e54:	e260      	b.n	8002318 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <find_volume+0xcc>
 8001e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8001e68:	230a      	movs	r3, #10
 8001e6a:	e255      	b.n	8002318 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8001e70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e74:	f7ff ff2a 	bl	8001ccc <check_fs>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8001e7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d153      	bne.n	8001f2e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001e86:	2300      	movs	r3, #0
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8a:	e028      	b.n	8001ede <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8001e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001e96:	4413      	add	r3, r2
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <find_volume+0x12a>
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	330b      	adds	r3, #11
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	061a      	lsls	r2, r3, #24
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	330a      	adds	r3, #10
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb8:	3209      	adds	r2, #9
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	0212      	lsls	r2, r2, #8
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	e000      	b.n	8001ecc <find_volume+0x12c>
 8001eca:	2200      	movs	r2, #0
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3358      	adds	r3, #88	; 0x58
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eda:	3301      	adds	r3, #1
 8001edc:	643b      	str	r3, [r7, #64]	; 0x40
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d9d3      	bls.n	8001e8c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <find_volume+0x154>
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8001ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3358      	adds	r3, #88	; 0x58
 8001efa:	443b      	add	r3, r7
 8001efc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001f00:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8001f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <find_volume+0x174>
 8001f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f0c:	f7ff fede 	bl	8001ccc <check_fs>
 8001f10:	4603      	mov	r3, r0
 8001f12:	e000      	b.n	8001f16 <find_volume+0x176>
 8001f14:	2302      	movs	r3, #2
 8001f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8001f1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <find_volume+0x18e>
 8001f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f24:	3301      	adds	r3, #1
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
 8001f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d9e2      	bls.n	8001ef4 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d101      	bne.n	8001f3a <find_volume+0x19a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e1ee      	b.n	8002318 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8001f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <find_volume+0x1a6>
 8001f42:	230d      	movs	r3, #13
 8001f44:	e1e8      	b.n	8002318 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	7b1b      	ldrb	r3, [r3, #12]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	7adb      	ldrb	r3, [r3, #11]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d001      	beq.n	8001f62 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8001f5e:	230d      	movs	r3, #13
 8001f60:	e1da      	b.n	8002318 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	7ddb      	ldrb	r3, [r3, #23]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6c:	7d9b      	ldrb	r3, [r3, #22]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8001f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d112      	bne.n	8001fa4 <find_volume+0x204>
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f84:	061a      	lsls	r2, r3, #24
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f92:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001f96:	0212      	lsls	r2, r2, #8
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f9c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	7c1a      	ldrb	r2, [r3, #16]
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d006      	beq.n	8001fce <find_volume+0x22e>
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d001      	beq.n	8001fce <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8001fca:	230d      	movs	r3, #13
 8001fcc:	e1a4      	b.n	8002318 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8001fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe0:	7b5a      	ldrb	r2, [r3, #13]
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fea:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <find_volume+0x268>
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002000:	3b01      	subs	r3, #1
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8002008:	230d      	movs	r3, #13
 800200a:	e185      	b.n	8002318 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200e:	7c9b      	ldrb	r3, [r3, #18]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21a      	sxth	r2, r3
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	7c5b      	ldrb	r3, [r3, #17]
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29a      	uxth	r2, r3
 8002020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002022:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8002036:	230d      	movs	r3, #13
 8002038:	e16e      	b.n	8002318 <find_volume+0x578>
 800203a:	bf00      	nop
 800203c:	20000454 	.word	0x20000454

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	7d1b      	ldrb	r3, [r3, #20]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	7cdb      	ldrb	r3, [r3, #19]
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b21b      	sxth	r3, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002058:	2b00      	cmp	r3, #0
 800205a:	d112      	bne.n	8002082 <find_volume+0x2e2>
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002062:	061a      	lsls	r2, r3, #24
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	4313      	orrs	r3, r2
 800206e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002070:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002074:	0212      	lsls	r2, r2, #8
 8002076:	4313      	orrs	r3, r2
 8002078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800207a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800207e:	4313      	orrs	r3, r2
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002084:	7bdb      	ldrb	r3, [r3, #15]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	b21a      	sxth	r2, r3
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	7b9b      	ldrb	r3, [r3, #14]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <find_volume+0x300>
 800209c:	230d      	movs	r3, #13
 800209e:	e13b      	b.n	8002318 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80020a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	4413      	add	r3, r2
 80020a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80020ac:	0912      	lsrs	r2, r2, #4
 80020ae:	b292      	uxth	r2, r2
 80020b0:	4413      	add	r3, r2
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80020b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d201      	bcs.n	80020c0 <find_volume+0x320>
 80020bc:	230d      	movs	r3, #13
 80020be:	e12b      	b.n	8002318 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80020c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80020cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <find_volume+0x33c>
 80020d8:	230d      	movs	r3, #13
 80020da:	e11d      	b.n	8002318 <find_volume+0x578>
	fmt = FS_FAT12;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d902      	bls.n	80020f2 <find_volume+0x352>
 80020ec:	2302      	movs	r3, #2
 80020ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d902      	bls.n	8002102 <find_volume+0x362>
 80020fc:	2303      	movs	r3, #3
 80020fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	1c9a      	adds	r2, r3, #2
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002110:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002118:	441a      	add	r2, r3
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8002120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	441a      	add	r2, r3
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800212c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002130:	2b03      	cmp	r3, #3
 8002132:	d121      	bne.n	8002178 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <find_volume+0x3a2>
 800213e:	230d      	movs	r3, #13
 8002140:	e0ea      	b.n	8002318 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002148:	061a      	lsls	r2, r3, #24
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	4313      	orrs	r3, r2
 8002154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002156:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800215a:	0212      	lsls	r2, r2, #8
 800215c:	4313      	orrs	r3, r2
 800215e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002160:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002164:	431a      	orrs	r2, r3
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
 8002176:	e025      	b.n	80021c4 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <find_volume+0x3e6>
 8002182:	230d      	movs	r3, #13
 8002184:	e0c8      	b.n	8002318 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800218c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218e:	441a      	add	r2, r3
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800219a:	2b02      	cmp	r3, #2
 800219c:	d104      	bne.n	80021a8 <find_volume+0x408>
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	e00c      	b.n	80021c2 <find_volume+0x422>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	085a      	lsrs	r2, r3, #1
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80021ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d201      	bcs.n	80021da <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80021d6:	230d      	movs	r3, #13
 80021d8:	e09e      	b.n	8002318 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80021f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d177      	bne.n	80022f0 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21b      	sxth	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d16a      	bne.n	80022f0 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800221a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221c:	3301      	adds	r3, #1
 800221e:	4619      	mov	r1, r3
 8002220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002222:	f7ff fc26 	bl	8001a72 <move_window>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d161      	bne.n	80022f0 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002240:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	4a35      	ldr	r2, [pc, #212]	; (8002320 <find_volume+0x580>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d14f      	bne.n	80022f0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	061a      	lsls	r2, r3, #24
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	789b      	ldrb	r3, [r3, #2]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	4313      	orrs	r3, r2
 800225e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002260:	7852      	ldrb	r2, [r2, #1]
 8002262:	0212      	lsls	r2, r2, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <find_volume+0x584>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d13e      	bne.n	80022f0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8002278:	061a      	lsls	r2, r3, #24
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4313      	orrs	r3, r2
 8002284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002286:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800228a:	0212      	lsls	r2, r2, #8
 800228c:	4313      	orrs	r3, r2
 800228e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002290:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8002294:	4313      	orrs	r3, r2
 8002296:	4a24      	ldr	r2, [pc, #144]	; (8002328 <find_volume+0x588>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d129      	bne.n	80022f0 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80022a2:	061a      	lsls	r2, r3, #24
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	4313      	orrs	r3, r2
 80022ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022b0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80022b4:	0212      	lsls	r2, r2, #8
 80022b6:	4313      	orrs	r3, r2
 80022b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ba:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80022be:	431a      	orrs	r2, r3
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80022cc:	061a      	lsls	r2, r3, #24
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	4313      	orrs	r3, r2
 80022d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022da:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80022de:	0212      	lsls	r2, r2, #8
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80022e8:	431a      	orrs	r2, r3
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80022f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <find_volume+0x58c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <find_volume+0x58c>)
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <find_volume+0x58c>)
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8002310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002312:	f7ff fb3b 	bl	800198c <clear_lock>
#endif

	return FR_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3758      	adds	r7, #88	; 0x58
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	ffffaa55 	.word	0xffffaa55
 8002324:	41615252 	.word	0x41615252
 8002328:	61417272 	.word	0x61417272
 800232c:	20000458 	.word	0x20000458

08002330 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc7b 	bl	8001c42 <get_ldnumber>
 800234c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da01      	bge.n	8002358 <f_mount+0x28>
 8002354:	230b      	movs	r3, #11
 8002356:	e02d      	b.n	80023b4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <f_mount+0x8c>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f7ff fb0f 	bl	800198c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <f_mount+0x8c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <f_mount+0x6a>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <f_mount+0x6e>
 800239a:	2300      	movs	r3, #0
 800239c:	e00a      	b.n	80023b4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2200      	movs	r2, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fcf9 	bl	8001da0 <find_volume>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000454 	.word	0x20000454

080023c0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fce3 	bl	8001da0 <find_volume>
 80023da:	4603      	mov	r3, r0
 80023dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80023e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 80af 	bne.w	800254e <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80023fc:	3b02      	subs	r3, #2
 80023fe:	429a      	cmp	r2, r3
 8002400:	d805      	bhi.n	800240e <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e09f      	b.n	800254e <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002414:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800241a:	7efb      	ldrb	r3, [r7, #27]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d125      	bne.n	800246c <f_getfree+0xac>
				clst = 2;
 8002420:	2302      	movs	r3, #2
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8002424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002426:	69f8      	ldr	r0, [r7, #28]
 8002428:	f7ff fb51 	bl	8001ace <get_fat>
 800242c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d103      	bne.n	800243e <f_getfree+0x7e>
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800243c:	e077      	b.n	800252e <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d103      	bne.n	800244c <f_getfree+0x8c>
 8002444:	2302      	movs	r3, #2
 8002446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800244a:	e070      	b.n	800252e <f_getfree+0x16e>
					if (stat == 0) n++;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <f_getfree+0x98>
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	3301      	adds	r3, #1
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	3301      	adds	r3, #1
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002466:	429a      	cmp	r2, r3
 8002468:	d3dc      	bcc.n	8002424 <f_getfree+0x64>
 800246a:	e060      	b.n	800252e <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d112      	bne.n	80024b0 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002490:	4619      	mov	r1, r3
 8002492:	69f8      	ldr	r0, [r7, #28]
 8002494:	f7ff faed 	bl	8001a72 <move_window>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800249e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d142      	bne.n	800252c <f_getfree+0x16c>
						p = fs->win.d8;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80024aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80024b0:	7efb      	ldrb	r3, [r7, #27]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d115      	bne.n	80024e2 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <f_getfree+0x114>
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	3301      	adds	r3, #1
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	3302      	adds	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3b02      	subs	r3, #2
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e01d      	b.n	800251e <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	3303      	adds	r3, #3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	061a      	lsls	r2, r3, #24
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	3302      	adds	r3, #2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	4313      	orrs	r3, r2
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	3201      	adds	r2, #1
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	0212      	lsls	r2, r2, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	6a3a      	ldr	r2, [r7, #32]
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <f_getfree+0x152>
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	3301      	adds	r3, #1
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	3304      	adds	r3, #4
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3b04      	subs	r3, #4
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	3b01      	subs	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ac      	bne.n	8002484 <f_getfree+0xc4>
 800252a:	e000      	b.n	800252e <f_getfree+0x16e>
						if (res != FR_OK) break;
 800252c:	bf00      	nop
			}
			fs->free_clust = n;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002532:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800254e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002552:	4618      	mov	r0, r3
 8002554:	3738      	adds	r7, #56	; 0x38
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 8002574:	7a5b      	ldrb	r3, [r3, #9]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d831      	bhi.n	80025e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 800257e:	7a5b      	ldrb	r3, [r3, #9]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 800258c:	7a5b      	ldrb	r3, [r3, #9]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 800259c:	7a5b      	ldrb	r3, [r3, #9]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 80025a4:	4413      	add	r3, r2
 80025a6:	79fa      	ldrb	r2, [r7, #7]
 80025a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 80025ac:	7a5b      	ldrb	r3, [r3, #9]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	b2d1      	uxtb	r1, r2
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <FATFS_LinkDriverEx+0x94>)
 80025b6:	7251      	strb	r1, [r2, #9]
 80025b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80025ba:	7dbb      	ldrb	r3, [r7, #22]
 80025bc:	3330      	adds	r3, #48	; 0x30
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3301      	adds	r3, #1
 80025c8:	223a      	movs	r2, #58	; 0x3a
 80025ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3302      	adds	r3, #2
 80025d0:	222f      	movs	r2, #47	; 0x2f
 80025d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3303      	adds	r3, #3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000474 	.word	0x20000474

080025f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffaa 	bl	800255c <FATFS_LinkDriverEx>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <gpio_LED_config>:

/*
 * Brief LEDs GPIO Configuration PB3(On-board Led 3(Green))
 */
void gpio_LED_config(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  //Enable GPIO port B clock
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <gpio_LED_config+0x58>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <gpio_LED_config+0x58>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	64d3      	str	r3, [r2, #76]	; 0x4c
  //Pin mode to output
  GPIOB->MODER &= ~(GPIO_MODER_MODE3);
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <gpio_LED_config+0x5c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <gpio_LED_config+0x5c>)
 800262a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800262e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (GPIO_MODER_MODE3_0);
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <gpio_LED_config+0x5c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <gpio_LED_config+0x5c>)
 8002636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263a:	6013      	str	r3, [r2, #0]
  //Seting output as PushPull
  GPIOB->OTYPER &= ~(GPIO_OTYPER_ODR_3);
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <gpio_LED_config+0x5c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <gpio_LED_config+0x5c>)
 8002642:	f023 0308 	bic.w	r3, r3, #8
 8002646:	6053      	str	r3, [r2, #4]
  //Setting as High Speed Output
  GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3);
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <gpio_LED_config+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <gpio_LED_config+0x5c>)
 800264e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002652:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <gpio_LED_config+0x5c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <gpio_LED_config+0x5c>)
 800265a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	48000400 	.word	0x48000400

08002674 <gpio_LED_toggleGreen>:
      GPIOB->ODR &= ~(GPIO_ODR_OD3);
    }
}

void gpio_LED_toggleGreen(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
    GPIOB->ODR ^= (GPIO_ODR_OD3);
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <gpio_LED_toggleGreen+0x1c>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <gpio_LED_toggleGreen+0x1c>)
 800267e:	f083 0308 	eor.w	r3, r3, #8
 8002682:	6153      	str	r3, [r2, #20]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	48000400 	.word	0x48000400

08002694 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0c      	blt.n	80026c0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_ClearPendingIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <rcc_SysTick_config>:

/*
 * Brief SysTick Configuration
 */
void rcc_SysTick_config(uint32_t arr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  //Reset control register
  SysTick->CTRL=0;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <rcc_SysTick_config+0x54>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  //Set the reload value
  SysTick->LOAD =arr-1;
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <rcc_SysTick_config+0x54>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	6053      	str	r3, [r2, #4]
  //Priority SysTick interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn,15);
 800273a:	210f      	movs	r1, #15
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f7ff ffc6 	bl	80026d0 <__NVIC_SetPriority>
  //Reset SysTick value to 0
  SysTick->VAL=0;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <rcc_SysTick_config+0x54>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  //Enable SysTick from Control register
  SysTick->CTRL &=  ~(SysTick_CTRL_CLKSOURCE_Msk);//Select Processor clock (AHB)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <rcc_SysTick_config+0x54>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <rcc_SysTick_config+0x54>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |=  SysTick_CTRL_TICKINT_Msk;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <rcc_SysTick_config+0x54>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <rcc_SysTick_config+0x54>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |=  (0x1UL << (0U));
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <rcc_SysTick_config+0x54>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <rcc_SysTick_config+0x54>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]

}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <rcc_msIncTicks>:
/*
 * Brief increment msTicks
 */
void rcc_msIncTicks(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  msTicks++;
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <rcc_msIncTicks+0x18>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a03      	ldr	r2, [pc, #12]	; (8002794 <rcc_msIncTicks+0x18>)
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	20000480 	.word	0x20000480

08002798 <rcc_msGetTicks>:
/*
 * Brief get msTicks
 */
uint32_t rcc_msGetTicks(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return msTicks;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <rcc_msGetTicks+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000480 	.word	0x20000480

080027b0 <rcc_msDelay>:
/*
 * Brief msDelay
 */
void rcc_msDelay(uint32_t msDelayTime)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t startTicks= rcc_msGetTicks();
 80027b8:	f7ff ffee 	bl	8002798 <rcc_msGetTicks>
 80027bc:	60f8      	str	r0, [r7, #12]
  while((rcc_msGetTicks() - startTicks )< msDelayTime);
 80027be:	bf00      	nop
 80027c0:	f7ff ffea 	bl	8002798 <rcc_msGetTicks>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <rcc_msDelay+0x10>


}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <rcc_HSI_UART_config>:
/*
 * @Brief HSI for UART (16MHz) Clock Configuration
 */
void rcc_HSI_UART_config(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  // Default clock source is the "multi-speed" internal oscillator.
  // Switch to the 16MHz HSI oscillator.
  RCC->CR |=  ( RCC_CR_HSION );
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <rcc_HSI_UART_config+0x50>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <rcc_HSI_UART_config+0x50>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
  while ( !( RCC->CR & RCC_CR_HSIRDY ) ) {};
 80027ec:	bf00      	nop
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <rcc_HSI_UART_config+0x50>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f9      	beq.n	80027ee <rcc_HSI_UART_config+0x12>
  RCC->CFGR &= ~( RCC_CFGR_SW );
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <rcc_HSI_UART_config+0x50>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4a0b      	ldr	r2, [pc, #44]	; (800282c <rcc_HSI_UART_config+0x50>)
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	6093      	str	r3, [r2, #8]
  RCC->CFGR |=  ( RCC_CFGR_SW_HSI );
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <rcc_HSI_UART_config+0x50>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <rcc_HSI_UART_config+0x50>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6093      	str	r3, [r2, #8]
  while ( ( RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_HSI ) {};
 8002812:	bf00      	nop
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <rcc_HSI_UART_config+0x50>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b04      	cmp	r3, #4
 800281e:	d1f9      	bne.n	8002814 <rcc_HSI_UART_config+0x38>

}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40021000 	.word	0x40021000

08002830 <SysTick_Handler>:
/*
 * Brief SysTick Interrupt callback
 */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn);
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff2c 	bl	8002694 <__NVIC_ClearPendingIRQ>
  rcc_msIncTicks();
 800283c:	f7ff ff9e 	bl	800277c <rcc_msIncTicks>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <spi_GPIO_config>:
/**
 * @Brief SPI1 GPIO pins configuration
 * (PA5(A4)->SP1_SCK,PA6(A5)->SP1_MISO,PA7(A6)->SP1_MOSI)
 */
void spi_GPIO_config(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	//Enable GPIO port A clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8002848:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <spi_GPIO_config+0x17c>)
 800284a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284c:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <spi_GPIO_config+0x17c>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Alternate function mode
	GPIOA->MODER &=~ (GPIO_MODER_MODE5);
 8002854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800285e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002862:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (GPIO_MODER_MODE6);
 8002864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800286e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002872:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (GPIO_MODER_MODE7);
 8002874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800287e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002882:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE5_1);
 8002884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800288e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002892:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE6_1);
 8002894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800289e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE7_1);
 80028a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b2:	6013      	str	r3, [r2, #0]
	//SPI1 is AF5
	GPIOA->AFR[0] &=~ (GPIO_AFRL_AFSEL5);
 80028b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (GPIO_AFRL_AFSEL6);
 80028c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80028d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (GPIO_AFRL_AFSEL7);
 80028d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5UL << GPIO_AFRL_AFSEL5_Pos);
 80028e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028ee:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80028f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5UL << GPIO_AFRL_AFSEL6_Pos);
 80028f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028fe:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002902:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5UL << GPIO_AFRL_AFSEL7_Pos);
 8002904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800290e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8002912:	6213      	str	r3, [r2, #32]
	//High speed Mode
	GPIOA->OSPEEDR &=~ (GPIO_OSPEEDER_OSPEEDR5);
 8002914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800291e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002922:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &=~ (GPIO_OSPEEDER_OSPEEDR6);
 8002924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800292e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002932:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &=~ (GPIO_OSPEEDER_OSPEEDR7);
 8002934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800293e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002942:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR5_1);
 8002944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800294e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002952:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR6_1);
 8002954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800295e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002962:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR7_1);
 8002964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	6093      	str	r3, [r2, #8]
	/*Pull up resistance for all pins except SCLK*/
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD6);
 8002974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800297e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002982:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD7);
 8002984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800298e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002992:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPD6_0);
 8002994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800299e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPD7_0);
 80029a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <spi_config>:

/**
 * @Brief SPI1 peripheral configuration
 */
void spi_config(uint32_t SYSTEM_CLK)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	//Enable SPI1 clock
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <spi_config+0xd4>)
 80029ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d0:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <spi_config+0xd4>)
 80029d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d6:	6613      	str	r3, [r2, #96]	; 0x60
	//Baud Rate Generation
	SPI1->CR1 &=~ (SPI_CR1_BR);
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <spi_config+0xd8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <spi_config+0xd8>)
 80029de:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80029e2:	6013      	str	r3, [r2, #0]
	if (SYSTEM_CLK==16000000)//To generate a 1MHz baud rate
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <spi_config+0xdc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d106      	bne.n	80029fa <spi_config+0x36>
	{
		SPI1->CR1 |= (0x3UL << SPI_CR1_BR_Pos);
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <spi_config+0xd8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <spi_config+0xd8>)
 80029f2:	f043 0318 	orr.w	r3, r3, #24
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	e005      	b.n	8002a06 <spi_config+0x42>
	}
	else//To generate a 625kHz baud rate(with fPCLK=80MHz)
	{
		SPI1->CR1 |= (0x6UL << SPI_CR1_BR_Pos);
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <spi_config+0xd8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <spi_config+0xd8>)
 8002a00:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a04:	6013      	str	r3, [r2, #0]
	}
	//Clock phase
	SPI1->CR1 &=~ (SPI_CR1_CPHA);
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <spi_config+0xd8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <spi_config+0xd8>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
	//Clock polarity
	SPI1->CR1 &=~ (SPI_CR1_CPOL);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <spi_config+0xd8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <spi_config+0xd8>)
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	6013      	str	r3, [r2, #0]
	//Full-Duplex Mode
	SPI1->CR1 &=~ (SPI_CR1_RXONLY);
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <spi_config+0xd8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <spi_config+0xd8>)
 8002a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a28:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &=~ (SPI_CR1_BIDIMODE);
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <spi_config+0xd8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <spi_config+0xd8>)
 8002a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a34:	6013      	str	r3, [r2, #0]
	//MSB First
	SPI1->CR1 &=~ (SPI_CR1_LSBFIRST);
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <spi_config+0xd8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <spi_config+0xd8>)
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	6013      	str	r3, [r2, #0]
	//Internal Slave enable
	SPI1->CR1 |= (SPI_CR1_SSM | SPI_CR1_SSI);
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <spi_config+0xd8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <spi_config+0xd8>)
 8002a48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a4c:	6013      	str	r3, [r2, #0]
	//Mode Master
	SPI1->CR1 |= (SPI_CR1_MSTR);
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <spi_config+0xd8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <spi_config+0xd8>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6013      	str	r3, [r2, #0]
	//Data word (8/16 bits)
	SPI1->CR2 &=~ (SPI_CR2_DS);
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <spi_config+0xd8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <spi_config+0xd8>)
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a64:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= (SPI_CR2_DS_0 |SPI_CR2_DS_1|SPI_CR2_DS_2);
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <spi_config+0xd8>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <spi_config+0xd8>)
 8002a6c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a70:	6053      	str	r3, [r2, #4]
	//Set RX FIFO buffer threshold
	SPI1->CR2 |= (SPI_CR2_FRXTH);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <spi_config+0xd8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <spi_config+0xd8>)
 8002a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7c:	6053      	str	r3, [r2, #4]
	//Enabling SPI
	SPI1->CR1 |= (SPI_CR1_SPE);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <spi_config+0xd8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <spi_config+0xd8>)
 8002a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a88:	6013      	str	r3, [r2, #0]
	//	//Clear all error flags
	//	volatile uint32_t tempRead = SPI1->SR;



}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40013000 	.word	0x40013000
 8002aa0:	00f42400 	.word	0x00f42400

08002aa4 <spi_transmit>:

/**
 * @Brief SPI1 transmit
 */
bool spi_transmit(uint8_t *pointer_data,uint8_t len,uint32_t timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	460b      	mov	r3, r1
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	72fb      	strb	r3, [r7, #11]
	//Enable SPI1(if not)
	SPI1->CR1 |= (SPI_CR1_SPE);
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <spi_transmit+0x9c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <spi_transmit+0x9c>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abc:	6013      	str	r3, [r2, #0]
	//Timeout initial ticks
	uint8_t dataIdx = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	77fb      	strb	r3, [r7, #31]
	uint32_t startTick = rcc_msGetTicks();
 8002ac2:	f7ff fe69 	bl	8002798 <rcc_msGetTicks>
 8002ac6:	61b8      	str	r0, [r7, #24]
	//While loop,TX data managing timeout
	while(dataIdx<len)
 8002ac8:	e019      	b.n	8002afe <spi_transmit+0x5a>
	{
		if(SPI1->SR & SPI_SR_TXE) //Tx buffer empty
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <spi_transmit+0x9c>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <spi_transmit+0x46>
		{
			SPI1->DR = pointer_data[dataIdx];
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <spi_transmit+0x9c>)
 8002ae0:	60da      	str	r2, [r3, #12]
			dataIdx++;
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e009      	b.n	8002afe <spi_transmit+0x5a>
		}
		else //Manage timeout
		{
			if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002aea:	f7ff fe55 	bl	8002798 <rcc_msGetTicks>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d801      	bhi.n	8002afe <spi_transmit+0x5a>
 8002afa:	2300      	movs	r3, #0
 8002afc:	e01b      	b.n	8002b36 <spi_transmit+0x92>
	while(dataIdx<len)
 8002afe:	7ffa      	ldrb	r2, [r7, #31]
 8002b00:	7afb      	ldrb	r3, [r7, #11]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d3e1      	bcc.n	8002aca <spi_transmit+0x26>
		}
	}
	//Wait for busy flag
	while((SPI1->SR & SPI_SR_BSY))
 8002b06:	e009      	b.n	8002b1c <spi_transmit+0x78>
	{
		if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002b08:	f7ff fe46 	bl	8002798 <rcc_msGetTicks>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d801      	bhi.n	8002b1c <spi_transmit+0x78>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e00c      	b.n	8002b36 <spi_transmit+0x92>
	while((SPI1->SR & SPI_SR_BSY))
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <spi_transmit+0x9c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ef      	bne.n	8002b08 <spi_transmit+0x64>
	}
	//Clear overrun conditions
	volatile uint32_t tempRead = SPI1->DR;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <spi_transmit+0x9c>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
	tempRead = SPI1->SR;
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <spi_transmit+0x9c>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]
	return true;
 8002b34:	2301      	movs	r3, #1

}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40013000 	.word	0x40013000

08002b44 <spi_transmitReceive>:

/**
 * @Brief SPI1 transmit/receive
 */
bool spi_transmitReceive(uint8_t *RX_buffer,uint8_t *TX_buffer,uint8_t len,uint32_t timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
	//Enable SPI1(if not)
	SPI1->CR1 |= (SPI_CR1_SPE);
 8002b54:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5e:	6013      	str	r3, [r2, #0]
	//Timeout initial ticks
	uint8_t dataIdx = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
	uint32_t startTick = rcc_msGetTicks();
 8002b64:	f7ff fe18 	bl	8002798 <rcc_msGetTicks>
 8002b68:	61b8      	str	r0, [r7, #24]
	bool isTransmit=1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77bb      	strb	r3, [r7, #30]
	//While loop: TX first, then RX, managing timeout
	while(dataIdx<len)
 8002b6e:	e02d      	b.n	8002bcc <spi_transmitReceive+0x88>
	{
		//TX data
		if((SPI1->SR & SPI_SR_TXE) && isTransmit) //Tx buffer empty
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <spi_transmitReceive+0x4e>
 8002b7c:	7fbb      	ldrb	r3, [r7, #30]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <spi_transmitReceive+0x4e>
		{
			SPI1->DR = TX_buffer[dataIdx];
 8002b82:	7ffb      	ldrb	r3, [r7, #31]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	4413      	add	r3, r2
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002b8c:	60da      	str	r2, [r3, #12]
			isTransmit=false;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	77bb      	strb	r3, [r7, #30]
		}
		//RX data
		if (SPI1->SR & SPI_SR_RXNE)
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <spi_transmitReceive+0x74>
		{
			RX_buffer[dataIdx] = SPI1->DR;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002ba0:	68d9      	ldr	r1, [r3, #12]
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b2ca      	uxtb	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
			dataIdx++;
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]
			isTransmit=true;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	77bb      	strb	r3, [r7, #30]
 8002bb6:	e009      	b.n	8002bcc <spi_transmitReceive+0x88>

		}
		else //Manage timeout
		{
			if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002bb8:	f7ff fdee 	bl	8002798 <rcc_msGetTicks>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d801      	bhi.n	8002bcc <spi_transmitReceive+0x88>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e01b      	b.n	8002c04 <spi_transmitReceive+0xc0>
	while(dataIdx<len)
 8002bcc:	7ffa      	ldrb	r2, [r7, #31]
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3cd      	bcc.n	8002b70 <spi_transmitReceive+0x2c>
		}
	}
	//Wait for busy flag
	while((SPI1->SR & SPI_SR_BSY))
 8002bd4:	e009      	b.n	8002bea <spi_transmitReceive+0xa6>
	{
		if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002bd6:	f7ff fddf 	bl	8002798 <rcc_msGetTicks>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d801      	bhi.n	8002bea <spi_transmitReceive+0xa6>
 8002be6:	2300      	movs	r3, #0
 8002be8:	e00c      	b.n	8002c04 <spi_transmitReceive+0xc0>
	while((SPI1->SR & SPI_SR_BSY))
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ef      	bne.n	8002bd6 <spi_transmitReceive+0x92>
	}
	//Clear overrun conditions
	volatile uint32_t tempRead = SPI1->DR;
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	617b      	str	r3, [r7, #20]
	tempRead = SPI1->SR;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <spi_transmitReceive+0xc8>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	617b      	str	r3, [r7, #20]
	return true;
 8002c02:	2301      	movs	r3, #1

}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40013000 	.word	0x40013000

08002c10 <spi_SD_CS_config>:
/**
 * @Brief SD Chip Select pin configuration
 * PA4(A3)
 */
void spi_SD_CS_config(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
	//Enable GPIO port A clock
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <spi_SD_CS_config+0x8c>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <spi_SD_CS_config+0x8c>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Output mode
	GPIOA->MODER &=~ (GPIO_MODER_MODE4);
 8002c20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE4_0);
 8002c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]
	//High speed Mode
	GPIOA->OSPEEDR &=~ (GPIO_OSPEEDER_OSPEEDR4);
 8002c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR4_1);
 8002c50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5e:	6093      	str	r3, [r2, #8]
	/*Pull up resistance enable*/
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD4);
 8002c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (GPIO_PUPDR_PUPD4_0);
 8002c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	60d3      	str	r3, [r2, #12]
	//Default value is HIGH
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8002c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6193      	str	r3, [r2, #24]

}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <spi_cs_sd_write>:

/**
 * @Brief SD Chip Select Set/Reset
 */
void spi_cs_sd_write(bool state)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	if (state)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <spi_cs_sd_write+0x22>
	{
		GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8002cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	6193      	str	r3, [r2, #24]
	}
	else
	{
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
	}
}
 8002cc0:	e007      	b.n	8002cd2 <spi_cs_sd_write+0x32>
		GPIOA->BSRR |= (GPIO_BSRR_BR4);
 8002cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd0:	6193      	str	r3, [r2, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <__NVIC_SetPriorityGrouping>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8002dbc:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <uart_UART2_GPIO_config+0xc0>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <uart_UART2_GPIO_config+0xc0>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8002dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002dd2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002dd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dda:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8002ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dea:	f043 0320 	orr.w	r3, r3, #32
 8002dee:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 8002df0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8002e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e16:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8002e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8002e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e3a:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8002e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e4a:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 8002e4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e5a:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 8002e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e66:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002e6a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t SYSTEM_CLK)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <uart_UART2_config+0xac>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <uart_UART2_config+0xac>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8e:	6593      	str	r3, [r2, #88]	; 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <uart_UART2_config+0xb0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <uart_UART2_config+0xb0>)
 8002e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6013      	str	r3, [r2, #0]
  // Set baud rate to 9600 Hz
  USART2->BRR = SYSTEM_CLK/9600;
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <uart_UART2_config+0xb0>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4923      	ldr	r1, [pc, #140]	; (8002f30 <uart_UART2_config+0xb4>)
 8002ea2:	fba1 1303 	umull	r1, r3, r1, r3
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	60d3      	str	r3, [r2, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <uart_UART2_config+0xb0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <uart_UART2_config+0xb0>)
 8002eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb4:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <uart_UART2_config+0xb0>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec0:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ecc:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <uart_UART2_config+0xb0>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ee0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ee4:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <uart_UART2_config+0xb0>)
 8002eec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ef0:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <uart_UART2_config+0xb0>)
 8002ef8:	f043 030d 	orr.w	r3, r3, #13
 8002efc:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <uart_UART2_config+0xb0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <uart_UART2_config+0xb0>)
 8002f04:	f043 0320 	orr.w	r3, r3, #32
 8002f08:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7ff fee8 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 8002f10:	2101      	movs	r1, #1
 8002f12:	2026      	movs	r0, #38	; 0x26
 8002f14:	f7ff ff26 	bl	8002d64 <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 8002f18:	2026      	movs	r0, #38	; 0x26
 8002f1a:	f7ff ff05 	bl	8002d28 <__NVIC_EnableIRQ>

}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	1b4e81b5 	.word	0x1b4e81b5

08002f34 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = rcc_msGetTicks();
 8002f46:	f7ff fc27 	bl	8002798 <rcc_msGetTicks>
 8002f4a:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 8002f4c:	e01a      	b.n	8002f84 <uart_UART2_TX+0x50>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <uart_UART2_TX+0x84>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <uart_UART2_TX+0x3c>
    {
      USART2->TDR = data[dataIdx];
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <uart_UART2_TX+0x84>)
 8002f64:	b292      	uxth	r2, r2
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
      dataIdx++;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e009      	b.n	8002f84 <uart_UART2_TX+0x50>
    }
    else //Manage timeout
    {
      if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002f70:	f7ff fc12 	bl	8002798 <rcc_msGetTicks>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d801      	bhi.n	8002f84 <uart_UART2_TX+0x50>
 8002f80:	2300      	movs	r3, #0
 8002f82:	e015      	b.n	8002fb0 <uart_UART2_TX+0x7c>
  while(dataIdx<len)
 8002f84:	7dfa      	ldrb	r2, [r7, #23]
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3e0      	bcc.n	8002f4e <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 8002f8c:	e009      	b.n	8002fa2 <uart_UART2_TX+0x6e>
  {
    if((rcc_msGetTicks() - startTick)>= timeout) return false;
 8002f8e:	f7ff fc03 	bl	8002798 <rcc_msGetTicks>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d801      	bhi.n	8002fa2 <uart_UART2_TX+0x6e>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e006      	b.n	8002fb0 <uart_UART2_TX+0x7c>
  while((USART2->ISR & USART_ISR_TC))
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <uart_UART2_TX+0x84>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ef      	bne.n	8002f8e <uart_UART2_TX+0x5a>
  }
  return true;
 8002fae:	2301      	movs	r3, #1

}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40004400 	.word	0x40004400

08002fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc0:	f7fe fc52 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fc6:	490d      	ldr	r1, [pc, #52]	; (8002ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <LoopForever+0xe>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <LoopForever+0x16>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fea:	f000 f811 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fee:	f7fe fb7f 	bl	80016f0 <main>

08002ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ff2:	e7fe      	b.n	8002ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003000:	080060d4 	.word	0x080060d4
  ldr r2, =_sbss
 8003004:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003008:	20000498 	.word	0x20000498

0800300c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC1_IRQHandler>
	...

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	; (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	; (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	; (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	; (8003054 <__libc_init_array+0x44>)
 8003024:	f002 fe0a 	bl	8005c3c <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	080060cc 	.word	0x080060cc
 800304c:	080060cc 	.word	0x080060cc
 8003050:	080060cc 	.word	0x080060cc
 8003054:	080060d0 	.word	0x080060d0

08003058 <memset>:
 8003058:	4402      	add	r2, r0
 800305a:	4603      	mov	r3, r0
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	f803 1b01 	strb.w	r1, [r3], #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <__cvt>:
 8003068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800306c:	ec55 4b10 	vmov	r4, r5, d0
 8003070:	2d00      	cmp	r5, #0
 8003072:	460e      	mov	r6, r1
 8003074:	4619      	mov	r1, r3
 8003076:	462b      	mov	r3, r5
 8003078:	bfbb      	ittet	lt
 800307a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800307e:	461d      	movlt	r5, r3
 8003080:	2300      	movge	r3, #0
 8003082:	232d      	movlt	r3, #45	; 0x2d
 8003084:	700b      	strb	r3, [r1, #0]
 8003086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003088:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800308c:	4691      	mov	r9, r2
 800308e:	f023 0820 	bic.w	r8, r3, #32
 8003092:	bfbc      	itt	lt
 8003094:	4622      	movlt	r2, r4
 8003096:	4614      	movlt	r4, r2
 8003098:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800309c:	d005      	beq.n	80030aa <__cvt+0x42>
 800309e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80030a2:	d100      	bne.n	80030a6 <__cvt+0x3e>
 80030a4:	3601      	adds	r6, #1
 80030a6:	2102      	movs	r1, #2
 80030a8:	e000      	b.n	80030ac <__cvt+0x44>
 80030aa:	2103      	movs	r1, #3
 80030ac:	ab03      	add	r3, sp, #12
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	ab02      	add	r3, sp, #8
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	ec45 4b10 	vmov	d0, r4, r5
 80030b8:	4653      	mov	r3, sl
 80030ba:	4632      	mov	r2, r6
 80030bc:	f000 fe18 	bl	8003cf0 <_dtoa_r>
 80030c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030c4:	4607      	mov	r7, r0
 80030c6:	d102      	bne.n	80030ce <__cvt+0x66>
 80030c8:	f019 0f01 	tst.w	r9, #1
 80030cc:	d022      	beq.n	8003114 <__cvt+0xac>
 80030ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030d2:	eb07 0906 	add.w	r9, r7, r6
 80030d6:	d110      	bne.n	80030fa <__cvt+0x92>
 80030d8:	783b      	ldrb	r3, [r7, #0]
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d10a      	bne.n	80030f4 <__cvt+0x8c>
 80030de:	2200      	movs	r2, #0
 80030e0:	2300      	movs	r3, #0
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f7fd fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 80030ea:	b918      	cbnz	r0, 80030f4 <__cvt+0x8c>
 80030ec:	f1c6 0601 	rsb	r6, r6, #1
 80030f0:	f8ca 6000 	str.w	r6, [sl]
 80030f4:	f8da 3000 	ldr.w	r3, [sl]
 80030f8:	4499      	add	r9, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	2300      	movs	r3, #0
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	f7fd fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003106:	b108      	cbz	r0, 800310c <__cvt+0xa4>
 8003108:	f8cd 900c 	str.w	r9, [sp, #12]
 800310c:	2230      	movs	r2, #48	; 0x30
 800310e:	9b03      	ldr	r3, [sp, #12]
 8003110:	454b      	cmp	r3, r9
 8003112:	d307      	bcc.n	8003124 <__cvt+0xbc>
 8003114:	9b03      	ldr	r3, [sp, #12]
 8003116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003118:	1bdb      	subs	r3, r3, r7
 800311a:	4638      	mov	r0, r7
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	b004      	add	sp, #16
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e7f0      	b.n	800310e <__cvt+0xa6>

0800312c <__exponent>:
 800312c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800312e:	4603      	mov	r3, r0
 8003130:	2900      	cmp	r1, #0
 8003132:	bfb8      	it	lt
 8003134:	4249      	neglt	r1, r1
 8003136:	f803 2b02 	strb.w	r2, [r3], #2
 800313a:	bfb4      	ite	lt
 800313c:	222d      	movlt	r2, #45	; 0x2d
 800313e:	222b      	movge	r2, #43	; 0x2b
 8003140:	2909      	cmp	r1, #9
 8003142:	7042      	strb	r2, [r0, #1]
 8003144:	dd2a      	ble.n	800319c <__exponent+0x70>
 8003146:	f10d 0407 	add.w	r4, sp, #7
 800314a:	46a4      	mov	ip, r4
 800314c:	270a      	movs	r7, #10
 800314e:	46a6      	mov	lr, r4
 8003150:	460a      	mov	r2, r1
 8003152:	fb91 f6f7 	sdiv	r6, r1, r7
 8003156:	fb07 1516 	mls	r5, r7, r6, r1
 800315a:	3530      	adds	r5, #48	; 0x30
 800315c:	2a63      	cmp	r2, #99	; 0x63
 800315e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003166:	4631      	mov	r1, r6
 8003168:	dcf1      	bgt.n	800314e <__exponent+0x22>
 800316a:	3130      	adds	r1, #48	; 0x30
 800316c:	f1ae 0502 	sub.w	r5, lr, #2
 8003170:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003174:	1c44      	adds	r4, r0, #1
 8003176:	4629      	mov	r1, r5
 8003178:	4561      	cmp	r1, ip
 800317a:	d30a      	bcc.n	8003192 <__exponent+0x66>
 800317c:	f10d 0209 	add.w	r2, sp, #9
 8003180:	eba2 020e 	sub.w	r2, r2, lr
 8003184:	4565      	cmp	r5, ip
 8003186:	bf88      	it	hi
 8003188:	2200      	movhi	r2, #0
 800318a:	4413      	add	r3, r2
 800318c:	1a18      	subs	r0, r3, r0
 800318e:	b003      	add	sp, #12
 8003190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003196:	f804 2f01 	strb.w	r2, [r4, #1]!
 800319a:	e7ed      	b.n	8003178 <__exponent+0x4c>
 800319c:	2330      	movs	r3, #48	; 0x30
 800319e:	3130      	adds	r1, #48	; 0x30
 80031a0:	7083      	strb	r3, [r0, #2]
 80031a2:	70c1      	strb	r1, [r0, #3]
 80031a4:	1d03      	adds	r3, r0, #4
 80031a6:	e7f1      	b.n	800318c <__exponent+0x60>

080031a8 <_printf_float>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	ed2d 8b02 	vpush	{d8}
 80031b0:	b08d      	sub	sp, #52	; 0x34
 80031b2:	460c      	mov	r4, r1
 80031b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80031b8:	4616      	mov	r6, r2
 80031ba:	461f      	mov	r7, r3
 80031bc:	4605      	mov	r5, r0
 80031be:	f001 fd3d 	bl	8004c3c <_localeconv_r>
 80031c2:	f8d0 a000 	ldr.w	sl, [r0]
 80031c6:	4650      	mov	r0, sl
 80031c8:	f7fd f802 	bl	80001d0 <strlen>
 80031cc:	2300      	movs	r3, #0
 80031ce:	930a      	str	r3, [sp, #40]	; 0x28
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	9305      	str	r3, [sp, #20]
 80031d4:	f8d8 3000 	ldr.w	r3, [r8]
 80031d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80031dc:	3307      	adds	r3, #7
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	f103 0208 	add.w	r2, r3, #8
 80031e6:	f8c8 2000 	str.w	r2, [r8]
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80031f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031fa:	9307      	str	r3, [sp, #28]
 80031fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003200:	ee08 0a10 	vmov	s16, r0
 8003204:	4b9f      	ldr	r3, [pc, #636]	; (8003484 <_printf_float+0x2dc>)
 8003206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	f7fd fc8d 	bl	8000b2c <__aeabi_dcmpun>
 8003212:	bb88      	cbnz	r0, 8003278 <_printf_float+0xd0>
 8003214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003218:	4b9a      	ldr	r3, [pc, #616]	; (8003484 <_printf_float+0x2dc>)
 800321a:	f04f 32ff 	mov.w	r2, #4294967295
 800321e:	f7fd fc67 	bl	8000af0 <__aeabi_dcmple>
 8003222:	bb48      	cbnz	r0, 8003278 <_printf_float+0xd0>
 8003224:	2200      	movs	r2, #0
 8003226:	2300      	movs	r3, #0
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd fc56 	bl	8000adc <__aeabi_dcmplt>
 8003230:	b110      	cbz	r0, 8003238 <_printf_float+0x90>
 8003232:	232d      	movs	r3, #45	; 0x2d
 8003234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003238:	4b93      	ldr	r3, [pc, #588]	; (8003488 <_printf_float+0x2e0>)
 800323a:	4894      	ldr	r0, [pc, #592]	; (800348c <_printf_float+0x2e4>)
 800323c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003240:	bf94      	ite	ls
 8003242:	4698      	movls	r8, r3
 8003244:	4680      	movhi	r8, r0
 8003246:	2303      	movs	r3, #3
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	9b05      	ldr	r3, [sp, #20]
 800324c:	f023 0204 	bic.w	r2, r3, #4
 8003250:	6022      	str	r2, [r4, #0]
 8003252:	f04f 0900 	mov.w	r9, #0
 8003256:	9700      	str	r7, [sp, #0]
 8003258:	4633      	mov	r3, r6
 800325a:	aa0b      	add	r2, sp, #44	; 0x2c
 800325c:	4621      	mov	r1, r4
 800325e:	4628      	mov	r0, r5
 8003260:	f000 f9d8 	bl	8003614 <_printf_common>
 8003264:	3001      	adds	r0, #1
 8003266:	f040 8090 	bne.w	800338a <_printf_float+0x1e2>
 800326a:	f04f 30ff 	mov.w	r0, #4294967295
 800326e:	b00d      	add	sp, #52	; 0x34
 8003270:	ecbd 8b02 	vpop	{d8}
 8003274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fd fc54 	bl	8000b2c <__aeabi_dcmpun>
 8003284:	b140      	cbz	r0, 8003298 <_printf_float+0xf0>
 8003286:	464b      	mov	r3, r9
 8003288:	2b00      	cmp	r3, #0
 800328a:	bfbc      	itt	lt
 800328c:	232d      	movlt	r3, #45	; 0x2d
 800328e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003292:	487f      	ldr	r0, [pc, #508]	; (8003490 <_printf_float+0x2e8>)
 8003294:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <_printf_float+0x2ec>)
 8003296:	e7d1      	b.n	800323c <_printf_float+0x94>
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800329e:	9206      	str	r2, [sp, #24]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	d13f      	bne.n	8003324 <_printf_float+0x17c>
 80032a4:	2306      	movs	r3, #6
 80032a6:	6063      	str	r3, [r4, #4]
 80032a8:	9b05      	ldr	r3, [sp, #20]
 80032aa:	6861      	ldr	r1, [r4, #4]
 80032ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032b0:	2300      	movs	r3, #0
 80032b2:	9303      	str	r3, [sp, #12]
 80032b4:	ab0a      	add	r3, sp, #40	; 0x28
 80032b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80032ba:	ab09      	add	r3, sp, #36	; 0x24
 80032bc:	ec49 8b10 	vmov	d0, r8, r9
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6022      	str	r2, [r4, #0]
 80032c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80032c8:	4628      	mov	r0, r5
 80032ca:	f7ff fecd 	bl	8003068 <__cvt>
 80032ce:	9b06      	ldr	r3, [sp, #24]
 80032d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032d2:	2b47      	cmp	r3, #71	; 0x47
 80032d4:	4680      	mov	r8, r0
 80032d6:	d108      	bne.n	80032ea <_printf_float+0x142>
 80032d8:	1cc8      	adds	r0, r1, #3
 80032da:	db02      	blt.n	80032e2 <_printf_float+0x13a>
 80032dc:	6863      	ldr	r3, [r4, #4]
 80032de:	4299      	cmp	r1, r3
 80032e0:	dd41      	ble.n	8003366 <_printf_float+0x1be>
 80032e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80032e6:	fa5f fb8b 	uxtb.w	fp, fp
 80032ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032ee:	d820      	bhi.n	8003332 <_printf_float+0x18a>
 80032f0:	3901      	subs	r1, #1
 80032f2:	465a      	mov	r2, fp
 80032f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032f8:	9109      	str	r1, [sp, #36]	; 0x24
 80032fa:	f7ff ff17 	bl	800312c <__exponent>
 80032fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003300:	1813      	adds	r3, r2, r0
 8003302:	2a01      	cmp	r2, #1
 8003304:	4681      	mov	r9, r0
 8003306:	6123      	str	r3, [r4, #16]
 8003308:	dc02      	bgt.n	8003310 <_printf_float+0x168>
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	07d2      	lsls	r2, r2, #31
 800330e:	d501      	bpl.n	8003314 <_printf_float+0x16c>
 8003310:	3301      	adds	r3, #1
 8003312:	6123      	str	r3, [r4, #16]
 8003314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003318:	2b00      	cmp	r3, #0
 800331a:	d09c      	beq.n	8003256 <_printf_float+0xae>
 800331c:	232d      	movs	r3, #45	; 0x2d
 800331e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003322:	e798      	b.n	8003256 <_printf_float+0xae>
 8003324:	9a06      	ldr	r2, [sp, #24]
 8003326:	2a47      	cmp	r2, #71	; 0x47
 8003328:	d1be      	bne.n	80032a8 <_printf_float+0x100>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1bc      	bne.n	80032a8 <_printf_float+0x100>
 800332e:	2301      	movs	r3, #1
 8003330:	e7b9      	b.n	80032a6 <_printf_float+0xfe>
 8003332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003336:	d118      	bne.n	800336a <_printf_float+0x1c2>
 8003338:	2900      	cmp	r1, #0
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	dd0b      	ble.n	8003356 <_printf_float+0x1ae>
 800333e:	6121      	str	r1, [r4, #16]
 8003340:	b913      	cbnz	r3, 8003348 <_printf_float+0x1a0>
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	07d0      	lsls	r0, r2, #31
 8003346:	d502      	bpl.n	800334e <_printf_float+0x1a6>
 8003348:	3301      	adds	r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	6123      	str	r3, [r4, #16]
 800334e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003350:	f04f 0900 	mov.w	r9, #0
 8003354:	e7de      	b.n	8003314 <_printf_float+0x16c>
 8003356:	b913      	cbnz	r3, 800335e <_printf_float+0x1b6>
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	07d2      	lsls	r2, r2, #31
 800335c:	d501      	bpl.n	8003362 <_printf_float+0x1ba>
 800335e:	3302      	adds	r3, #2
 8003360:	e7f4      	b.n	800334c <_printf_float+0x1a4>
 8003362:	2301      	movs	r3, #1
 8003364:	e7f2      	b.n	800334c <_printf_float+0x1a4>
 8003366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800336a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800336c:	4299      	cmp	r1, r3
 800336e:	db05      	blt.n	800337c <_printf_float+0x1d4>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	6121      	str	r1, [r4, #16]
 8003374:	07d8      	lsls	r0, r3, #31
 8003376:	d5ea      	bpl.n	800334e <_printf_float+0x1a6>
 8003378:	1c4b      	adds	r3, r1, #1
 800337a:	e7e7      	b.n	800334c <_printf_float+0x1a4>
 800337c:	2900      	cmp	r1, #0
 800337e:	bfd4      	ite	le
 8003380:	f1c1 0202 	rsble	r2, r1, #2
 8003384:	2201      	movgt	r2, #1
 8003386:	4413      	add	r3, r2
 8003388:	e7e0      	b.n	800334c <_printf_float+0x1a4>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	055a      	lsls	r2, r3, #21
 800338e:	d407      	bmi.n	80033a0 <_printf_float+0x1f8>
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	4642      	mov	r2, r8
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	47b8      	blx	r7
 800339a:	3001      	adds	r0, #1
 800339c:	d12c      	bne.n	80033f8 <_printf_float+0x250>
 800339e:	e764      	b.n	800326a <_printf_float+0xc2>
 80033a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033a4:	f240 80e0 	bls.w	8003568 <_printf_float+0x3c0>
 80033a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033ac:	2200      	movs	r2, #0
 80033ae:	2300      	movs	r3, #0
 80033b0:	f7fd fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d034      	beq.n	8003422 <_printf_float+0x27a>
 80033b8:	4a37      	ldr	r2, [pc, #220]	; (8003498 <_printf_float+0x2f0>)
 80033ba:	2301      	movs	r3, #1
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f43f af51 	beq.w	800326a <_printf_float+0xc2>
 80033c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033cc:	429a      	cmp	r2, r3
 80033ce:	db02      	blt.n	80033d6 <_printf_float+0x22e>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	07d8      	lsls	r0, r3, #31
 80033d4:	d510      	bpl.n	80033f8 <_printf_float+0x250>
 80033d6:	ee18 3a10 	vmov	r3, s16
 80033da:	4652      	mov	r2, sl
 80033dc:	4631      	mov	r1, r6
 80033de:	4628      	mov	r0, r5
 80033e0:	47b8      	blx	r7
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f af41 	beq.w	800326a <_printf_float+0xc2>
 80033e8:	f04f 0800 	mov.w	r8, #0
 80033ec:	f104 091a 	add.w	r9, r4, #26
 80033f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4543      	cmp	r3, r8
 80033f6:	dc09      	bgt.n	800340c <_printf_float+0x264>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	079b      	lsls	r3, r3, #30
 80033fc:	f100 8105 	bmi.w	800360a <_printf_float+0x462>
 8003400:	68e0      	ldr	r0, [r4, #12]
 8003402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003404:	4298      	cmp	r0, r3
 8003406:	bfb8      	it	lt
 8003408:	4618      	movlt	r0, r3
 800340a:	e730      	b.n	800326e <_printf_float+0xc6>
 800340c:	2301      	movs	r3, #1
 800340e:	464a      	mov	r2, r9
 8003410:	4631      	mov	r1, r6
 8003412:	4628      	mov	r0, r5
 8003414:	47b8      	blx	r7
 8003416:	3001      	adds	r0, #1
 8003418:	f43f af27 	beq.w	800326a <_printf_float+0xc2>
 800341c:	f108 0801 	add.w	r8, r8, #1
 8003420:	e7e6      	b.n	80033f0 <_printf_float+0x248>
 8003422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	dc39      	bgt.n	800349c <_printf_float+0x2f4>
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <_printf_float+0x2f0>)
 800342a:	2301      	movs	r3, #1
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f af19 	beq.w	800326a <_printf_float+0xc2>
 8003438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800343c:	4313      	orrs	r3, r2
 800343e:	d102      	bne.n	8003446 <_printf_float+0x29e>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	07d9      	lsls	r1, r3, #31
 8003444:	d5d8      	bpl.n	80033f8 <_printf_float+0x250>
 8003446:	ee18 3a10 	vmov	r3, s16
 800344a:	4652      	mov	r2, sl
 800344c:	4631      	mov	r1, r6
 800344e:	4628      	mov	r0, r5
 8003450:	47b8      	blx	r7
 8003452:	3001      	adds	r0, #1
 8003454:	f43f af09 	beq.w	800326a <_printf_float+0xc2>
 8003458:	f04f 0900 	mov.w	r9, #0
 800345c:	f104 0a1a 	add.w	sl, r4, #26
 8003460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003462:	425b      	negs	r3, r3
 8003464:	454b      	cmp	r3, r9
 8003466:	dc01      	bgt.n	800346c <_printf_float+0x2c4>
 8003468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800346a:	e792      	b.n	8003392 <_printf_float+0x1ea>
 800346c:	2301      	movs	r3, #1
 800346e:	4652      	mov	r2, sl
 8003470:	4631      	mov	r1, r6
 8003472:	4628      	mov	r0, r5
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	f43f aef7 	beq.w	800326a <_printf_float+0xc2>
 800347c:	f109 0901 	add.w	r9, r9, #1
 8003480:	e7ee      	b.n	8003460 <_printf_float+0x2b8>
 8003482:	bf00      	nop
 8003484:	7fefffff 	.word	0x7fefffff
 8003488:	08005cf4 	.word	0x08005cf4
 800348c:	08005cf8 	.word	0x08005cf8
 8003490:	08005d00 	.word	0x08005d00
 8003494:	08005cfc 	.word	0x08005cfc
 8003498:	08005d04 	.word	0x08005d04
 800349c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800349e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034a0:	429a      	cmp	r2, r3
 80034a2:	bfa8      	it	ge
 80034a4:	461a      	movge	r2, r3
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	4691      	mov	r9, r2
 80034aa:	dc37      	bgt.n	800351c <_printf_float+0x374>
 80034ac:	f04f 0b00 	mov.w	fp, #0
 80034b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034b4:	f104 021a 	add.w	r2, r4, #26
 80034b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	eba3 0309 	sub.w	r3, r3, r9
 80034c0:	455b      	cmp	r3, fp
 80034c2:	dc33      	bgt.n	800352c <_printf_float+0x384>
 80034c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c8:	429a      	cmp	r2, r3
 80034ca:	db3b      	blt.n	8003544 <_printf_float+0x39c>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	07da      	lsls	r2, r3, #31
 80034d0:	d438      	bmi.n	8003544 <_printf_float+0x39c>
 80034d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d4:	9a05      	ldr	r2, [sp, #20]
 80034d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034d8:	1a9a      	subs	r2, r3, r2
 80034da:	eba3 0901 	sub.w	r9, r3, r1
 80034de:	4591      	cmp	r9, r2
 80034e0:	bfa8      	it	ge
 80034e2:	4691      	movge	r9, r2
 80034e4:	f1b9 0f00 	cmp.w	r9, #0
 80034e8:	dc35      	bgt.n	8003556 <_printf_float+0x3ae>
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034f2:	f104 0a1a 	add.w	sl, r4, #26
 80034f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	eba3 0309 	sub.w	r3, r3, r9
 8003500:	4543      	cmp	r3, r8
 8003502:	f77f af79 	ble.w	80033f8 <_printf_float+0x250>
 8003506:	2301      	movs	r3, #1
 8003508:	4652      	mov	r2, sl
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	f43f aeaa 	beq.w	800326a <_printf_float+0xc2>
 8003516:	f108 0801 	add.w	r8, r8, #1
 800351a:	e7ec      	b.n	80034f6 <_printf_float+0x34e>
 800351c:	4613      	mov	r3, r2
 800351e:	4631      	mov	r1, r6
 8003520:	4642      	mov	r2, r8
 8003522:	4628      	mov	r0, r5
 8003524:	47b8      	blx	r7
 8003526:	3001      	adds	r0, #1
 8003528:	d1c0      	bne.n	80034ac <_printf_float+0x304>
 800352a:	e69e      	b.n	800326a <_printf_float+0xc2>
 800352c:	2301      	movs	r3, #1
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	9205      	str	r2, [sp, #20]
 8003534:	47b8      	blx	r7
 8003536:	3001      	adds	r0, #1
 8003538:	f43f ae97 	beq.w	800326a <_printf_float+0xc2>
 800353c:	9a05      	ldr	r2, [sp, #20]
 800353e:	f10b 0b01 	add.w	fp, fp, #1
 8003542:	e7b9      	b.n	80034b8 <_printf_float+0x310>
 8003544:	ee18 3a10 	vmov	r3, s16
 8003548:	4652      	mov	r2, sl
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	d1be      	bne.n	80034d2 <_printf_float+0x32a>
 8003554:	e689      	b.n	800326a <_printf_float+0xc2>
 8003556:	9a05      	ldr	r2, [sp, #20]
 8003558:	464b      	mov	r3, r9
 800355a:	4442      	add	r2, r8
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	47b8      	blx	r7
 8003562:	3001      	adds	r0, #1
 8003564:	d1c1      	bne.n	80034ea <_printf_float+0x342>
 8003566:	e680      	b.n	800326a <_printf_float+0xc2>
 8003568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800356a:	2a01      	cmp	r2, #1
 800356c:	dc01      	bgt.n	8003572 <_printf_float+0x3ca>
 800356e:	07db      	lsls	r3, r3, #31
 8003570:	d538      	bpl.n	80035e4 <_printf_float+0x43c>
 8003572:	2301      	movs	r3, #1
 8003574:	4642      	mov	r2, r8
 8003576:	4631      	mov	r1, r6
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	f43f ae74 	beq.w	800326a <_printf_float+0xc2>
 8003582:	ee18 3a10 	vmov	r3, s16
 8003586:	4652      	mov	r2, sl
 8003588:	4631      	mov	r1, r6
 800358a:	4628      	mov	r0, r5
 800358c:	47b8      	blx	r7
 800358e:	3001      	adds	r0, #1
 8003590:	f43f ae6b 	beq.w	800326a <_printf_float+0xc2>
 8003594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003598:	2200      	movs	r2, #0
 800359a:	2300      	movs	r3, #0
 800359c:	f7fd fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80035a0:	b9d8      	cbnz	r0, 80035da <_printf_float+0x432>
 80035a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035a4:	f108 0201 	add.w	r2, r8, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	d10e      	bne.n	80035d2 <_printf_float+0x42a>
 80035b4:	e659      	b.n	800326a <_printf_float+0xc2>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4652      	mov	r2, sl
 80035ba:	4631      	mov	r1, r6
 80035bc:	4628      	mov	r0, r5
 80035be:	47b8      	blx	r7
 80035c0:	3001      	adds	r0, #1
 80035c2:	f43f ae52 	beq.w	800326a <_printf_float+0xc2>
 80035c6:	f108 0801 	add.w	r8, r8, #1
 80035ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	4543      	cmp	r3, r8
 80035d0:	dcf1      	bgt.n	80035b6 <_printf_float+0x40e>
 80035d2:	464b      	mov	r3, r9
 80035d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035d8:	e6dc      	b.n	8003394 <_printf_float+0x1ec>
 80035da:	f04f 0800 	mov.w	r8, #0
 80035de:	f104 0a1a 	add.w	sl, r4, #26
 80035e2:	e7f2      	b.n	80035ca <_printf_float+0x422>
 80035e4:	2301      	movs	r3, #1
 80035e6:	4642      	mov	r2, r8
 80035e8:	e7df      	b.n	80035aa <_printf_float+0x402>
 80035ea:	2301      	movs	r3, #1
 80035ec:	464a      	mov	r2, r9
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b8      	blx	r7
 80035f4:	3001      	adds	r0, #1
 80035f6:	f43f ae38 	beq.w	800326a <_printf_float+0xc2>
 80035fa:	f108 0801 	add.w	r8, r8, #1
 80035fe:	68e3      	ldr	r3, [r4, #12]
 8003600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003602:	1a5b      	subs	r3, r3, r1
 8003604:	4543      	cmp	r3, r8
 8003606:	dcf0      	bgt.n	80035ea <_printf_float+0x442>
 8003608:	e6fa      	b.n	8003400 <_printf_float+0x258>
 800360a:	f04f 0800 	mov.w	r8, #0
 800360e:	f104 0919 	add.w	r9, r4, #25
 8003612:	e7f4      	b.n	80035fe <_printf_float+0x456>

08003614 <_printf_common>:
 8003614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	4616      	mov	r6, r2
 800361a:	4699      	mov	r9, r3
 800361c:	688a      	ldr	r2, [r1, #8]
 800361e:	690b      	ldr	r3, [r1, #16]
 8003620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003624:	4293      	cmp	r3, r2
 8003626:	bfb8      	it	lt
 8003628:	4613      	movlt	r3, r2
 800362a:	6033      	str	r3, [r6, #0]
 800362c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003630:	4607      	mov	r7, r0
 8003632:	460c      	mov	r4, r1
 8003634:	b10a      	cbz	r2, 800363a <_printf_common+0x26>
 8003636:	3301      	adds	r3, #1
 8003638:	6033      	str	r3, [r6, #0]
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	0699      	lsls	r1, r3, #26
 800363e:	bf42      	ittt	mi
 8003640:	6833      	ldrmi	r3, [r6, #0]
 8003642:	3302      	addmi	r3, #2
 8003644:	6033      	strmi	r3, [r6, #0]
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	f015 0506 	ands.w	r5, r5, #6
 800364c:	d106      	bne.n	800365c <_printf_common+0x48>
 800364e:	f104 0a19 	add.w	sl, r4, #25
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	6832      	ldr	r2, [r6, #0]
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	42ab      	cmp	r3, r5
 800365a:	dc26      	bgt.n	80036aa <_printf_common+0x96>
 800365c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003660:	1e13      	subs	r3, r2, #0
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	bf18      	it	ne
 8003666:	2301      	movne	r3, #1
 8003668:	0692      	lsls	r2, r2, #26
 800366a:	d42b      	bmi.n	80036c4 <_printf_common+0xb0>
 800366c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003670:	4649      	mov	r1, r9
 8003672:	4638      	mov	r0, r7
 8003674:	47c0      	blx	r8
 8003676:	3001      	adds	r0, #1
 8003678:	d01e      	beq.n	80036b8 <_printf_common+0xa4>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	68e5      	ldr	r5, [r4, #12]
 800367e:	6832      	ldr	r2, [r6, #0]
 8003680:	f003 0306 	and.w	r3, r3, #6
 8003684:	2b04      	cmp	r3, #4
 8003686:	bf08      	it	eq
 8003688:	1aad      	subeq	r5, r5, r2
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	6922      	ldr	r2, [r4, #16]
 800368e:	bf0c      	ite	eq
 8003690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003694:	2500      	movne	r5, #0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfc4      	itt	gt
 800369a:	1a9b      	subgt	r3, r3, r2
 800369c:	18ed      	addgt	r5, r5, r3
 800369e:	2600      	movs	r6, #0
 80036a0:	341a      	adds	r4, #26
 80036a2:	42b5      	cmp	r5, r6
 80036a4:	d11a      	bne.n	80036dc <_printf_common+0xc8>
 80036a6:	2000      	movs	r0, #0
 80036a8:	e008      	b.n	80036bc <_printf_common+0xa8>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4652      	mov	r2, sl
 80036ae:	4649      	mov	r1, r9
 80036b0:	4638      	mov	r0, r7
 80036b2:	47c0      	blx	r8
 80036b4:	3001      	adds	r0, #1
 80036b6:	d103      	bne.n	80036c0 <_printf_common+0xac>
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c0:	3501      	adds	r5, #1
 80036c2:	e7c6      	b.n	8003652 <_printf_common+0x3e>
 80036c4:	18e1      	adds	r1, r4, r3
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	2030      	movs	r0, #48	; 0x30
 80036ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ce:	4422      	add	r2, r4
 80036d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d8:	3302      	adds	r3, #2
 80036da:	e7c7      	b.n	800366c <_printf_common+0x58>
 80036dc:	2301      	movs	r3, #1
 80036de:	4622      	mov	r2, r4
 80036e0:	4649      	mov	r1, r9
 80036e2:	4638      	mov	r0, r7
 80036e4:	47c0      	blx	r8
 80036e6:	3001      	adds	r0, #1
 80036e8:	d0e6      	beq.n	80036b8 <_printf_common+0xa4>
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7d9      	b.n	80036a2 <_printf_common+0x8e>
	...

080036f0 <_printf_i>:
 80036f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f4:	7e0f      	ldrb	r7, [r1, #24]
 80036f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036f8:	2f78      	cmp	r7, #120	; 0x78
 80036fa:	4691      	mov	r9, r2
 80036fc:	4680      	mov	r8, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	469a      	mov	sl, r3
 8003702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003706:	d807      	bhi.n	8003718 <_printf_i+0x28>
 8003708:	2f62      	cmp	r7, #98	; 0x62
 800370a:	d80a      	bhi.n	8003722 <_printf_i+0x32>
 800370c:	2f00      	cmp	r7, #0
 800370e:	f000 80d8 	beq.w	80038c2 <_printf_i+0x1d2>
 8003712:	2f58      	cmp	r7, #88	; 0x58
 8003714:	f000 80a3 	beq.w	800385e <_printf_i+0x16e>
 8003718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800371c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003720:	e03a      	b.n	8003798 <_printf_i+0xa8>
 8003722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003726:	2b15      	cmp	r3, #21
 8003728:	d8f6      	bhi.n	8003718 <_printf_i+0x28>
 800372a:	a101      	add	r1, pc, #4	; (adr r1, 8003730 <_printf_i+0x40>)
 800372c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003730:	08003789 	.word	0x08003789
 8003734:	0800379d 	.word	0x0800379d
 8003738:	08003719 	.word	0x08003719
 800373c:	08003719 	.word	0x08003719
 8003740:	08003719 	.word	0x08003719
 8003744:	08003719 	.word	0x08003719
 8003748:	0800379d 	.word	0x0800379d
 800374c:	08003719 	.word	0x08003719
 8003750:	08003719 	.word	0x08003719
 8003754:	08003719 	.word	0x08003719
 8003758:	08003719 	.word	0x08003719
 800375c:	080038a9 	.word	0x080038a9
 8003760:	080037cd 	.word	0x080037cd
 8003764:	0800388b 	.word	0x0800388b
 8003768:	08003719 	.word	0x08003719
 800376c:	08003719 	.word	0x08003719
 8003770:	080038cb 	.word	0x080038cb
 8003774:	08003719 	.word	0x08003719
 8003778:	080037cd 	.word	0x080037cd
 800377c:	08003719 	.word	0x08003719
 8003780:	08003719 	.word	0x08003719
 8003784:	08003893 	.word	0x08003893
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	1d1a      	adds	r2, r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	602a      	str	r2, [r5, #0]
 8003790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003798:	2301      	movs	r3, #1
 800379a:	e0a3      	b.n	80038e4 <_printf_i+0x1f4>
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	6829      	ldr	r1, [r5, #0]
 80037a0:	0606      	lsls	r6, r0, #24
 80037a2:	f101 0304 	add.w	r3, r1, #4
 80037a6:	d50a      	bpl.n	80037be <_printf_i+0xce>
 80037a8:	680e      	ldr	r6, [r1, #0]
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	da03      	bge.n	80037b8 <_printf_i+0xc8>
 80037b0:	232d      	movs	r3, #45	; 0x2d
 80037b2:	4276      	negs	r6, r6
 80037b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b8:	485e      	ldr	r0, [pc, #376]	; (8003934 <_printf_i+0x244>)
 80037ba:	230a      	movs	r3, #10
 80037bc:	e019      	b.n	80037f2 <_printf_i+0x102>
 80037be:	680e      	ldr	r6, [r1, #0]
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c6:	bf18      	it	ne
 80037c8:	b236      	sxthne	r6, r6
 80037ca:	e7ef      	b.n	80037ac <_printf_i+0xbc>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	1d19      	adds	r1, r3, #4
 80037d2:	6029      	str	r1, [r5, #0]
 80037d4:	0601      	lsls	r1, r0, #24
 80037d6:	d501      	bpl.n	80037dc <_printf_i+0xec>
 80037d8:	681e      	ldr	r6, [r3, #0]
 80037da:	e002      	b.n	80037e2 <_printf_i+0xf2>
 80037dc:	0646      	lsls	r6, r0, #25
 80037de:	d5fb      	bpl.n	80037d8 <_printf_i+0xe8>
 80037e0:	881e      	ldrh	r6, [r3, #0]
 80037e2:	4854      	ldr	r0, [pc, #336]	; (8003934 <_printf_i+0x244>)
 80037e4:	2f6f      	cmp	r7, #111	; 0x6f
 80037e6:	bf0c      	ite	eq
 80037e8:	2308      	moveq	r3, #8
 80037ea:	230a      	movne	r3, #10
 80037ec:	2100      	movs	r1, #0
 80037ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f2:	6865      	ldr	r5, [r4, #4]
 80037f4:	60a5      	str	r5, [r4, #8]
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	bfa2      	ittt	ge
 80037fa:	6821      	ldrge	r1, [r4, #0]
 80037fc:	f021 0104 	bicge.w	r1, r1, #4
 8003800:	6021      	strge	r1, [r4, #0]
 8003802:	b90e      	cbnz	r6, 8003808 <_printf_i+0x118>
 8003804:	2d00      	cmp	r5, #0
 8003806:	d04d      	beq.n	80038a4 <_printf_i+0x1b4>
 8003808:	4615      	mov	r5, r2
 800380a:	fbb6 f1f3 	udiv	r1, r6, r3
 800380e:	fb03 6711 	mls	r7, r3, r1, r6
 8003812:	5dc7      	ldrb	r7, [r0, r7]
 8003814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003818:	4637      	mov	r7, r6
 800381a:	42bb      	cmp	r3, r7
 800381c:	460e      	mov	r6, r1
 800381e:	d9f4      	bls.n	800380a <_printf_i+0x11a>
 8003820:	2b08      	cmp	r3, #8
 8003822:	d10b      	bne.n	800383c <_printf_i+0x14c>
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	07de      	lsls	r6, r3, #31
 8003828:	d508      	bpl.n	800383c <_printf_i+0x14c>
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	6861      	ldr	r1, [r4, #4]
 800382e:	4299      	cmp	r1, r3
 8003830:	bfde      	ittt	le
 8003832:	2330      	movle	r3, #48	; 0x30
 8003834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800383c:	1b52      	subs	r2, r2, r5
 800383e:	6122      	str	r2, [r4, #16]
 8003840:	f8cd a000 	str.w	sl, [sp]
 8003844:	464b      	mov	r3, r9
 8003846:	aa03      	add	r2, sp, #12
 8003848:	4621      	mov	r1, r4
 800384a:	4640      	mov	r0, r8
 800384c:	f7ff fee2 	bl	8003614 <_printf_common>
 8003850:	3001      	adds	r0, #1
 8003852:	d14c      	bne.n	80038ee <_printf_i+0x1fe>
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	b004      	add	sp, #16
 800385a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385e:	4835      	ldr	r0, [pc, #212]	; (8003934 <_printf_i+0x244>)
 8003860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003864:	6829      	ldr	r1, [r5, #0]
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	f851 6b04 	ldr.w	r6, [r1], #4
 800386c:	6029      	str	r1, [r5, #0]
 800386e:	061d      	lsls	r5, r3, #24
 8003870:	d514      	bpl.n	800389c <_printf_i+0x1ac>
 8003872:	07df      	lsls	r7, r3, #31
 8003874:	bf44      	itt	mi
 8003876:	f043 0320 	orrmi.w	r3, r3, #32
 800387a:	6023      	strmi	r3, [r4, #0]
 800387c:	b91e      	cbnz	r6, 8003886 <_printf_i+0x196>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f023 0320 	bic.w	r3, r3, #32
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	2310      	movs	r3, #16
 8003888:	e7b0      	b.n	80037ec <_printf_i+0xfc>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	2378      	movs	r3, #120	; 0x78
 8003894:	4828      	ldr	r0, [pc, #160]	; (8003938 <_printf_i+0x248>)
 8003896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800389a:	e7e3      	b.n	8003864 <_printf_i+0x174>
 800389c:	0659      	lsls	r1, r3, #25
 800389e:	bf48      	it	mi
 80038a0:	b2b6      	uxthmi	r6, r6
 80038a2:	e7e6      	b.n	8003872 <_printf_i+0x182>
 80038a4:	4615      	mov	r5, r2
 80038a6:	e7bb      	b.n	8003820 <_printf_i+0x130>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	6826      	ldr	r6, [r4, #0]
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	1d18      	adds	r0, r3, #4
 80038b0:	6028      	str	r0, [r5, #0]
 80038b2:	0635      	lsls	r5, r6, #24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	d501      	bpl.n	80038bc <_printf_i+0x1cc>
 80038b8:	6019      	str	r1, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <_printf_i+0x1d2>
 80038bc:	0670      	lsls	r0, r6, #25
 80038be:	d5fb      	bpl.n	80038b8 <_printf_i+0x1c8>
 80038c0:	8019      	strh	r1, [r3, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	4615      	mov	r5, r2
 80038c8:	e7ba      	b.n	8003840 <_printf_i+0x150>
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	602a      	str	r2, [r5, #0]
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	2100      	movs	r1, #0
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7fc fc82 	bl	80001e0 <memchr>
 80038dc:	b108      	cbz	r0, 80038e2 <_printf_i+0x1f2>
 80038de:	1b40      	subs	r0, r0, r5
 80038e0:	6060      	str	r0, [r4, #4]
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ec:	e7a8      	b.n	8003840 <_printf_i+0x150>
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	462a      	mov	r2, r5
 80038f2:	4649      	mov	r1, r9
 80038f4:	4640      	mov	r0, r8
 80038f6:	47d0      	blx	sl
 80038f8:	3001      	adds	r0, #1
 80038fa:	d0ab      	beq.n	8003854 <_printf_i+0x164>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	079b      	lsls	r3, r3, #30
 8003900:	d413      	bmi.n	800392a <_printf_i+0x23a>
 8003902:	68e0      	ldr	r0, [r4, #12]
 8003904:	9b03      	ldr	r3, [sp, #12]
 8003906:	4298      	cmp	r0, r3
 8003908:	bfb8      	it	lt
 800390a:	4618      	movlt	r0, r3
 800390c:	e7a4      	b.n	8003858 <_printf_i+0x168>
 800390e:	2301      	movs	r3, #1
 8003910:	4632      	mov	r2, r6
 8003912:	4649      	mov	r1, r9
 8003914:	4640      	mov	r0, r8
 8003916:	47d0      	blx	sl
 8003918:	3001      	adds	r0, #1
 800391a:	d09b      	beq.n	8003854 <_printf_i+0x164>
 800391c:	3501      	adds	r5, #1
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	9903      	ldr	r1, [sp, #12]
 8003922:	1a5b      	subs	r3, r3, r1
 8003924:	42ab      	cmp	r3, r5
 8003926:	dcf2      	bgt.n	800390e <_printf_i+0x21e>
 8003928:	e7eb      	b.n	8003902 <_printf_i+0x212>
 800392a:	2500      	movs	r5, #0
 800392c:	f104 0619 	add.w	r6, r4, #25
 8003930:	e7f5      	b.n	800391e <_printf_i+0x22e>
 8003932:	bf00      	nop
 8003934:	08005d06 	.word	0x08005d06
 8003938:	08005d17 	.word	0x08005d17

0800393c <iprintf>:
 800393c:	b40f      	push	{r0, r1, r2, r3}
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <iprintf+0x2c>)
 8003940:	b513      	push	{r0, r1, r4, lr}
 8003942:	681c      	ldr	r4, [r3, #0]
 8003944:	b124      	cbz	r4, 8003950 <iprintf+0x14>
 8003946:	69a3      	ldr	r3, [r4, #24]
 8003948:	b913      	cbnz	r3, 8003950 <iprintf+0x14>
 800394a:	4620      	mov	r0, r4
 800394c:	f001 f8d8 	bl	8004b00 <__sinit>
 8003950:	ab05      	add	r3, sp, #20
 8003952:	9a04      	ldr	r2, [sp, #16]
 8003954:	68a1      	ldr	r1, [r4, #8]
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	4620      	mov	r0, r4
 800395a:	f001 fe95 	bl	8005688 <_vfiprintf_r>
 800395e:	b002      	add	sp, #8
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003964:	b004      	add	sp, #16
 8003966:	4770      	bx	lr
 8003968:	2000001c 	.word	0x2000001c

0800396c <_puts_r>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	460e      	mov	r6, r1
 8003970:	4605      	mov	r5, r0
 8003972:	b118      	cbz	r0, 800397c <_puts_r+0x10>
 8003974:	6983      	ldr	r3, [r0, #24]
 8003976:	b90b      	cbnz	r3, 800397c <_puts_r+0x10>
 8003978:	f001 f8c2 	bl	8004b00 <__sinit>
 800397c:	69ab      	ldr	r3, [r5, #24]
 800397e:	68ac      	ldr	r4, [r5, #8]
 8003980:	b913      	cbnz	r3, 8003988 <_puts_r+0x1c>
 8003982:	4628      	mov	r0, r5
 8003984:	f001 f8bc 	bl	8004b00 <__sinit>
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <_puts_r+0xd0>)
 800398a:	429c      	cmp	r4, r3
 800398c:	d120      	bne.n	80039d0 <_puts_r+0x64>
 800398e:	686c      	ldr	r4, [r5, #4]
 8003990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003992:	07db      	lsls	r3, r3, #31
 8003994:	d405      	bmi.n	80039a2 <_puts_r+0x36>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	0598      	lsls	r0, r3, #22
 800399a:	d402      	bmi.n	80039a2 <_puts_r+0x36>
 800399c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800399e:	f001 f952 	bl	8004c46 <__retarget_lock_acquire_recursive>
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	0719      	lsls	r1, r3, #28
 80039a6:	d51d      	bpl.n	80039e4 <_puts_r+0x78>
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	b1db      	cbz	r3, 80039e4 <_puts_r+0x78>
 80039ac:	3e01      	subs	r6, #1
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60a3      	str	r3, [r4, #8]
 80039b8:	bb39      	cbnz	r1, 8003a0a <_puts_r+0x9e>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da38      	bge.n	8003a30 <_puts_r+0xc4>
 80039be:	4622      	mov	r2, r4
 80039c0:	210a      	movs	r1, #10
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 f848 	bl	8003a58 <__swbuf_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d011      	beq.n	80039f0 <_puts_r+0x84>
 80039cc:	250a      	movs	r5, #10
 80039ce:	e011      	b.n	80039f4 <_puts_r+0x88>
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <_puts_r+0xd4>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	d101      	bne.n	80039da <_puts_r+0x6e>
 80039d6:	68ac      	ldr	r4, [r5, #8]
 80039d8:	e7da      	b.n	8003990 <_puts_r+0x24>
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <_puts_r+0xd8>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	bf08      	it	eq
 80039e0:	68ec      	ldreq	r4, [r5, #12]
 80039e2:	e7d5      	b.n	8003990 <_puts_r+0x24>
 80039e4:	4621      	mov	r1, r4
 80039e6:	4628      	mov	r0, r5
 80039e8:	f000 f888 	bl	8003afc <__swsetup_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d0dd      	beq.n	80039ac <_puts_r+0x40>
 80039f0:	f04f 35ff 	mov.w	r5, #4294967295
 80039f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039f6:	07da      	lsls	r2, r3, #31
 80039f8:	d405      	bmi.n	8003a06 <_puts_r+0x9a>
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	059b      	lsls	r3, r3, #22
 80039fe:	d402      	bmi.n	8003a06 <_puts_r+0x9a>
 8003a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a02:	f001 f921 	bl	8004c48 <__retarget_lock_release_recursive>
 8003a06:	4628      	mov	r0, r5
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da04      	bge.n	8003a18 <_puts_r+0xac>
 8003a0e:	69a2      	ldr	r2, [r4, #24]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	dc06      	bgt.n	8003a22 <_puts_r+0xb6>
 8003a14:	290a      	cmp	r1, #10
 8003a16:	d004      	beq.n	8003a22 <_puts_r+0xb6>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	6022      	str	r2, [r4, #0]
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	e7c5      	b.n	80039ae <_puts_r+0x42>
 8003a22:	4622      	mov	r2, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f000 f817 	bl	8003a58 <__swbuf_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1bf      	bne.n	80039ae <_puts_r+0x42>
 8003a2e:	e7df      	b.n	80039f0 <_puts_r+0x84>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	250a      	movs	r5, #10
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	6022      	str	r2, [r4, #0]
 8003a38:	701d      	strb	r5, [r3, #0]
 8003a3a:	e7db      	b.n	80039f4 <_puts_r+0x88>
 8003a3c:	08005dd8 	.word	0x08005dd8
 8003a40:	08005df8 	.word	0x08005df8
 8003a44:	08005db8 	.word	0x08005db8

08003a48 <puts>:
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <puts+0xc>)
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	f7ff bf8d 	b.w	800396c <_puts_r>
 8003a52:	bf00      	nop
 8003a54:	2000001c 	.word	0x2000001c

08003a58 <__swbuf_r>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	460e      	mov	r6, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	4605      	mov	r5, r0
 8003a60:	b118      	cbz	r0, 8003a6a <__swbuf_r+0x12>
 8003a62:	6983      	ldr	r3, [r0, #24]
 8003a64:	b90b      	cbnz	r3, 8003a6a <__swbuf_r+0x12>
 8003a66:	f001 f84b 	bl	8004b00 <__sinit>
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <__swbuf_r+0x98>)
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	d12b      	bne.n	8003ac8 <__swbuf_r+0x70>
 8003a70:	686c      	ldr	r4, [r5, #4]
 8003a72:	69a3      	ldr	r3, [r4, #24]
 8003a74:	60a3      	str	r3, [r4, #8]
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	071a      	lsls	r2, r3, #28
 8003a7a:	d52f      	bpl.n	8003adc <__swbuf_r+0x84>
 8003a7c:	6923      	ldr	r3, [r4, #16]
 8003a7e:	b36b      	cbz	r3, 8003adc <__swbuf_r+0x84>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	1ac0      	subs	r0, r0, r3
 8003a86:	6963      	ldr	r3, [r4, #20]
 8003a88:	b2f6      	uxtb	r6, r6
 8003a8a:	4283      	cmp	r3, r0
 8003a8c:	4637      	mov	r7, r6
 8003a8e:	dc04      	bgt.n	8003a9a <__swbuf_r+0x42>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4628      	mov	r0, r5
 8003a94:	f000 ffa0 	bl	80049d8 <_fflush_r>
 8003a98:	bb30      	cbnz	r0, 8003ae8 <__swbuf_r+0x90>
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	60a3      	str	r3, [r4, #8]
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	701e      	strb	r6, [r3, #0]
 8003aa8:	6963      	ldr	r3, [r4, #20]
 8003aaa:	3001      	adds	r0, #1
 8003aac:	4283      	cmp	r3, r0
 8003aae:	d004      	beq.n	8003aba <__swbuf_r+0x62>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	07db      	lsls	r3, r3, #31
 8003ab4:	d506      	bpl.n	8003ac4 <__swbuf_r+0x6c>
 8003ab6:	2e0a      	cmp	r6, #10
 8003ab8:	d104      	bne.n	8003ac4 <__swbuf_r+0x6c>
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 ff8b 	bl	80049d8 <_fflush_r>
 8003ac2:	b988      	cbnz	r0, 8003ae8 <__swbuf_r+0x90>
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <__swbuf_r+0x9c>)
 8003aca:	429c      	cmp	r4, r3
 8003acc:	d101      	bne.n	8003ad2 <__swbuf_r+0x7a>
 8003ace:	68ac      	ldr	r4, [r5, #8]
 8003ad0:	e7cf      	b.n	8003a72 <__swbuf_r+0x1a>
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <__swbuf_r+0xa0>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	bf08      	it	eq
 8003ad8:	68ec      	ldreq	r4, [r5, #12]
 8003ada:	e7ca      	b.n	8003a72 <__swbuf_r+0x1a>
 8003adc:	4621      	mov	r1, r4
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 f80c 	bl	8003afc <__swsetup_r>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d0cb      	beq.n	8003a80 <__swbuf_r+0x28>
 8003ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8003aec:	e7ea      	b.n	8003ac4 <__swbuf_r+0x6c>
 8003aee:	bf00      	nop
 8003af0:	08005dd8 	.word	0x08005dd8
 8003af4:	08005df8 	.word	0x08005df8
 8003af8:	08005db8 	.word	0x08005db8

08003afc <__swsetup_r>:
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <__swsetup_r+0xcc>)
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	681d      	ldr	r5, [r3, #0]
 8003b02:	4606      	mov	r6, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	b125      	cbz	r5, 8003b12 <__swsetup_r+0x16>
 8003b08:	69ab      	ldr	r3, [r5, #24]
 8003b0a:	b913      	cbnz	r3, 8003b12 <__swsetup_r+0x16>
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 fff7 	bl	8004b00 <__sinit>
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <__swsetup_r+0xd0>)
 8003b14:	429c      	cmp	r4, r3
 8003b16:	d10f      	bne.n	8003b38 <__swsetup_r+0x3c>
 8003b18:	686c      	ldr	r4, [r5, #4]
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b20:	0719      	lsls	r1, r3, #28
 8003b22:	d42c      	bmi.n	8003b7e <__swsetup_r+0x82>
 8003b24:	06dd      	lsls	r5, r3, #27
 8003b26:	d411      	bmi.n	8003b4c <__swsetup_r+0x50>
 8003b28:	2309      	movs	r3, #9
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	e03e      	b.n	8003bb6 <__swsetup_r+0xba>
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <__swsetup_r+0xd4>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	d101      	bne.n	8003b42 <__swsetup_r+0x46>
 8003b3e:	68ac      	ldr	r4, [r5, #8]
 8003b40:	e7eb      	b.n	8003b1a <__swsetup_r+0x1e>
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <__swsetup_r+0xd8>)
 8003b44:	429c      	cmp	r4, r3
 8003b46:	bf08      	it	eq
 8003b48:	68ec      	ldreq	r4, [r5, #12]
 8003b4a:	e7e6      	b.n	8003b1a <__swsetup_r+0x1e>
 8003b4c:	0758      	lsls	r0, r3, #29
 8003b4e:	d512      	bpl.n	8003b76 <__swsetup_r+0x7a>
 8003b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b52:	b141      	cbz	r1, 8003b66 <__swsetup_r+0x6a>
 8003b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b58:	4299      	cmp	r1, r3
 8003b5a:	d002      	beq.n	8003b62 <__swsetup_r+0x66>
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f001 fc89 	bl	8005474 <_free_r>
 8003b62:	2300      	movs	r3, #0
 8003b64:	6363      	str	r3, [r4, #52]	; 0x34
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f043 0308 	orr.w	r3, r3, #8
 8003b7c:	81a3      	strh	r3, [r4, #12]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	b94b      	cbnz	r3, 8003b96 <__swsetup_r+0x9a>
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d003      	beq.n	8003b96 <__swsetup_r+0x9a>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4630      	mov	r0, r6
 8003b92:	f001 f87f 	bl	8004c94 <__smakebuf_r>
 8003b96:	89a0      	ldrh	r0, [r4, #12]
 8003b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b9c:	f010 0301 	ands.w	r3, r0, #1
 8003ba0:	d00a      	beq.n	8003bb8 <__swsetup_r+0xbc>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	6963      	ldr	r3, [r4, #20]
 8003ba8:	425b      	negs	r3, r3
 8003baa:	61a3      	str	r3, [r4, #24]
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	b943      	cbnz	r3, 8003bc2 <__swsetup_r+0xc6>
 8003bb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bb4:	d1ba      	bne.n	8003b2c <__swsetup_r+0x30>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	0781      	lsls	r1, r0, #30
 8003bba:	bf58      	it	pl
 8003bbc:	6963      	ldrpl	r3, [r4, #20]
 8003bbe:	60a3      	str	r3, [r4, #8]
 8003bc0:	e7f4      	b.n	8003bac <__swsetup_r+0xb0>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e7f7      	b.n	8003bb6 <__swsetup_r+0xba>
 8003bc6:	bf00      	nop
 8003bc8:	2000001c 	.word	0x2000001c
 8003bcc:	08005dd8 	.word	0x08005dd8
 8003bd0:	08005df8 	.word	0x08005df8
 8003bd4:	08005db8 	.word	0x08005db8

08003bd8 <quorem>:
 8003bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	6903      	ldr	r3, [r0, #16]
 8003bde:	690c      	ldr	r4, [r1, #16]
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	4607      	mov	r7, r0
 8003be4:	f2c0 8081 	blt.w	8003cea <quorem+0x112>
 8003be8:	3c01      	subs	r4, #1
 8003bea:	f101 0814 	add.w	r8, r1, #20
 8003bee:	f100 0514 	add.w	r5, r0, #20
 8003bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c00:	3301      	adds	r3, #1
 8003c02:	429a      	cmp	r2, r3
 8003c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c10:	d331      	bcc.n	8003c76 <quorem+0x9e>
 8003c12:	f04f 0e00 	mov.w	lr, #0
 8003c16:	4640      	mov	r0, r8
 8003c18:	46ac      	mov	ip, r5
 8003c1a:	46f2      	mov	sl, lr
 8003c1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c20:	b293      	uxth	r3, r2
 8003c22:	fb06 e303 	mla	r3, r6, r3, lr
 8003c26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8003c30:	f8dc a000 	ldr.w	sl, [ip]
 8003c34:	0c12      	lsrs	r2, r2, #16
 8003c36:	fa13 f38a 	uxtah	r3, r3, sl
 8003c3a:	fb06 e202 	mla	r2, r6, r2, lr
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	9b00      	ldr	r3, [sp, #0]
 8003c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c46:	b292      	uxth	r2, r2
 8003c48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c50:	f8bd 3000 	ldrh.w	r3, [sp]
 8003c54:	4581      	cmp	r9, r0
 8003c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8003c5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c62:	d2db      	bcs.n	8003c1c <quorem+0x44>
 8003c64:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c68:	b92b      	cbnz	r3, 8003c76 <quorem+0x9e>
 8003c6a:	9b01      	ldr	r3, [sp, #4]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	d32e      	bcc.n	8003cd2 <quorem+0xfa>
 8003c74:	613c      	str	r4, [r7, #16]
 8003c76:	4638      	mov	r0, r7
 8003c78:	f001 fae4 	bl	8005244 <__mcmp>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	db24      	blt.n	8003cca <quorem+0xf2>
 8003c80:	3601      	adds	r6, #1
 8003c82:	4628      	mov	r0, r5
 8003c84:	f04f 0c00 	mov.w	ip, #0
 8003c88:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8003c90:	b293      	uxth	r3, r2
 8003c92:	ebac 0303 	sub.w	r3, ip, r3
 8003c96:	0c12      	lsrs	r2, r2, #16
 8003c98:	fa13 f38e 	uxtah	r3, r3, lr
 8003c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003caa:	45c1      	cmp	r9, r8
 8003cac:	f840 3b04 	str.w	r3, [r0], #4
 8003cb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003cb4:	d2e8      	bcs.n	8003c88 <quorem+0xb0>
 8003cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cbe:	b922      	cbnz	r2, 8003cca <quorem+0xf2>
 8003cc0:	3b04      	subs	r3, #4
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	d30a      	bcc.n	8003cde <quorem+0x106>
 8003cc8:	613c      	str	r4, [r7, #16]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	b003      	add	sp, #12
 8003cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	d1cc      	bne.n	8003c74 <quorem+0x9c>
 8003cda:	3c01      	subs	r4, #1
 8003cdc:	e7c7      	b.n	8003c6e <quorem+0x96>
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	3b04      	subs	r3, #4
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <quorem+0xf0>
 8003ce6:	3c01      	subs	r4, #1
 8003ce8:	e7eb      	b.n	8003cc2 <quorem+0xea>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e7ee      	b.n	8003ccc <quorem+0xf4>
	...

08003cf0 <_dtoa_r>:
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf4:	ed2d 8b04 	vpush	{d8-d9}
 8003cf8:	ec57 6b10 	vmov	r6, r7, d0
 8003cfc:	b093      	sub	sp, #76	; 0x4c
 8003cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003d04:	9106      	str	r1, [sp, #24]
 8003d06:	ee10 aa10 	vmov	sl, s0
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d10:	46bb      	mov	fp, r7
 8003d12:	b975      	cbnz	r5, 8003d32 <_dtoa_r+0x42>
 8003d14:	2010      	movs	r0, #16
 8003d16:	f000 fffd 	bl	8004d14 <malloc>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6260      	str	r0, [r4, #36]	; 0x24
 8003d1e:	b920      	cbnz	r0, 8003d2a <_dtoa_r+0x3a>
 8003d20:	4ba7      	ldr	r3, [pc, #668]	; (8003fc0 <_dtoa_r+0x2d0>)
 8003d22:	21ea      	movs	r1, #234	; 0xea
 8003d24:	48a7      	ldr	r0, [pc, #668]	; (8003fc4 <_dtoa_r+0x2d4>)
 8003d26:	f001 fe45 	bl	80059b4 <__assert_func>
 8003d2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d2e:	6005      	str	r5, [r0, #0]
 8003d30:	60c5      	str	r5, [r0, #12]
 8003d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	b151      	cbz	r1, 8003d4e <_dtoa_r+0x5e>
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	604a      	str	r2, [r1, #4]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
 8003d42:	4620      	mov	r0, r4
 8003d44:	f001 f83c 	bl	8004dc0 <_Bfree>
 8003d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	1e3b      	subs	r3, r7, #0
 8003d50:	bfaa      	itet	ge
 8003d52:	2300      	movge	r3, #0
 8003d54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003d58:	f8c8 3000 	strge.w	r3, [r8]
 8003d5c:	4b9a      	ldr	r3, [pc, #616]	; (8003fc8 <_dtoa_r+0x2d8>)
 8003d5e:	bfbc      	itt	lt
 8003d60:	2201      	movlt	r2, #1
 8003d62:	f8c8 2000 	strlt.w	r2, [r8]
 8003d66:	ea33 030b 	bics.w	r3, r3, fp
 8003d6a:	d11b      	bne.n	8003da4 <_dtoa_r+0xb4>
 8003d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003d78:	4333      	orrs	r3, r6
 8003d7a:	f000 8592 	beq.w	80048a2 <_dtoa_r+0xbb2>
 8003d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d80:	b963      	cbnz	r3, 8003d9c <_dtoa_r+0xac>
 8003d82:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <_dtoa_r+0x2dc>)
 8003d84:	e022      	b.n	8003dcc <_dtoa_r+0xdc>
 8003d86:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <_dtoa_r+0x2e0>)
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	9801      	ldr	r0, [sp, #4]
 8003d92:	b013      	add	sp, #76	; 0x4c
 8003d94:	ecbd 8b04 	vpop	{d8-d9}
 8003d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9c:	4b8b      	ldr	r3, [pc, #556]	; (8003fcc <_dtoa_r+0x2dc>)
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	3303      	adds	r3, #3
 8003da2:	e7f3      	b.n	8003d8c <_dtoa_r+0x9c>
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	4650      	mov	r0, sl
 8003daa:	4659      	mov	r1, fp
 8003dac:	f7fc fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003db0:	ec4b ab19 	vmov	d9, sl, fp
 8003db4:	4680      	mov	r8, r0
 8003db6:	b158      	cbz	r0, 8003dd0 <_dtoa_r+0xe0>
 8003db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003dba:	2301      	movs	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 856b 	beq.w	800489c <_dtoa_r+0xbac>
 8003dc6:	4883      	ldr	r0, [pc, #524]	; (8003fd4 <_dtoa_r+0x2e4>)
 8003dc8:	6018      	str	r0, [r3, #0]
 8003dca:	1e43      	subs	r3, r0, #1
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	e7df      	b.n	8003d90 <_dtoa_r+0xa0>
 8003dd0:	ec4b ab10 	vmov	d0, sl, fp
 8003dd4:	aa10      	add	r2, sp, #64	; 0x40
 8003dd6:	a911      	add	r1, sp, #68	; 0x44
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f001 fad9 	bl	8005390 <__d2b>
 8003dde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003de2:	ee08 0a10 	vmov	s16, r0
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	f000 8084 	beq.w	8003ef4 <_dtoa_r+0x204>
 8003dec:	ee19 3a90 	vmov	r3, s19
 8003df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003df8:	4656      	mov	r6, sl
 8003dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003e06:	4b74      	ldr	r3, [pc, #464]	; (8003fd8 <_dtoa_r+0x2e8>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	f7fc fa3b 	bl	8000288 <__aeabi_dsub>
 8003e12:	a365      	add	r3, pc, #404	; (adr r3, 8003fa8 <_dtoa_r+0x2b8>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fbee 	bl	80005f8 <__aeabi_dmul>
 8003e1c:	a364      	add	r3, pc, #400	; (adr r3, 8003fb0 <_dtoa_r+0x2c0>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fa33 	bl	800028c <__adddf3>
 8003e26:	4606      	mov	r6, r0
 8003e28:	4628      	mov	r0, r5
 8003e2a:	460f      	mov	r7, r1
 8003e2c:	f7fc fb7a 	bl	8000524 <__aeabi_i2d>
 8003e30:	a361      	add	r3, pc, #388	; (adr r3, 8003fb8 <_dtoa_r+0x2c8>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f7fc fbdf 	bl	80005f8 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc fa23 	bl	800028c <__adddf3>
 8003e46:	4606      	mov	r6, r0
 8003e48:	460f      	mov	r7, r1
 8003e4a:	f7fc fe85 	bl	8000b58 <__aeabi_d2iz>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	9000      	str	r0, [sp, #0]
 8003e52:	2300      	movs	r3, #0
 8003e54:	4630      	mov	r0, r6
 8003e56:	4639      	mov	r1, r7
 8003e58:	f7fc fe40 	bl	8000adc <__aeabi_dcmplt>
 8003e5c:	b150      	cbz	r0, 8003e74 <_dtoa_r+0x184>
 8003e5e:	9800      	ldr	r0, [sp, #0]
 8003e60:	f7fc fb60 	bl	8000524 <__aeabi_i2d>
 8003e64:	4632      	mov	r2, r6
 8003e66:	463b      	mov	r3, r7
 8003e68:	f7fc fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e6c:	b910      	cbnz	r0, 8003e74 <_dtoa_r+0x184>
 8003e6e:	9b00      	ldr	r3, [sp, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	9b00      	ldr	r3, [sp, #0]
 8003e76:	2b16      	cmp	r3, #22
 8003e78:	d85a      	bhi.n	8003f30 <_dtoa_r+0x240>
 8003e7a:	9a00      	ldr	r2, [sp, #0]
 8003e7c:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <_dtoa_r+0x2ec>)
 8003e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	ec51 0b19 	vmov	r0, r1, d9
 8003e8a:	f7fc fe27 	bl	8000adc <__aeabi_dcmplt>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d050      	beq.n	8003f34 <_dtoa_r+0x244>
 8003e92:	9b00      	ldr	r3, [sp, #0]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e9e:	1b5d      	subs	r5, r3, r5
 8003ea0:	1e6b      	subs	r3, r5, #1
 8003ea2:	9305      	str	r3, [sp, #20]
 8003ea4:	bf45      	ittet	mi
 8003ea6:	f1c5 0301 	rsbmi	r3, r5, #1
 8003eaa:	9304      	strmi	r3, [sp, #16]
 8003eac:	2300      	movpl	r3, #0
 8003eae:	2300      	movmi	r3, #0
 8003eb0:	bf4c      	ite	mi
 8003eb2:	9305      	strmi	r3, [sp, #20]
 8003eb4:	9304      	strpl	r3, [sp, #16]
 8003eb6:	9b00      	ldr	r3, [sp, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db3d      	blt.n	8003f38 <_dtoa_r+0x248>
 8003ebc:	9b05      	ldr	r3, [sp, #20]
 8003ebe:	9a00      	ldr	r2, [sp, #0]
 8003ec0:	920a      	str	r2, [sp, #40]	; 0x28
 8003ec2:	4413      	add	r3, r2
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	9b06      	ldr	r3, [sp, #24]
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	f200 8089 	bhi.w	8003fe4 <_dtoa_r+0x2f4>
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	bfc4      	itt	gt
 8003ed6:	3b04      	subgt	r3, #4
 8003ed8:	9306      	strgt	r3, [sp, #24]
 8003eda:	9b06      	ldr	r3, [sp, #24]
 8003edc:	f1a3 0302 	sub.w	r3, r3, #2
 8003ee0:	bfcc      	ite	gt
 8003ee2:	2500      	movgt	r5, #0
 8003ee4:	2501      	movle	r5, #1
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	f200 8087 	bhi.w	8003ffa <_dtoa_r+0x30a>
 8003eec:	e8df f003 	tbb	[pc, r3]
 8003ef0:	59383a2d 	.word	0x59383a2d
 8003ef4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003ef8:	441d      	add	r5, r3
 8003efa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	bfc1      	itttt	gt
 8003f02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003f0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8003f0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003f12:	bfda      	itte	le
 8003f14:	f1c3 0320 	rsble	r3, r3, #32
 8003f18:	fa06 f003 	lslle.w	r0, r6, r3
 8003f1c:	4318      	orrgt	r0, r3
 8003f1e:	f7fc faf1 	bl	8000504 <__aeabi_ui2d>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4606      	mov	r6, r0
 8003f26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003f2a:	3d01      	subs	r5, #1
 8003f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8003f2e:	e76a      	b.n	8003e06 <_dtoa_r+0x116>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e7b2      	b.n	8003e9a <_dtoa_r+0x1aa>
 8003f34:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f36:	e7b1      	b.n	8003e9c <_dtoa_r+0x1ac>
 8003f38:	9b04      	ldr	r3, [sp, #16]
 8003f3a:	9a00      	ldr	r2, [sp, #0]
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	4253      	negs	r3, r2
 8003f42:	9307      	str	r3, [sp, #28]
 8003f44:	2300      	movs	r3, #0
 8003f46:	930a      	str	r3, [sp, #40]	; 0x28
 8003f48:	e7bf      	b.n	8003eca <_dtoa_r+0x1da>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9308      	str	r3, [sp, #32]
 8003f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dc55      	bgt.n	8004000 <_dtoa_r+0x310>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f5e:	e00c      	b.n	8003f7a <_dtoa_r+0x28a>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e7f3      	b.n	8003f4c <_dtoa_r+0x25c>
 8003f64:	2300      	movs	r3, #0
 8003f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f68:	9308      	str	r3, [sp, #32]
 8003f6a:	9b00      	ldr	r3, [sp, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	3301      	adds	r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	9303      	str	r3, [sp, #12]
 8003f76:	bfb8      	it	lt
 8003f78:	2301      	movlt	r3, #1
 8003f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	6042      	str	r2, [r0, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	f102 0614 	add.w	r6, r2, #20
 8003f86:	429e      	cmp	r6, r3
 8003f88:	6841      	ldr	r1, [r0, #4]
 8003f8a:	d93d      	bls.n	8004008 <_dtoa_r+0x318>
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 fed7 	bl	8004d40 <_Balloc>
 8003f92:	9001      	str	r0, [sp, #4]
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d13b      	bne.n	8004010 <_dtoa_r+0x320>
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <_dtoa_r+0x2f0>)
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003fa0:	e6c0      	b.n	8003d24 <_dtoa_r+0x34>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e7df      	b.n	8003f66 <_dtoa_r+0x276>
 8003fa6:	bf00      	nop
 8003fa8:	636f4361 	.word	0x636f4361
 8003fac:	3fd287a7 	.word	0x3fd287a7
 8003fb0:	8b60c8b3 	.word	0x8b60c8b3
 8003fb4:	3fc68a28 	.word	0x3fc68a28
 8003fb8:	509f79fb 	.word	0x509f79fb
 8003fbc:	3fd34413 	.word	0x3fd34413
 8003fc0:	08005d35 	.word	0x08005d35
 8003fc4:	08005d4c 	.word	0x08005d4c
 8003fc8:	7ff00000 	.word	0x7ff00000
 8003fcc:	08005d31 	.word	0x08005d31
 8003fd0:	08005d28 	.word	0x08005d28
 8003fd4:	08005d05 	.word	0x08005d05
 8003fd8:	3ff80000 	.word	0x3ff80000
 8003fdc:	08005ea0 	.word	0x08005ea0
 8003fe0:	08005da7 	.word	0x08005da7
 8003fe4:	2501      	movs	r5, #1
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9306      	str	r3, [sp, #24]
 8003fea:	9508      	str	r5, [sp, #32]
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2312      	movs	r3, #18
 8003ff8:	e7b0      	b.n	8003f5c <_dtoa_r+0x26c>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	9308      	str	r3, [sp, #32]
 8003ffe:	e7f5      	b.n	8003fec <_dtoa_r+0x2fc>
 8004000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004002:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004006:	e7b8      	b.n	8003f7a <_dtoa_r+0x28a>
 8004008:	3101      	adds	r1, #1
 800400a:	6041      	str	r1, [r0, #4]
 800400c:	0052      	lsls	r2, r2, #1
 800400e:	e7b8      	b.n	8003f82 <_dtoa_r+0x292>
 8004010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004012:	9a01      	ldr	r2, [sp, #4]
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	2b0e      	cmp	r3, #14
 800401a:	f200 809d 	bhi.w	8004158 <_dtoa_r+0x468>
 800401e:	2d00      	cmp	r5, #0
 8004020:	f000 809a 	beq.w	8004158 <_dtoa_r+0x468>
 8004024:	9b00      	ldr	r3, [sp, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	dd32      	ble.n	8004090 <_dtoa_r+0x3a0>
 800402a:	4ab7      	ldr	r2, [pc, #732]	; (8004308 <_dtoa_r+0x618>)
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004038:	9b00      	ldr	r3, [sp, #0]
 800403a:	05d8      	lsls	r0, r3, #23
 800403c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004040:	d516      	bpl.n	8004070 <_dtoa_r+0x380>
 8004042:	4bb2      	ldr	r3, [pc, #712]	; (800430c <_dtoa_r+0x61c>)
 8004044:	ec51 0b19 	vmov	r0, r1, d9
 8004048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800404c:	f7fc fbfe 	bl	800084c <__aeabi_ddiv>
 8004050:	f007 070f 	and.w	r7, r7, #15
 8004054:	4682      	mov	sl, r0
 8004056:	468b      	mov	fp, r1
 8004058:	2503      	movs	r5, #3
 800405a:	4eac      	ldr	r6, [pc, #688]	; (800430c <_dtoa_r+0x61c>)
 800405c:	b957      	cbnz	r7, 8004074 <_dtoa_r+0x384>
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	4650      	mov	r0, sl
 8004064:	4659      	mov	r1, fp
 8004066:	f7fc fbf1 	bl	800084c <__aeabi_ddiv>
 800406a:	4682      	mov	sl, r0
 800406c:	468b      	mov	fp, r1
 800406e:	e028      	b.n	80040c2 <_dtoa_r+0x3d2>
 8004070:	2502      	movs	r5, #2
 8004072:	e7f2      	b.n	800405a <_dtoa_r+0x36a>
 8004074:	07f9      	lsls	r1, r7, #31
 8004076:	d508      	bpl.n	800408a <_dtoa_r+0x39a>
 8004078:	4640      	mov	r0, r8
 800407a:	4649      	mov	r1, r9
 800407c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004080:	f7fc faba 	bl	80005f8 <__aeabi_dmul>
 8004084:	3501      	adds	r5, #1
 8004086:	4680      	mov	r8, r0
 8004088:	4689      	mov	r9, r1
 800408a:	107f      	asrs	r7, r7, #1
 800408c:	3608      	adds	r6, #8
 800408e:	e7e5      	b.n	800405c <_dtoa_r+0x36c>
 8004090:	f000 809b 	beq.w	80041ca <_dtoa_r+0x4da>
 8004094:	9b00      	ldr	r3, [sp, #0]
 8004096:	4f9d      	ldr	r7, [pc, #628]	; (800430c <_dtoa_r+0x61c>)
 8004098:	425e      	negs	r6, r3
 800409a:	4b9b      	ldr	r3, [pc, #620]	; (8004308 <_dtoa_r+0x618>)
 800409c:	f006 020f 	and.w	r2, r6, #15
 80040a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	ec51 0b19 	vmov	r0, r1, d9
 80040ac:	f7fc faa4 	bl	80005f8 <__aeabi_dmul>
 80040b0:	1136      	asrs	r6, r6, #4
 80040b2:	4682      	mov	sl, r0
 80040b4:	468b      	mov	fp, r1
 80040b6:	2300      	movs	r3, #0
 80040b8:	2502      	movs	r5, #2
 80040ba:	2e00      	cmp	r6, #0
 80040bc:	d17a      	bne.n	80041b4 <_dtoa_r+0x4c4>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1d3      	bne.n	800406a <_dtoa_r+0x37a>
 80040c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8082 	beq.w	80041ce <_dtoa_r+0x4de>
 80040ca:	4b91      	ldr	r3, [pc, #580]	; (8004310 <_dtoa_r+0x620>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	4650      	mov	r0, sl
 80040d0:	4659      	mov	r1, fp
 80040d2:	f7fc fd03 	bl	8000adc <__aeabi_dcmplt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d079      	beq.n	80041ce <_dtoa_r+0x4de>
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d076      	beq.n	80041ce <_dtoa_r+0x4de>
 80040e0:	9b02      	ldr	r3, [sp, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dd36      	ble.n	8004154 <_dtoa_r+0x464>
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	4650      	mov	r0, sl
 80040ea:	4659      	mov	r1, fp
 80040ec:	1e5f      	subs	r7, r3, #1
 80040ee:	2200      	movs	r2, #0
 80040f0:	4b88      	ldr	r3, [pc, #544]	; (8004314 <_dtoa_r+0x624>)
 80040f2:	f7fc fa81 	bl	80005f8 <__aeabi_dmul>
 80040f6:	9e02      	ldr	r6, [sp, #8]
 80040f8:	4682      	mov	sl, r0
 80040fa:	468b      	mov	fp, r1
 80040fc:	3501      	adds	r5, #1
 80040fe:	4628      	mov	r0, r5
 8004100:	f7fc fa10 	bl	8000524 <__aeabi_i2d>
 8004104:	4652      	mov	r2, sl
 8004106:	465b      	mov	r3, fp
 8004108:	f7fc fa76 	bl	80005f8 <__aeabi_dmul>
 800410c:	4b82      	ldr	r3, [pc, #520]	; (8004318 <_dtoa_r+0x628>)
 800410e:	2200      	movs	r2, #0
 8004110:	f7fc f8bc 	bl	800028c <__adddf3>
 8004114:	46d0      	mov	r8, sl
 8004116:	46d9      	mov	r9, fp
 8004118:	4682      	mov	sl, r0
 800411a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800411e:	2e00      	cmp	r6, #0
 8004120:	d158      	bne.n	80041d4 <_dtoa_r+0x4e4>
 8004122:	4b7e      	ldr	r3, [pc, #504]	; (800431c <_dtoa_r+0x62c>)
 8004124:	2200      	movs	r2, #0
 8004126:	4640      	mov	r0, r8
 8004128:	4649      	mov	r1, r9
 800412a:	f7fc f8ad 	bl	8000288 <__aeabi_dsub>
 800412e:	4652      	mov	r2, sl
 8004130:	465b      	mov	r3, fp
 8004132:	4680      	mov	r8, r0
 8004134:	4689      	mov	r9, r1
 8004136:	f7fc fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800413a:	2800      	cmp	r0, #0
 800413c:	f040 8295 	bne.w	800466a <_dtoa_r+0x97a>
 8004140:	4652      	mov	r2, sl
 8004142:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc fcc7 	bl	8000adc <__aeabi_dcmplt>
 800414e:	2800      	cmp	r0, #0
 8004150:	f040 8289 	bne.w	8004666 <_dtoa_r+0x976>
 8004154:	ec5b ab19 	vmov	sl, fp, d9
 8004158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800415a:	2b00      	cmp	r3, #0
 800415c:	f2c0 8148 	blt.w	80043f0 <_dtoa_r+0x700>
 8004160:	9a00      	ldr	r2, [sp, #0]
 8004162:	2a0e      	cmp	r2, #14
 8004164:	f300 8144 	bgt.w	80043f0 <_dtoa_r+0x700>
 8004168:	4b67      	ldr	r3, [pc, #412]	; (8004308 <_dtoa_r+0x618>)
 800416a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800416e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	f280 80d5 	bge.w	8004324 <_dtoa_r+0x634>
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f300 80d1 	bgt.w	8004324 <_dtoa_r+0x634>
 8004182:	f040 826f 	bne.w	8004664 <_dtoa_r+0x974>
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <_dtoa_r+0x62c>)
 8004188:	2200      	movs	r2, #0
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc fa33 	bl	80005f8 <__aeabi_dmul>
 8004192:	4652      	mov	r2, sl
 8004194:	465b      	mov	r3, fp
 8004196:	f7fc fcb5 	bl	8000b04 <__aeabi_dcmpge>
 800419a:	9e03      	ldr	r6, [sp, #12]
 800419c:	4637      	mov	r7, r6
 800419e:	2800      	cmp	r0, #0
 80041a0:	f040 8245 	bne.w	800462e <_dtoa_r+0x93e>
 80041a4:	9d01      	ldr	r5, [sp, #4]
 80041a6:	2331      	movs	r3, #49	; 0x31
 80041a8:	f805 3b01 	strb.w	r3, [r5], #1
 80041ac:	9b00      	ldr	r3, [sp, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	e240      	b.n	8004636 <_dtoa_r+0x946>
 80041b4:	07f2      	lsls	r2, r6, #31
 80041b6:	d505      	bpl.n	80041c4 <_dtoa_r+0x4d4>
 80041b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041bc:	f7fc fa1c 	bl	80005f8 <__aeabi_dmul>
 80041c0:	3501      	adds	r5, #1
 80041c2:	2301      	movs	r3, #1
 80041c4:	1076      	asrs	r6, r6, #1
 80041c6:	3708      	adds	r7, #8
 80041c8:	e777      	b.n	80040ba <_dtoa_r+0x3ca>
 80041ca:	2502      	movs	r5, #2
 80041cc:	e779      	b.n	80040c2 <_dtoa_r+0x3d2>
 80041ce:	9f00      	ldr	r7, [sp, #0]
 80041d0:	9e03      	ldr	r6, [sp, #12]
 80041d2:	e794      	b.n	80040fe <_dtoa_r+0x40e>
 80041d4:	9901      	ldr	r1, [sp, #4]
 80041d6:	4b4c      	ldr	r3, [pc, #304]	; (8004308 <_dtoa_r+0x618>)
 80041d8:	4431      	add	r1, r6
 80041da:	910d      	str	r1, [sp, #52]	; 0x34
 80041dc:	9908      	ldr	r1, [sp, #32]
 80041de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041e6:	2900      	cmp	r1, #0
 80041e8:	d043      	beq.n	8004272 <_dtoa_r+0x582>
 80041ea:	494d      	ldr	r1, [pc, #308]	; (8004320 <_dtoa_r+0x630>)
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7fc fb2d 	bl	800084c <__aeabi_ddiv>
 80041f2:	4652      	mov	r2, sl
 80041f4:	465b      	mov	r3, fp
 80041f6:	f7fc f847 	bl	8000288 <__aeabi_dsub>
 80041fa:	9d01      	ldr	r5, [sp, #4]
 80041fc:	4682      	mov	sl, r0
 80041fe:	468b      	mov	fp, r1
 8004200:	4649      	mov	r1, r9
 8004202:	4640      	mov	r0, r8
 8004204:	f7fc fca8 	bl	8000b58 <__aeabi_d2iz>
 8004208:	4606      	mov	r6, r0
 800420a:	f7fc f98b 	bl	8000524 <__aeabi_i2d>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f837 	bl	8000288 <__aeabi_dsub>
 800421a:	3630      	adds	r6, #48	; 0x30
 800421c:	f805 6b01 	strb.w	r6, [r5], #1
 8004220:	4652      	mov	r2, sl
 8004222:	465b      	mov	r3, fp
 8004224:	4680      	mov	r8, r0
 8004226:	4689      	mov	r9, r1
 8004228:	f7fc fc58 	bl	8000adc <__aeabi_dcmplt>
 800422c:	2800      	cmp	r0, #0
 800422e:	d163      	bne.n	80042f8 <_dtoa_r+0x608>
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	4936      	ldr	r1, [pc, #216]	; (8004310 <_dtoa_r+0x620>)
 8004236:	2000      	movs	r0, #0
 8004238:	f7fc f826 	bl	8000288 <__aeabi_dsub>
 800423c:	4652      	mov	r2, sl
 800423e:	465b      	mov	r3, fp
 8004240:	f7fc fc4c 	bl	8000adc <__aeabi_dcmplt>
 8004244:	2800      	cmp	r0, #0
 8004246:	f040 80b5 	bne.w	80043b4 <_dtoa_r+0x6c4>
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	429d      	cmp	r5, r3
 800424e:	d081      	beq.n	8004154 <_dtoa_r+0x464>
 8004250:	4b30      	ldr	r3, [pc, #192]	; (8004314 <_dtoa_r+0x624>)
 8004252:	2200      	movs	r2, #0
 8004254:	4650      	mov	r0, sl
 8004256:	4659      	mov	r1, fp
 8004258:	f7fc f9ce 	bl	80005f8 <__aeabi_dmul>
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <_dtoa_r+0x624>)
 800425e:	4682      	mov	sl, r0
 8004260:	468b      	mov	fp, r1
 8004262:	4640      	mov	r0, r8
 8004264:	4649      	mov	r1, r9
 8004266:	2200      	movs	r2, #0
 8004268:	f7fc f9c6 	bl	80005f8 <__aeabi_dmul>
 800426c:	4680      	mov	r8, r0
 800426e:	4689      	mov	r9, r1
 8004270:	e7c6      	b.n	8004200 <_dtoa_r+0x510>
 8004272:	4650      	mov	r0, sl
 8004274:	4659      	mov	r1, fp
 8004276:	f7fc f9bf 	bl	80005f8 <__aeabi_dmul>
 800427a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800427c:	9d01      	ldr	r5, [sp, #4]
 800427e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004280:	4682      	mov	sl, r0
 8004282:	468b      	mov	fp, r1
 8004284:	4649      	mov	r1, r9
 8004286:	4640      	mov	r0, r8
 8004288:	f7fc fc66 	bl	8000b58 <__aeabi_d2iz>
 800428c:	4606      	mov	r6, r0
 800428e:	f7fc f949 	bl	8000524 <__aeabi_i2d>
 8004292:	3630      	adds	r6, #48	; 0x30
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4640      	mov	r0, r8
 800429a:	4649      	mov	r1, r9
 800429c:	f7fb fff4 	bl	8000288 <__aeabi_dsub>
 80042a0:	f805 6b01 	strb.w	r6, [r5], #1
 80042a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042a6:	429d      	cmp	r5, r3
 80042a8:	4680      	mov	r8, r0
 80042aa:	4689      	mov	r9, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	d124      	bne.n	80042fc <_dtoa_r+0x60c>
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <_dtoa_r+0x630>)
 80042b4:	4650      	mov	r0, sl
 80042b6:	4659      	mov	r1, fp
 80042b8:	f7fb ffe8 	bl	800028c <__adddf3>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4640      	mov	r0, r8
 80042c2:	4649      	mov	r1, r9
 80042c4:	f7fc fc28 	bl	8000b18 <__aeabi_dcmpgt>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d173      	bne.n	80043b4 <_dtoa_r+0x6c4>
 80042cc:	4652      	mov	r2, sl
 80042ce:	465b      	mov	r3, fp
 80042d0:	4913      	ldr	r1, [pc, #76]	; (8004320 <_dtoa_r+0x630>)
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7fb ffd8 	bl	8000288 <__aeabi_dsub>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4640      	mov	r0, r8
 80042de:	4649      	mov	r1, r9
 80042e0:	f7fc fbfc 	bl	8000adc <__aeabi_dcmplt>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	f43f af35 	beq.w	8004154 <_dtoa_r+0x464>
 80042ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80042ec:	1e6b      	subs	r3, r5, #1
 80042ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80042f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042f4:	2b30      	cmp	r3, #48	; 0x30
 80042f6:	d0f8      	beq.n	80042ea <_dtoa_r+0x5fa>
 80042f8:	9700      	str	r7, [sp, #0]
 80042fa:	e049      	b.n	8004390 <_dtoa_r+0x6a0>
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_dtoa_r+0x624>)
 80042fe:	f7fc f97b 	bl	80005f8 <__aeabi_dmul>
 8004302:	4680      	mov	r8, r0
 8004304:	4689      	mov	r9, r1
 8004306:	e7bd      	b.n	8004284 <_dtoa_r+0x594>
 8004308:	08005ea0 	.word	0x08005ea0
 800430c:	08005e78 	.word	0x08005e78
 8004310:	3ff00000 	.word	0x3ff00000
 8004314:	40240000 	.word	0x40240000
 8004318:	401c0000 	.word	0x401c0000
 800431c:	40140000 	.word	0x40140000
 8004320:	3fe00000 	.word	0x3fe00000
 8004324:	9d01      	ldr	r5, [sp, #4]
 8004326:	4656      	mov	r6, sl
 8004328:	465f      	mov	r7, fp
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	4630      	mov	r0, r6
 8004330:	4639      	mov	r1, r7
 8004332:	f7fc fa8b 	bl	800084c <__aeabi_ddiv>
 8004336:	f7fc fc0f 	bl	8000b58 <__aeabi_d2iz>
 800433a:	4682      	mov	sl, r0
 800433c:	f7fc f8f2 	bl	8000524 <__aeabi_i2d>
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	f7fc f958 	bl	80005f8 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4630      	mov	r0, r6
 800434e:	4639      	mov	r1, r7
 8004350:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004354:	f7fb ff98 	bl	8000288 <__aeabi_dsub>
 8004358:	f805 6b01 	strb.w	r6, [r5], #1
 800435c:	9e01      	ldr	r6, [sp, #4]
 800435e:	9f03      	ldr	r7, [sp, #12]
 8004360:	1bae      	subs	r6, r5, r6
 8004362:	42b7      	cmp	r7, r6
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	d135      	bne.n	80043d6 <_dtoa_r+0x6e6>
 800436a:	f7fb ff8f 	bl	800028c <__adddf3>
 800436e:	4642      	mov	r2, r8
 8004370:	464b      	mov	r3, r9
 8004372:	4606      	mov	r6, r0
 8004374:	460f      	mov	r7, r1
 8004376:	f7fc fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800437a:	b9d0      	cbnz	r0, 80043b2 <_dtoa_r+0x6c2>
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004388:	b110      	cbz	r0, 8004390 <_dtoa_r+0x6a0>
 800438a:	f01a 0f01 	tst.w	sl, #1
 800438e:	d110      	bne.n	80043b2 <_dtoa_r+0x6c2>
 8004390:	4620      	mov	r0, r4
 8004392:	ee18 1a10 	vmov	r1, s16
 8004396:	f000 fd13 	bl	8004dc0 <_Bfree>
 800439a:	2300      	movs	r3, #0
 800439c:	9800      	ldr	r0, [sp, #0]
 800439e:	702b      	strb	r3, [r5, #0]
 80043a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043a2:	3001      	adds	r0, #1
 80043a4:	6018      	str	r0, [r3, #0]
 80043a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f43f acf1 	beq.w	8003d90 <_dtoa_r+0xa0>
 80043ae:	601d      	str	r5, [r3, #0]
 80043b0:	e4ee      	b.n	8003d90 <_dtoa_r+0xa0>
 80043b2:	9f00      	ldr	r7, [sp, #0]
 80043b4:	462b      	mov	r3, r5
 80043b6:	461d      	mov	r5, r3
 80043b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043bc:	2a39      	cmp	r2, #57	; 0x39
 80043be:	d106      	bne.n	80043ce <_dtoa_r+0x6de>
 80043c0:	9a01      	ldr	r2, [sp, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d1f7      	bne.n	80043b6 <_dtoa_r+0x6c6>
 80043c6:	9901      	ldr	r1, [sp, #4]
 80043c8:	2230      	movs	r2, #48	; 0x30
 80043ca:	3701      	adds	r7, #1
 80043cc:	700a      	strb	r2, [r1, #0]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	3201      	adds	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e790      	b.n	80042f8 <_dtoa_r+0x608>
 80043d6:	4ba6      	ldr	r3, [pc, #664]	; (8004670 <_dtoa_r+0x980>)
 80043d8:	2200      	movs	r2, #0
 80043da:	f7fc f90d 	bl	80005f8 <__aeabi_dmul>
 80043de:	2200      	movs	r2, #0
 80043e0:	2300      	movs	r3, #0
 80043e2:	4606      	mov	r6, r0
 80043e4:	460f      	mov	r7, r1
 80043e6:	f7fc fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d09d      	beq.n	800432a <_dtoa_r+0x63a>
 80043ee:	e7cf      	b.n	8004390 <_dtoa_r+0x6a0>
 80043f0:	9a08      	ldr	r2, [sp, #32]
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	f000 80d7 	beq.w	80045a6 <_dtoa_r+0x8b6>
 80043f8:	9a06      	ldr	r2, [sp, #24]
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	f300 80ba 	bgt.w	8004574 <_dtoa_r+0x884>
 8004400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004402:	2a00      	cmp	r2, #0
 8004404:	f000 80b2 	beq.w	800456c <_dtoa_r+0x87c>
 8004408:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800440c:	9e07      	ldr	r6, [sp, #28]
 800440e:	9d04      	ldr	r5, [sp, #16]
 8004410:	9a04      	ldr	r2, [sp, #16]
 8004412:	441a      	add	r2, r3
 8004414:	9204      	str	r2, [sp, #16]
 8004416:	9a05      	ldr	r2, [sp, #20]
 8004418:	2101      	movs	r1, #1
 800441a:	441a      	add	r2, r3
 800441c:	4620      	mov	r0, r4
 800441e:	9205      	str	r2, [sp, #20]
 8004420:	f000 fd86 	bl	8004f30 <__i2b>
 8004424:	4607      	mov	r7, r0
 8004426:	2d00      	cmp	r5, #0
 8004428:	dd0c      	ble.n	8004444 <_dtoa_r+0x754>
 800442a:	9b05      	ldr	r3, [sp, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	dd09      	ble.n	8004444 <_dtoa_r+0x754>
 8004430:	42ab      	cmp	r3, r5
 8004432:	9a04      	ldr	r2, [sp, #16]
 8004434:	bfa8      	it	ge
 8004436:	462b      	movge	r3, r5
 8004438:	1ad2      	subs	r2, r2, r3
 800443a:	9204      	str	r2, [sp, #16]
 800443c:	9a05      	ldr	r2, [sp, #20]
 800443e:	1aed      	subs	r5, r5, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	9b07      	ldr	r3, [sp, #28]
 8004446:	b31b      	cbz	r3, 8004490 <_dtoa_r+0x7a0>
 8004448:	9b08      	ldr	r3, [sp, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80af 	beq.w	80045ae <_dtoa_r+0x8be>
 8004450:	2e00      	cmp	r6, #0
 8004452:	dd13      	ble.n	800447c <_dtoa_r+0x78c>
 8004454:	4639      	mov	r1, r7
 8004456:	4632      	mov	r2, r6
 8004458:	4620      	mov	r0, r4
 800445a:	f000 fe29 	bl	80050b0 <__pow5mult>
 800445e:	ee18 2a10 	vmov	r2, s16
 8004462:	4601      	mov	r1, r0
 8004464:	4607      	mov	r7, r0
 8004466:	4620      	mov	r0, r4
 8004468:	f000 fd78 	bl	8004f5c <__multiply>
 800446c:	ee18 1a10 	vmov	r1, s16
 8004470:	4680      	mov	r8, r0
 8004472:	4620      	mov	r0, r4
 8004474:	f000 fca4 	bl	8004dc0 <_Bfree>
 8004478:	ee08 8a10 	vmov	s16, r8
 800447c:	9b07      	ldr	r3, [sp, #28]
 800447e:	1b9a      	subs	r2, r3, r6
 8004480:	d006      	beq.n	8004490 <_dtoa_r+0x7a0>
 8004482:	ee18 1a10 	vmov	r1, s16
 8004486:	4620      	mov	r0, r4
 8004488:	f000 fe12 	bl	80050b0 <__pow5mult>
 800448c:	ee08 0a10 	vmov	s16, r0
 8004490:	2101      	movs	r1, #1
 8004492:	4620      	mov	r0, r4
 8004494:	f000 fd4c 	bl	8004f30 <__i2b>
 8004498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	4606      	mov	r6, r0
 800449e:	f340 8088 	ble.w	80045b2 <_dtoa_r+0x8c2>
 80044a2:	461a      	mov	r2, r3
 80044a4:	4601      	mov	r1, r0
 80044a6:	4620      	mov	r0, r4
 80044a8:	f000 fe02 	bl	80050b0 <__pow5mult>
 80044ac:	9b06      	ldr	r3, [sp, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	4606      	mov	r6, r0
 80044b2:	f340 8081 	ble.w	80045b8 <_dtoa_r+0x8c8>
 80044b6:	f04f 0800 	mov.w	r8, #0
 80044ba:	6933      	ldr	r3, [r6, #16]
 80044bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80044c0:	6918      	ldr	r0, [r3, #16]
 80044c2:	f000 fce5 	bl	8004e90 <__hi0bits>
 80044c6:	f1c0 0020 	rsb	r0, r0, #32
 80044ca:	9b05      	ldr	r3, [sp, #20]
 80044cc:	4418      	add	r0, r3
 80044ce:	f010 001f 	ands.w	r0, r0, #31
 80044d2:	f000 8092 	beq.w	80045fa <_dtoa_r+0x90a>
 80044d6:	f1c0 0320 	rsb	r3, r0, #32
 80044da:	2b04      	cmp	r3, #4
 80044dc:	f340 808a 	ble.w	80045f4 <_dtoa_r+0x904>
 80044e0:	f1c0 001c 	rsb	r0, r0, #28
 80044e4:	9b04      	ldr	r3, [sp, #16]
 80044e6:	4403      	add	r3, r0
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	9b05      	ldr	r3, [sp, #20]
 80044ec:	4403      	add	r3, r0
 80044ee:	4405      	add	r5, r0
 80044f0:	9305      	str	r3, [sp, #20]
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dd07      	ble.n	8004508 <_dtoa_r+0x818>
 80044f8:	ee18 1a10 	vmov	r1, s16
 80044fc:	461a      	mov	r2, r3
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 fe30 	bl	8005164 <__lshift>
 8004504:	ee08 0a10 	vmov	s16, r0
 8004508:	9b05      	ldr	r3, [sp, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	dd05      	ble.n	800451a <_dtoa_r+0x82a>
 800450e:	4631      	mov	r1, r6
 8004510:	461a      	mov	r2, r3
 8004512:	4620      	mov	r0, r4
 8004514:	f000 fe26 	bl	8005164 <__lshift>
 8004518:	4606      	mov	r6, r0
 800451a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d06e      	beq.n	80045fe <_dtoa_r+0x90e>
 8004520:	ee18 0a10 	vmov	r0, s16
 8004524:	4631      	mov	r1, r6
 8004526:	f000 fe8d 	bl	8005244 <__mcmp>
 800452a:	2800      	cmp	r0, #0
 800452c:	da67      	bge.n	80045fe <_dtoa_r+0x90e>
 800452e:	9b00      	ldr	r3, [sp, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	ee18 1a10 	vmov	r1, s16
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	220a      	movs	r2, #10
 800453a:	2300      	movs	r3, #0
 800453c:	4620      	mov	r0, r4
 800453e:	f000 fc61 	bl	8004e04 <__multadd>
 8004542:	9b08      	ldr	r3, [sp, #32]
 8004544:	ee08 0a10 	vmov	s16, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 81b1 	beq.w	80048b0 <_dtoa_r+0xbc0>
 800454e:	2300      	movs	r3, #0
 8004550:	4639      	mov	r1, r7
 8004552:	220a      	movs	r2, #10
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fc55 	bl	8004e04 <__multadd>
 800455a:	9b02      	ldr	r3, [sp, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	4607      	mov	r7, r0
 8004560:	f300 808e 	bgt.w	8004680 <_dtoa_r+0x990>
 8004564:	9b06      	ldr	r3, [sp, #24]
 8004566:	2b02      	cmp	r3, #2
 8004568:	dc51      	bgt.n	800460e <_dtoa_r+0x91e>
 800456a:	e089      	b.n	8004680 <_dtoa_r+0x990>
 800456c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800456e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004572:	e74b      	b.n	800440c <_dtoa_r+0x71c>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	1e5e      	subs	r6, r3, #1
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	42b3      	cmp	r3, r6
 800457c:	bfbf      	itttt	lt
 800457e:	9b07      	ldrlt	r3, [sp, #28]
 8004580:	9607      	strlt	r6, [sp, #28]
 8004582:	1af2      	sublt	r2, r6, r3
 8004584:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004586:	bfb6      	itet	lt
 8004588:	189b      	addlt	r3, r3, r2
 800458a:	1b9e      	subge	r6, r3, r6
 800458c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	bfb8      	it	lt
 8004592:	2600      	movlt	r6, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	bfb7      	itett	lt
 8004598:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800459c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80045a0:	1a9d      	sublt	r5, r3, r2
 80045a2:	2300      	movlt	r3, #0
 80045a4:	e734      	b.n	8004410 <_dtoa_r+0x720>
 80045a6:	9e07      	ldr	r6, [sp, #28]
 80045a8:	9d04      	ldr	r5, [sp, #16]
 80045aa:	9f08      	ldr	r7, [sp, #32]
 80045ac:	e73b      	b.n	8004426 <_dtoa_r+0x736>
 80045ae:	9a07      	ldr	r2, [sp, #28]
 80045b0:	e767      	b.n	8004482 <_dtoa_r+0x792>
 80045b2:	9b06      	ldr	r3, [sp, #24]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	dc18      	bgt.n	80045ea <_dtoa_r+0x8fa>
 80045b8:	f1ba 0f00 	cmp.w	sl, #0
 80045bc:	d115      	bne.n	80045ea <_dtoa_r+0x8fa>
 80045be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80045c2:	b993      	cbnz	r3, 80045ea <_dtoa_r+0x8fa>
 80045c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80045c8:	0d1b      	lsrs	r3, r3, #20
 80045ca:	051b      	lsls	r3, r3, #20
 80045cc:	b183      	cbz	r3, 80045f0 <_dtoa_r+0x900>
 80045ce:	9b04      	ldr	r3, [sp, #16]
 80045d0:	3301      	adds	r3, #1
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	9b05      	ldr	r3, [sp, #20]
 80045d6:	3301      	adds	r3, #1
 80045d8:	9305      	str	r3, [sp, #20]
 80045da:	f04f 0801 	mov.w	r8, #1
 80045de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f af6a 	bne.w	80044ba <_dtoa_r+0x7ca>
 80045e6:	2001      	movs	r0, #1
 80045e8:	e76f      	b.n	80044ca <_dtoa_r+0x7da>
 80045ea:	f04f 0800 	mov.w	r8, #0
 80045ee:	e7f6      	b.n	80045de <_dtoa_r+0x8ee>
 80045f0:	4698      	mov	r8, r3
 80045f2:	e7f4      	b.n	80045de <_dtoa_r+0x8ee>
 80045f4:	f43f af7d 	beq.w	80044f2 <_dtoa_r+0x802>
 80045f8:	4618      	mov	r0, r3
 80045fa:	301c      	adds	r0, #28
 80045fc:	e772      	b.n	80044e4 <_dtoa_r+0x7f4>
 80045fe:	9b03      	ldr	r3, [sp, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc37      	bgt.n	8004674 <_dtoa_r+0x984>
 8004604:	9b06      	ldr	r3, [sp, #24]
 8004606:	2b02      	cmp	r3, #2
 8004608:	dd34      	ble.n	8004674 <_dtoa_r+0x984>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	9302      	str	r3, [sp, #8]
 800460e:	9b02      	ldr	r3, [sp, #8]
 8004610:	b96b      	cbnz	r3, 800462e <_dtoa_r+0x93e>
 8004612:	4631      	mov	r1, r6
 8004614:	2205      	movs	r2, #5
 8004616:	4620      	mov	r0, r4
 8004618:	f000 fbf4 	bl	8004e04 <__multadd>
 800461c:	4601      	mov	r1, r0
 800461e:	4606      	mov	r6, r0
 8004620:	ee18 0a10 	vmov	r0, s16
 8004624:	f000 fe0e 	bl	8005244 <__mcmp>
 8004628:	2800      	cmp	r0, #0
 800462a:	f73f adbb 	bgt.w	80041a4 <_dtoa_r+0x4b4>
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	9d01      	ldr	r5, [sp, #4]
 8004632:	43db      	mvns	r3, r3
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	f04f 0800 	mov.w	r8, #0
 800463a:	4631      	mov	r1, r6
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fbbf 	bl	8004dc0 <_Bfree>
 8004642:	2f00      	cmp	r7, #0
 8004644:	f43f aea4 	beq.w	8004390 <_dtoa_r+0x6a0>
 8004648:	f1b8 0f00 	cmp.w	r8, #0
 800464c:	d005      	beq.n	800465a <_dtoa_r+0x96a>
 800464e:	45b8      	cmp	r8, r7
 8004650:	d003      	beq.n	800465a <_dtoa_r+0x96a>
 8004652:	4641      	mov	r1, r8
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fbb3 	bl	8004dc0 <_Bfree>
 800465a:	4639      	mov	r1, r7
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fbaf 	bl	8004dc0 <_Bfree>
 8004662:	e695      	b.n	8004390 <_dtoa_r+0x6a0>
 8004664:	2600      	movs	r6, #0
 8004666:	4637      	mov	r7, r6
 8004668:	e7e1      	b.n	800462e <_dtoa_r+0x93e>
 800466a:	9700      	str	r7, [sp, #0]
 800466c:	4637      	mov	r7, r6
 800466e:	e599      	b.n	80041a4 <_dtoa_r+0x4b4>
 8004670:	40240000 	.word	0x40240000
 8004674:	9b08      	ldr	r3, [sp, #32]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80ca 	beq.w	8004810 <_dtoa_r+0xb20>
 800467c:	9b03      	ldr	r3, [sp, #12]
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	2d00      	cmp	r5, #0
 8004682:	dd05      	ble.n	8004690 <_dtoa_r+0x9a0>
 8004684:	4639      	mov	r1, r7
 8004686:	462a      	mov	r2, r5
 8004688:	4620      	mov	r0, r4
 800468a:	f000 fd6b 	bl	8005164 <__lshift>
 800468e:	4607      	mov	r7, r0
 8004690:	f1b8 0f00 	cmp.w	r8, #0
 8004694:	d05b      	beq.n	800474e <_dtoa_r+0xa5e>
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4620      	mov	r0, r4
 800469a:	f000 fb51 	bl	8004d40 <_Balloc>
 800469e:	4605      	mov	r5, r0
 80046a0:	b928      	cbnz	r0, 80046ae <_dtoa_r+0x9be>
 80046a2:	4b87      	ldr	r3, [pc, #540]	; (80048c0 <_dtoa_r+0xbd0>)
 80046a4:	4602      	mov	r2, r0
 80046a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80046aa:	f7ff bb3b 	b.w	8003d24 <_dtoa_r+0x34>
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	3202      	adds	r2, #2
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	f107 010c 	add.w	r1, r7, #12
 80046b8:	300c      	adds	r0, #12
 80046ba:	f000 fb33 	bl	8004d24 <memcpy>
 80046be:	2201      	movs	r2, #1
 80046c0:	4629      	mov	r1, r5
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 fd4e 	bl	8005164 <__lshift>
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	f103 0901 	add.w	r9, r3, #1
 80046ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	9305      	str	r3, [sp, #20]
 80046d6:	f00a 0301 	and.w	r3, sl, #1
 80046da:	46b8      	mov	r8, r7
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	4607      	mov	r7, r0
 80046e0:	4631      	mov	r1, r6
 80046e2:	ee18 0a10 	vmov	r0, s16
 80046e6:	f7ff fa77 	bl	8003bd8 <quorem>
 80046ea:	4641      	mov	r1, r8
 80046ec:	9002      	str	r0, [sp, #8]
 80046ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80046f2:	ee18 0a10 	vmov	r0, s16
 80046f6:	f000 fda5 	bl	8005244 <__mcmp>
 80046fa:	463a      	mov	r2, r7
 80046fc:	9003      	str	r0, [sp, #12]
 80046fe:	4631      	mov	r1, r6
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fdbb 	bl	800527c <__mdiff>
 8004706:	68c2      	ldr	r2, [r0, #12]
 8004708:	f109 3bff 	add.w	fp, r9, #4294967295
 800470c:	4605      	mov	r5, r0
 800470e:	bb02      	cbnz	r2, 8004752 <_dtoa_r+0xa62>
 8004710:	4601      	mov	r1, r0
 8004712:	ee18 0a10 	vmov	r0, s16
 8004716:	f000 fd95 	bl	8005244 <__mcmp>
 800471a:	4602      	mov	r2, r0
 800471c:	4629      	mov	r1, r5
 800471e:	4620      	mov	r0, r4
 8004720:	9207      	str	r2, [sp, #28]
 8004722:	f000 fb4d 	bl	8004dc0 <_Bfree>
 8004726:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800472a:	ea43 0102 	orr.w	r1, r3, r2
 800472e:	9b04      	ldr	r3, [sp, #16]
 8004730:	430b      	orrs	r3, r1
 8004732:	464d      	mov	r5, r9
 8004734:	d10f      	bne.n	8004756 <_dtoa_r+0xa66>
 8004736:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800473a:	d02a      	beq.n	8004792 <_dtoa_r+0xaa2>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dd02      	ble.n	8004748 <_dtoa_r+0xa58>
 8004742:	9b02      	ldr	r3, [sp, #8]
 8004744:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004748:	f88b a000 	strb.w	sl, [fp]
 800474c:	e775      	b.n	800463a <_dtoa_r+0x94a>
 800474e:	4638      	mov	r0, r7
 8004750:	e7ba      	b.n	80046c8 <_dtoa_r+0x9d8>
 8004752:	2201      	movs	r2, #1
 8004754:	e7e2      	b.n	800471c <_dtoa_r+0xa2c>
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	db04      	blt.n	8004766 <_dtoa_r+0xa76>
 800475c:	9906      	ldr	r1, [sp, #24]
 800475e:	430b      	orrs	r3, r1
 8004760:	9904      	ldr	r1, [sp, #16]
 8004762:	430b      	orrs	r3, r1
 8004764:	d122      	bne.n	80047ac <_dtoa_r+0xabc>
 8004766:	2a00      	cmp	r2, #0
 8004768:	ddee      	ble.n	8004748 <_dtoa_r+0xa58>
 800476a:	ee18 1a10 	vmov	r1, s16
 800476e:	2201      	movs	r2, #1
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fcf7 	bl	8005164 <__lshift>
 8004776:	4631      	mov	r1, r6
 8004778:	ee08 0a10 	vmov	s16, r0
 800477c:	f000 fd62 	bl	8005244 <__mcmp>
 8004780:	2800      	cmp	r0, #0
 8004782:	dc03      	bgt.n	800478c <_dtoa_r+0xa9c>
 8004784:	d1e0      	bne.n	8004748 <_dtoa_r+0xa58>
 8004786:	f01a 0f01 	tst.w	sl, #1
 800478a:	d0dd      	beq.n	8004748 <_dtoa_r+0xa58>
 800478c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004790:	d1d7      	bne.n	8004742 <_dtoa_r+0xa52>
 8004792:	2339      	movs	r3, #57	; 0x39
 8004794:	f88b 3000 	strb.w	r3, [fp]
 8004798:	462b      	mov	r3, r5
 800479a:	461d      	mov	r5, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80047a2:	2a39      	cmp	r2, #57	; 0x39
 80047a4:	d071      	beq.n	800488a <_dtoa_r+0xb9a>
 80047a6:	3201      	adds	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e746      	b.n	800463a <_dtoa_r+0x94a>
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	dd07      	ble.n	80047c0 <_dtoa_r+0xad0>
 80047b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80047b4:	d0ed      	beq.n	8004792 <_dtoa_r+0xaa2>
 80047b6:	f10a 0301 	add.w	r3, sl, #1
 80047ba:	f88b 3000 	strb.w	r3, [fp]
 80047be:	e73c      	b.n	800463a <_dtoa_r+0x94a>
 80047c0:	9b05      	ldr	r3, [sp, #20]
 80047c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80047c6:	4599      	cmp	r9, r3
 80047c8:	d047      	beq.n	800485a <_dtoa_r+0xb6a>
 80047ca:	ee18 1a10 	vmov	r1, s16
 80047ce:	2300      	movs	r3, #0
 80047d0:	220a      	movs	r2, #10
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 fb16 	bl	8004e04 <__multadd>
 80047d8:	45b8      	cmp	r8, r7
 80047da:	ee08 0a10 	vmov	s16, r0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f04f 020a 	mov.w	r2, #10
 80047e6:	4641      	mov	r1, r8
 80047e8:	4620      	mov	r0, r4
 80047ea:	d106      	bne.n	80047fa <_dtoa_r+0xb0a>
 80047ec:	f000 fb0a 	bl	8004e04 <__multadd>
 80047f0:	4680      	mov	r8, r0
 80047f2:	4607      	mov	r7, r0
 80047f4:	f109 0901 	add.w	r9, r9, #1
 80047f8:	e772      	b.n	80046e0 <_dtoa_r+0x9f0>
 80047fa:	f000 fb03 	bl	8004e04 <__multadd>
 80047fe:	4639      	mov	r1, r7
 8004800:	4680      	mov	r8, r0
 8004802:	2300      	movs	r3, #0
 8004804:	220a      	movs	r2, #10
 8004806:	4620      	mov	r0, r4
 8004808:	f000 fafc 	bl	8004e04 <__multadd>
 800480c:	4607      	mov	r7, r0
 800480e:	e7f1      	b.n	80047f4 <_dtoa_r+0xb04>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	9302      	str	r3, [sp, #8]
 8004814:	9d01      	ldr	r5, [sp, #4]
 8004816:	ee18 0a10 	vmov	r0, s16
 800481a:	4631      	mov	r1, r6
 800481c:	f7ff f9dc 	bl	8003bd8 <quorem>
 8004820:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004824:	9b01      	ldr	r3, [sp, #4]
 8004826:	f805 ab01 	strb.w	sl, [r5], #1
 800482a:	1aea      	subs	r2, r5, r3
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	4293      	cmp	r3, r2
 8004830:	dd09      	ble.n	8004846 <_dtoa_r+0xb56>
 8004832:	ee18 1a10 	vmov	r1, s16
 8004836:	2300      	movs	r3, #0
 8004838:	220a      	movs	r2, #10
 800483a:	4620      	mov	r0, r4
 800483c:	f000 fae2 	bl	8004e04 <__multadd>
 8004840:	ee08 0a10 	vmov	s16, r0
 8004844:	e7e7      	b.n	8004816 <_dtoa_r+0xb26>
 8004846:	9b02      	ldr	r3, [sp, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	bfc8      	it	gt
 800484c:	461d      	movgt	r5, r3
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	bfd8      	it	le
 8004852:	2501      	movle	r5, #1
 8004854:	441d      	add	r5, r3
 8004856:	f04f 0800 	mov.w	r8, #0
 800485a:	ee18 1a10 	vmov	r1, s16
 800485e:	2201      	movs	r2, #1
 8004860:	4620      	mov	r0, r4
 8004862:	f000 fc7f 	bl	8005164 <__lshift>
 8004866:	4631      	mov	r1, r6
 8004868:	ee08 0a10 	vmov	s16, r0
 800486c:	f000 fcea 	bl	8005244 <__mcmp>
 8004870:	2800      	cmp	r0, #0
 8004872:	dc91      	bgt.n	8004798 <_dtoa_r+0xaa8>
 8004874:	d102      	bne.n	800487c <_dtoa_r+0xb8c>
 8004876:	f01a 0f01 	tst.w	sl, #1
 800487a:	d18d      	bne.n	8004798 <_dtoa_r+0xaa8>
 800487c:	462b      	mov	r3, r5
 800487e:	461d      	mov	r5, r3
 8004880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004884:	2a30      	cmp	r2, #48	; 0x30
 8004886:	d0fa      	beq.n	800487e <_dtoa_r+0xb8e>
 8004888:	e6d7      	b.n	800463a <_dtoa_r+0x94a>
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d184      	bne.n	800479a <_dtoa_r+0xaaa>
 8004890:	9b00      	ldr	r3, [sp, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	2331      	movs	r3, #49	; 0x31
 8004898:	7013      	strb	r3, [r2, #0]
 800489a:	e6ce      	b.n	800463a <_dtoa_r+0x94a>
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <_dtoa_r+0xbd4>)
 800489e:	f7ff ba95 	b.w	8003dcc <_dtoa_r+0xdc>
 80048a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f aa6e 	bne.w	8003d86 <_dtoa_r+0x96>
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <_dtoa_r+0xbd8>)
 80048ac:	f7ff ba8e 	b.w	8003dcc <_dtoa_r+0xdc>
 80048b0:	9b02      	ldr	r3, [sp, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dcae      	bgt.n	8004814 <_dtoa_r+0xb24>
 80048b6:	9b06      	ldr	r3, [sp, #24]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	f73f aea8 	bgt.w	800460e <_dtoa_r+0x91e>
 80048be:	e7a9      	b.n	8004814 <_dtoa_r+0xb24>
 80048c0:	08005da7 	.word	0x08005da7
 80048c4:	08005d04 	.word	0x08005d04
 80048c8:	08005d28 	.word	0x08005d28

080048cc <__sflush_r>:
 80048cc:	898a      	ldrh	r2, [r1, #12]
 80048ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	4605      	mov	r5, r0
 80048d4:	0710      	lsls	r0, r2, #28
 80048d6:	460c      	mov	r4, r1
 80048d8:	d458      	bmi.n	800498c <__sflush_r+0xc0>
 80048da:	684b      	ldr	r3, [r1, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dc05      	bgt.n	80048ec <__sflush_r+0x20>
 80048e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dc02      	bgt.n	80048ec <__sflush_r+0x20>
 80048e6:	2000      	movs	r0, #0
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ee:	2e00      	cmp	r6, #0
 80048f0:	d0f9      	beq.n	80048e6 <__sflush_r+0x1a>
 80048f2:	2300      	movs	r3, #0
 80048f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048f8:	682f      	ldr	r7, [r5, #0]
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	d032      	beq.n	8004964 <__sflush_r+0x98>
 80048fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	075a      	lsls	r2, r3, #29
 8004904:	d505      	bpl.n	8004912 <__sflush_r+0x46>
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	1ac0      	subs	r0, r0, r3
 800490a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800490c:	b10b      	cbz	r3, 8004912 <__sflush_r+0x46>
 800490e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004910:	1ac0      	subs	r0, r0, r3
 8004912:	2300      	movs	r3, #0
 8004914:	4602      	mov	r2, r0
 8004916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004918:	6a21      	ldr	r1, [r4, #32]
 800491a:	4628      	mov	r0, r5
 800491c:	47b0      	blx	r6
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	d106      	bne.n	8004932 <__sflush_r+0x66>
 8004924:	6829      	ldr	r1, [r5, #0]
 8004926:	291d      	cmp	r1, #29
 8004928:	d82c      	bhi.n	8004984 <__sflush_r+0xb8>
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <__sflush_r+0x108>)
 800492c:	40ca      	lsrs	r2, r1
 800492e:	07d6      	lsls	r6, r2, #31
 8004930:	d528      	bpl.n	8004984 <__sflush_r+0xb8>
 8004932:	2200      	movs	r2, #0
 8004934:	6062      	str	r2, [r4, #4]
 8004936:	04d9      	lsls	r1, r3, #19
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	d504      	bpl.n	8004948 <__sflush_r+0x7c>
 800493e:	1c42      	adds	r2, r0, #1
 8004940:	d101      	bne.n	8004946 <__sflush_r+0x7a>
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	b903      	cbnz	r3, 8004948 <__sflush_r+0x7c>
 8004946:	6560      	str	r0, [r4, #84]	; 0x54
 8004948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800494a:	602f      	str	r7, [r5, #0]
 800494c:	2900      	cmp	r1, #0
 800494e:	d0ca      	beq.n	80048e6 <__sflush_r+0x1a>
 8004950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004954:	4299      	cmp	r1, r3
 8004956:	d002      	beq.n	800495e <__sflush_r+0x92>
 8004958:	4628      	mov	r0, r5
 800495a:	f000 fd8b 	bl	8005474 <_free_r>
 800495e:	2000      	movs	r0, #0
 8004960:	6360      	str	r0, [r4, #52]	; 0x34
 8004962:	e7c1      	b.n	80048e8 <__sflush_r+0x1c>
 8004964:	6a21      	ldr	r1, [r4, #32]
 8004966:	2301      	movs	r3, #1
 8004968:	4628      	mov	r0, r5
 800496a:	47b0      	blx	r6
 800496c:	1c41      	adds	r1, r0, #1
 800496e:	d1c7      	bne.n	8004900 <__sflush_r+0x34>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0c4      	beq.n	8004900 <__sflush_r+0x34>
 8004976:	2b1d      	cmp	r3, #29
 8004978:	d001      	beq.n	800497e <__sflush_r+0xb2>
 800497a:	2b16      	cmp	r3, #22
 800497c:	d101      	bne.n	8004982 <__sflush_r+0xb6>
 800497e:	602f      	str	r7, [r5, #0]
 8004980:	e7b1      	b.n	80048e6 <__sflush_r+0x1a>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	e7ad      	b.n	80048e8 <__sflush_r+0x1c>
 800498c:	690f      	ldr	r7, [r1, #16]
 800498e:	2f00      	cmp	r7, #0
 8004990:	d0a9      	beq.n	80048e6 <__sflush_r+0x1a>
 8004992:	0793      	lsls	r3, r2, #30
 8004994:	680e      	ldr	r6, [r1, #0]
 8004996:	bf08      	it	eq
 8004998:	694b      	ldreq	r3, [r1, #20]
 800499a:	600f      	str	r7, [r1, #0]
 800499c:	bf18      	it	ne
 800499e:	2300      	movne	r3, #0
 80049a0:	eba6 0807 	sub.w	r8, r6, r7
 80049a4:	608b      	str	r3, [r1, #8]
 80049a6:	f1b8 0f00 	cmp.w	r8, #0
 80049aa:	dd9c      	ble.n	80048e6 <__sflush_r+0x1a>
 80049ac:	6a21      	ldr	r1, [r4, #32]
 80049ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049b0:	4643      	mov	r3, r8
 80049b2:	463a      	mov	r2, r7
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b0      	blx	r6
 80049b8:	2800      	cmp	r0, #0
 80049ba:	dc06      	bgt.n	80049ca <__sflush_r+0xfe>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	e78e      	b.n	80048e8 <__sflush_r+0x1c>
 80049ca:	4407      	add	r7, r0
 80049cc:	eba8 0800 	sub.w	r8, r8, r0
 80049d0:	e7e9      	b.n	80049a6 <__sflush_r+0xda>
 80049d2:	bf00      	nop
 80049d4:	20400001 	.word	0x20400001

080049d8 <_fflush_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	690b      	ldr	r3, [r1, #16]
 80049dc:	4605      	mov	r5, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b913      	cbnz	r3, 80049e8 <_fflush_r+0x10>
 80049e2:	2500      	movs	r5, #0
 80049e4:	4628      	mov	r0, r5
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	b118      	cbz	r0, 80049f2 <_fflush_r+0x1a>
 80049ea:	6983      	ldr	r3, [r0, #24]
 80049ec:	b90b      	cbnz	r3, 80049f2 <_fflush_r+0x1a>
 80049ee:	f000 f887 	bl	8004b00 <__sinit>
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <_fflush_r+0x6c>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	d11b      	bne.n	8004a30 <_fflush_r+0x58>
 80049f8:	686c      	ldr	r4, [r5, #4]
 80049fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ef      	beq.n	80049e2 <_fflush_r+0xa>
 8004a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a04:	07d0      	lsls	r0, r2, #31
 8004a06:	d404      	bmi.n	8004a12 <_fflush_r+0x3a>
 8004a08:	0599      	lsls	r1, r3, #22
 8004a0a:	d402      	bmi.n	8004a12 <_fflush_r+0x3a>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0e:	f000 f91a 	bl	8004c46 <__retarget_lock_acquire_recursive>
 8004a12:	4628      	mov	r0, r5
 8004a14:	4621      	mov	r1, r4
 8004a16:	f7ff ff59 	bl	80048cc <__sflush_r>
 8004a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a1c:	07da      	lsls	r2, r3, #31
 8004a1e:	4605      	mov	r5, r0
 8004a20:	d4e0      	bmi.n	80049e4 <_fflush_r+0xc>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	059b      	lsls	r3, r3, #22
 8004a26:	d4dd      	bmi.n	80049e4 <_fflush_r+0xc>
 8004a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2a:	f000 f90d 	bl	8004c48 <__retarget_lock_release_recursive>
 8004a2e:	e7d9      	b.n	80049e4 <_fflush_r+0xc>
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <_fflush_r+0x70>)
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d101      	bne.n	8004a3a <_fflush_r+0x62>
 8004a36:	68ac      	ldr	r4, [r5, #8]
 8004a38:	e7df      	b.n	80049fa <_fflush_r+0x22>
 8004a3a:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <_fflush_r+0x74>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	bf08      	it	eq
 8004a40:	68ec      	ldreq	r4, [r5, #12]
 8004a42:	e7da      	b.n	80049fa <_fflush_r+0x22>
 8004a44:	08005dd8 	.word	0x08005dd8
 8004a48:	08005df8 	.word	0x08005df8
 8004a4c:	08005db8 	.word	0x08005db8

08004a50 <std>:
 8004a50:	2300      	movs	r3, #0
 8004a52:	b510      	push	{r4, lr}
 8004a54:	4604      	mov	r4, r0
 8004a56:	e9c0 3300 	strd	r3, r3, [r0]
 8004a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a5e:	6083      	str	r3, [r0, #8]
 8004a60:	8181      	strh	r1, [r0, #12]
 8004a62:	6643      	str	r3, [r0, #100]	; 0x64
 8004a64:	81c2      	strh	r2, [r0, #14]
 8004a66:	6183      	str	r3, [r0, #24]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	305c      	adds	r0, #92	; 0x5c
 8004a6e:	f7fe faf3 	bl	8003058 <memset>
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <std+0x38>)
 8004a74:	6263      	str	r3, [r4, #36]	; 0x24
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x3c>)
 8004a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x40>)
 8004a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <std+0x44>)
 8004a80:	6224      	str	r4, [r4, #32]
 8004a82:	6323      	str	r3, [r4, #48]	; 0x30
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	bf00      	nop
 8004a88:	08005909 	.word	0x08005909
 8004a8c:	0800592b 	.word	0x0800592b
 8004a90:	08005963 	.word	0x08005963
 8004a94:	08005987 	.word	0x08005987

08004a98 <_cleanup_r>:
 8004a98:	4901      	ldr	r1, [pc, #4]	; (8004aa0 <_cleanup_r+0x8>)
 8004a9a:	f000 b8af 	b.w	8004bfc <_fwalk_reent>
 8004a9e:	bf00      	nop
 8004aa0:	080049d9 	.word	0x080049d9

08004aa4 <__sfmoreglue>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	2268      	movs	r2, #104	; 0x68
 8004aa8:	1e4d      	subs	r5, r1, #1
 8004aaa:	4355      	muls	r5, r2
 8004aac:	460e      	mov	r6, r1
 8004aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ab2:	f000 fd4b 	bl	800554c <_malloc_r>
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	b140      	cbz	r0, 8004acc <__sfmoreglue+0x28>
 8004aba:	2100      	movs	r1, #0
 8004abc:	e9c0 1600 	strd	r1, r6, [r0]
 8004ac0:	300c      	adds	r0, #12
 8004ac2:	60a0      	str	r0, [r4, #8]
 8004ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ac8:	f7fe fac6 	bl	8003058 <memset>
 8004acc:	4620      	mov	r0, r4
 8004ace:	bd70      	pop	{r4, r5, r6, pc}

08004ad0 <__sfp_lock_acquire>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__sfp_lock_acquire+0x8>)
 8004ad2:	f000 b8b8 	b.w	8004c46 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20000485 	.word	0x20000485

08004adc <__sfp_lock_release>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__sfp_lock_release+0x8>)
 8004ade:	f000 b8b3 	b.w	8004c48 <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	20000485 	.word	0x20000485

08004ae8 <__sinit_lock_acquire>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__sinit_lock_acquire+0x8>)
 8004aea:	f000 b8ac 	b.w	8004c46 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000486 	.word	0x20000486

08004af4 <__sinit_lock_release>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__sinit_lock_release+0x8>)
 8004af6:	f000 b8a7 	b.w	8004c48 <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000486 	.word	0x20000486

08004b00 <__sinit>:
 8004b00:	b510      	push	{r4, lr}
 8004b02:	4604      	mov	r4, r0
 8004b04:	f7ff fff0 	bl	8004ae8 <__sinit_lock_acquire>
 8004b08:	69a3      	ldr	r3, [r4, #24]
 8004b0a:	b11b      	cbz	r3, 8004b14 <__sinit+0x14>
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	f7ff bff0 	b.w	8004af4 <__sinit_lock_release>
 8004b14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b18:	6523      	str	r3, [r4, #80]	; 0x50
 8004b1a:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <__sinit+0x68>)
 8004b1c:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <__sinit+0x6c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	bf04      	itt	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	61a3      	streq	r3, [r4, #24]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 f820 	bl	8004b70 <__sfp>
 8004b30:	6060      	str	r0, [r4, #4]
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 f81c 	bl	8004b70 <__sfp>
 8004b38:	60a0      	str	r0, [r4, #8]
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 f818 	bl	8004b70 <__sfp>
 8004b40:	2200      	movs	r2, #0
 8004b42:	60e0      	str	r0, [r4, #12]
 8004b44:	2104      	movs	r1, #4
 8004b46:	6860      	ldr	r0, [r4, #4]
 8004b48:	f7ff ff82 	bl	8004a50 <std>
 8004b4c:	68a0      	ldr	r0, [r4, #8]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2109      	movs	r1, #9
 8004b52:	f7ff ff7d 	bl	8004a50 <std>
 8004b56:	68e0      	ldr	r0, [r4, #12]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	2112      	movs	r1, #18
 8004b5c:	f7ff ff78 	bl	8004a50 <std>
 8004b60:	2301      	movs	r3, #1
 8004b62:	61a3      	str	r3, [r4, #24]
 8004b64:	e7d2      	b.n	8004b0c <__sinit+0xc>
 8004b66:	bf00      	nop
 8004b68:	08005cf0 	.word	0x08005cf0
 8004b6c:	08004a99 	.word	0x08004a99

08004b70 <__sfp>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	4607      	mov	r7, r0
 8004b74:	f7ff ffac 	bl	8004ad0 <__sfp_lock_acquire>
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <__sfp+0x84>)
 8004b7a:	681e      	ldr	r6, [r3, #0]
 8004b7c:	69b3      	ldr	r3, [r6, #24]
 8004b7e:	b913      	cbnz	r3, 8004b86 <__sfp+0x16>
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff ffbd 	bl	8004b00 <__sinit>
 8004b86:	3648      	adds	r6, #72	; 0x48
 8004b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	d503      	bpl.n	8004b98 <__sfp+0x28>
 8004b90:	6833      	ldr	r3, [r6, #0]
 8004b92:	b30b      	cbz	r3, 8004bd8 <__sfp+0x68>
 8004b94:	6836      	ldr	r6, [r6, #0]
 8004b96:	e7f7      	b.n	8004b88 <__sfp+0x18>
 8004b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b9c:	b9d5      	cbnz	r5, 8004bd4 <__sfp+0x64>
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <__sfp+0x88>)
 8004ba0:	60e3      	str	r3, [r4, #12]
 8004ba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ba6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ba8:	f000 f84c 	bl	8004c44 <__retarget_lock_init_recursive>
 8004bac:	f7ff ff96 	bl	8004adc <__sfp_lock_release>
 8004bb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bb8:	6025      	str	r5, [r4, #0]
 8004bba:	61a5      	str	r5, [r4, #24]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bc4:	f7fe fa48 	bl	8003058 <memset>
 8004bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd4:	3468      	adds	r4, #104	; 0x68
 8004bd6:	e7d9      	b.n	8004b8c <__sfp+0x1c>
 8004bd8:	2104      	movs	r1, #4
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7ff ff62 	bl	8004aa4 <__sfmoreglue>
 8004be0:	4604      	mov	r4, r0
 8004be2:	6030      	str	r0, [r6, #0]
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1d5      	bne.n	8004b94 <__sfp+0x24>
 8004be8:	f7ff ff78 	bl	8004adc <__sfp_lock_release>
 8004bec:	230c      	movs	r3, #12
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	e7ee      	b.n	8004bd0 <__sfp+0x60>
 8004bf2:	bf00      	nop
 8004bf4:	08005cf0 	.word	0x08005cf0
 8004bf8:	ffff0001 	.word	0xffff0001

08004bfc <_fwalk_reent>:
 8004bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c00:	4606      	mov	r6, r0
 8004c02:	4688      	mov	r8, r1
 8004c04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c08:	2700      	movs	r7, #0
 8004c0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c12:	d505      	bpl.n	8004c20 <_fwalk_reent+0x24>
 8004c14:	6824      	ldr	r4, [r4, #0]
 8004c16:	2c00      	cmp	r4, #0
 8004c18:	d1f7      	bne.n	8004c0a <_fwalk_reent+0xe>
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c20:	89ab      	ldrh	r3, [r5, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d907      	bls.n	8004c36 <_fwalk_reent+0x3a>
 8004c26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d003      	beq.n	8004c36 <_fwalk_reent+0x3a>
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4630      	mov	r0, r6
 8004c32:	47c0      	blx	r8
 8004c34:	4307      	orrs	r7, r0
 8004c36:	3568      	adds	r5, #104	; 0x68
 8004c38:	e7e9      	b.n	8004c0e <_fwalk_reent+0x12>
	...

08004c3c <_localeconv_r>:
 8004c3c:	4800      	ldr	r0, [pc, #0]	; (8004c40 <_localeconv_r+0x4>)
 8004c3e:	4770      	bx	lr
 8004c40:	20000170 	.word	0x20000170

08004c44 <__retarget_lock_init_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__retarget_lock_acquire_recursive>:
 8004c46:	4770      	bx	lr

08004c48 <__retarget_lock_release_recursive>:
 8004c48:	4770      	bx	lr

08004c4a <__swhatbuf_r>:
 8004c4a:	b570      	push	{r4, r5, r6, lr}
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c52:	2900      	cmp	r1, #0
 8004c54:	b096      	sub	sp, #88	; 0x58
 8004c56:	4614      	mov	r4, r2
 8004c58:	461d      	mov	r5, r3
 8004c5a:	da08      	bge.n	8004c6e <__swhatbuf_r+0x24>
 8004c5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	602a      	str	r2, [r5, #0]
 8004c64:	061a      	lsls	r2, r3, #24
 8004c66:	d410      	bmi.n	8004c8a <__swhatbuf_r+0x40>
 8004c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c6c:	e00e      	b.n	8004c8c <__swhatbuf_r+0x42>
 8004c6e:	466a      	mov	r2, sp
 8004c70:	f000 fee0 	bl	8005a34 <_fstat_r>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	dbf1      	blt.n	8004c5c <__swhatbuf_r+0x12>
 8004c78:	9a01      	ldr	r2, [sp, #4]
 8004c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c82:	425a      	negs	r2, r3
 8004c84:	415a      	adcs	r2, r3
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	e7ee      	b.n	8004c68 <__swhatbuf_r+0x1e>
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	b016      	add	sp, #88	; 0x58
 8004c92:	bd70      	pop	{r4, r5, r6, pc}

08004c94 <__smakebuf_r>:
 8004c94:	898b      	ldrh	r3, [r1, #12]
 8004c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c98:	079d      	lsls	r5, r3, #30
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	d507      	bpl.n	8004cb0 <__smakebuf_r+0x1c>
 8004ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	6163      	str	r3, [r4, #20]
 8004cac:	b002      	add	sp, #8
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	ab01      	add	r3, sp, #4
 8004cb2:	466a      	mov	r2, sp
 8004cb4:	f7ff ffc9 	bl	8004c4a <__swhatbuf_r>
 8004cb8:	9900      	ldr	r1, [sp, #0]
 8004cba:	4605      	mov	r5, r0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f000 fc45 	bl	800554c <_malloc_r>
 8004cc2:	b948      	cbnz	r0, 8004cd8 <__smakebuf_r+0x44>
 8004cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc8:	059a      	lsls	r2, r3, #22
 8004cca:	d4ef      	bmi.n	8004cac <__smakebuf_r+0x18>
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	e7e3      	b.n	8004ca0 <__smakebuf_r+0xc>
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <__smakebuf_r+0x7c>)
 8004cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	6020      	str	r0, [r4, #0]
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	9b00      	ldr	r3, [sp, #0]
 8004ce8:	6163      	str	r3, [r4, #20]
 8004cea:	9b01      	ldr	r3, [sp, #4]
 8004cec:	6120      	str	r0, [r4, #16]
 8004cee:	b15b      	cbz	r3, 8004d08 <__smakebuf_r+0x74>
 8004cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f000 feaf 	bl	8005a58 <_isatty_r>
 8004cfa:	b128      	cbz	r0, 8004d08 <__smakebuf_r+0x74>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	89a0      	ldrh	r0, [r4, #12]
 8004d0a:	4305      	orrs	r5, r0
 8004d0c:	81a5      	strh	r5, [r4, #12]
 8004d0e:	e7cd      	b.n	8004cac <__smakebuf_r+0x18>
 8004d10:	08004a99 	.word	0x08004a99

08004d14 <malloc>:
 8004d14:	4b02      	ldr	r3, [pc, #8]	; (8004d20 <malloc+0xc>)
 8004d16:	4601      	mov	r1, r0
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	f000 bc17 	b.w	800554c <_malloc_r>
 8004d1e:	bf00      	nop
 8004d20:	2000001c 	.word	0x2000001c

08004d24 <memcpy>:
 8004d24:	440a      	add	r2, r1
 8004d26:	4291      	cmp	r1, r2
 8004d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d2c:	d100      	bne.n	8004d30 <memcpy+0xc>
 8004d2e:	4770      	bx	lr
 8004d30:	b510      	push	{r4, lr}
 8004d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d3a:	4291      	cmp	r1, r2
 8004d3c:	d1f9      	bne.n	8004d32 <memcpy+0xe>
 8004d3e:	bd10      	pop	{r4, pc}

08004d40 <_Balloc>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d44:	4604      	mov	r4, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	b976      	cbnz	r6, 8004d68 <_Balloc+0x28>
 8004d4a:	2010      	movs	r0, #16
 8004d4c:	f7ff ffe2 	bl	8004d14 <malloc>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6260      	str	r0, [r4, #36]	; 0x24
 8004d54:	b920      	cbnz	r0, 8004d60 <_Balloc+0x20>
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <_Balloc+0x78>)
 8004d58:	4818      	ldr	r0, [pc, #96]	; (8004dbc <_Balloc+0x7c>)
 8004d5a:	2166      	movs	r1, #102	; 0x66
 8004d5c:	f000 fe2a 	bl	80059b4 <__assert_func>
 8004d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d64:	6006      	str	r6, [r0, #0]
 8004d66:	60c6      	str	r6, [r0, #12]
 8004d68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d6a:	68f3      	ldr	r3, [r6, #12]
 8004d6c:	b183      	cbz	r3, 8004d90 <_Balloc+0x50>
 8004d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d76:	b9b8      	cbnz	r0, 8004da8 <_Balloc+0x68>
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f605 	lsl.w	r6, r1, r5
 8004d7e:	1d72      	adds	r2, r6, #5
 8004d80:	0092      	lsls	r2, r2, #2
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fb60 	bl	8005448 <_calloc_r>
 8004d88:	b160      	cbz	r0, 8004da4 <_Balloc+0x64>
 8004d8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d8e:	e00e      	b.n	8004dae <_Balloc+0x6e>
 8004d90:	2221      	movs	r2, #33	; 0x21
 8004d92:	2104      	movs	r1, #4
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fb57 	bl	8005448 <_calloc_r>
 8004d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d9c:	60f0      	str	r0, [r6, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e4      	bne.n	8004d6e <_Balloc+0x2e>
 8004da4:	2000      	movs	r0, #0
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	6802      	ldr	r2, [r0, #0]
 8004daa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004dae:	2300      	movs	r3, #0
 8004db0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004db4:	e7f7      	b.n	8004da6 <_Balloc+0x66>
 8004db6:	bf00      	nop
 8004db8:	08005d35 	.word	0x08005d35
 8004dbc:	08005e18 	.word	0x08005e18

08004dc0 <_Bfree>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	b976      	cbnz	r6, 8004de8 <_Bfree+0x28>
 8004dca:	2010      	movs	r0, #16
 8004dcc:	f7ff ffa2 	bl	8004d14 <malloc>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6268      	str	r0, [r5, #36]	; 0x24
 8004dd4:	b920      	cbnz	r0, 8004de0 <_Bfree+0x20>
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <_Bfree+0x3c>)
 8004dd8:	4809      	ldr	r0, [pc, #36]	; (8004e00 <_Bfree+0x40>)
 8004dda:	218a      	movs	r1, #138	; 0x8a
 8004ddc:	f000 fdea 	bl	80059b4 <__assert_func>
 8004de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004de4:	6006      	str	r6, [r0, #0]
 8004de6:	60c6      	str	r6, [r0, #12]
 8004de8:	b13c      	cbz	r4, 8004dfa <_Bfree+0x3a>
 8004dea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dec:	6862      	ldr	r2, [r4, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004df4:	6021      	str	r1, [r4, #0]
 8004df6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	08005d35 	.word	0x08005d35
 8004e00:	08005e18 	.word	0x08005e18

08004e04 <__multadd>:
 8004e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e08:	690d      	ldr	r5, [r1, #16]
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	461e      	mov	r6, r3
 8004e10:	f101 0c14 	add.w	ip, r1, #20
 8004e14:	2000      	movs	r0, #0
 8004e16:	f8dc 3000 	ldr.w	r3, [ip]
 8004e1a:	b299      	uxth	r1, r3
 8004e1c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e20:	0c1e      	lsrs	r6, r3, #16
 8004e22:	0c0b      	lsrs	r3, r1, #16
 8004e24:	fb02 3306 	mla	r3, r2, r6, r3
 8004e28:	b289      	uxth	r1, r1
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e30:	4285      	cmp	r5, r0
 8004e32:	f84c 1b04 	str.w	r1, [ip], #4
 8004e36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e3a:	dcec      	bgt.n	8004e16 <__multadd+0x12>
 8004e3c:	b30e      	cbz	r6, 8004e82 <__multadd+0x7e>
 8004e3e:	68a3      	ldr	r3, [r4, #8]
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dc19      	bgt.n	8004e78 <__multadd+0x74>
 8004e44:	6861      	ldr	r1, [r4, #4]
 8004e46:	4638      	mov	r0, r7
 8004e48:	3101      	adds	r1, #1
 8004e4a:	f7ff ff79 	bl	8004d40 <_Balloc>
 8004e4e:	4680      	mov	r8, r0
 8004e50:	b928      	cbnz	r0, 8004e5e <__multadd+0x5a>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <__multadd+0x84>)
 8004e56:	480d      	ldr	r0, [pc, #52]	; (8004e8c <__multadd+0x88>)
 8004e58:	21b5      	movs	r1, #181	; 0xb5
 8004e5a:	f000 fdab 	bl	80059b4 <__assert_func>
 8004e5e:	6922      	ldr	r2, [r4, #16]
 8004e60:	3202      	adds	r2, #2
 8004e62:	f104 010c 	add.w	r1, r4, #12
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	300c      	adds	r0, #12
 8004e6a:	f7ff ff5b 	bl	8004d24 <memcpy>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ffa5 	bl	8004dc0 <_Bfree>
 8004e76:	4644      	mov	r4, r8
 8004e78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	615e      	str	r6, [r3, #20]
 8004e80:	6125      	str	r5, [r4, #16]
 8004e82:	4620      	mov	r0, r4
 8004e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e88:	08005da7 	.word	0x08005da7
 8004e8c:	08005e18 	.word	0x08005e18

08004e90 <__hi0bits>:
 8004e90:	0c03      	lsrs	r3, r0, #16
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	b9d3      	cbnz	r3, 8004ecc <__hi0bits+0x3c>
 8004e96:	0400      	lsls	r0, r0, #16
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004e9e:	bf04      	itt	eq
 8004ea0:	0200      	lsleq	r0, r0, #8
 8004ea2:	3308      	addeq	r3, #8
 8004ea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004ea8:	bf04      	itt	eq
 8004eaa:	0100      	lsleq	r0, r0, #4
 8004eac:	3304      	addeq	r3, #4
 8004eae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004eb2:	bf04      	itt	eq
 8004eb4:	0080      	lsleq	r0, r0, #2
 8004eb6:	3302      	addeq	r3, #2
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	db05      	blt.n	8004ec8 <__hi0bits+0x38>
 8004ebc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ec0:	f103 0301 	add.w	r3, r3, #1
 8004ec4:	bf08      	it	eq
 8004ec6:	2320      	moveq	r3, #32
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4770      	bx	lr
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e7e4      	b.n	8004e9a <__hi0bits+0xa>

08004ed0 <__lo0bits>:
 8004ed0:	6803      	ldr	r3, [r0, #0]
 8004ed2:	f013 0207 	ands.w	r2, r3, #7
 8004ed6:	4601      	mov	r1, r0
 8004ed8:	d00b      	beq.n	8004ef2 <__lo0bits+0x22>
 8004eda:	07da      	lsls	r2, r3, #31
 8004edc:	d423      	bmi.n	8004f26 <__lo0bits+0x56>
 8004ede:	0798      	lsls	r0, r3, #30
 8004ee0:	bf49      	itett	mi
 8004ee2:	085b      	lsrmi	r3, r3, #1
 8004ee4:	089b      	lsrpl	r3, r3, #2
 8004ee6:	2001      	movmi	r0, #1
 8004ee8:	600b      	strmi	r3, [r1, #0]
 8004eea:	bf5c      	itt	pl
 8004eec:	600b      	strpl	r3, [r1, #0]
 8004eee:	2002      	movpl	r0, #2
 8004ef0:	4770      	bx	lr
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	b9a8      	cbnz	r0, 8004f22 <__lo0bits+0x52>
 8004ef6:	0c1b      	lsrs	r3, r3, #16
 8004ef8:	2010      	movs	r0, #16
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	b90a      	cbnz	r2, 8004f02 <__lo0bits+0x32>
 8004efe:	3008      	adds	r0, #8
 8004f00:	0a1b      	lsrs	r3, r3, #8
 8004f02:	071a      	lsls	r2, r3, #28
 8004f04:	bf04      	itt	eq
 8004f06:	091b      	lsreq	r3, r3, #4
 8004f08:	3004      	addeq	r0, #4
 8004f0a:	079a      	lsls	r2, r3, #30
 8004f0c:	bf04      	itt	eq
 8004f0e:	089b      	lsreq	r3, r3, #2
 8004f10:	3002      	addeq	r0, #2
 8004f12:	07da      	lsls	r2, r3, #31
 8004f14:	d403      	bmi.n	8004f1e <__lo0bits+0x4e>
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	f100 0001 	add.w	r0, r0, #1
 8004f1c:	d005      	beq.n	8004f2a <__lo0bits+0x5a>
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	4770      	bx	lr
 8004f22:	4610      	mov	r0, r2
 8004f24:	e7e9      	b.n	8004efa <__lo0bits+0x2a>
 8004f26:	2000      	movs	r0, #0
 8004f28:	4770      	bx	lr
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	4770      	bx	lr
	...

08004f30 <__i2b>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	460c      	mov	r4, r1
 8004f34:	2101      	movs	r1, #1
 8004f36:	f7ff ff03 	bl	8004d40 <_Balloc>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	b928      	cbnz	r0, 8004f4a <__i2b+0x1a>
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <__i2b+0x24>)
 8004f40:	4805      	ldr	r0, [pc, #20]	; (8004f58 <__i2b+0x28>)
 8004f42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f46:	f000 fd35 	bl	80059b4 <__assert_func>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	6144      	str	r4, [r0, #20]
 8004f4e:	6103      	str	r3, [r0, #16]
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	bf00      	nop
 8004f54:	08005da7 	.word	0x08005da7
 8004f58:	08005e18 	.word	0x08005e18

08004f5c <__multiply>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	4691      	mov	r9, r2
 8004f62:	690a      	ldr	r2, [r1, #16]
 8004f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	bfb8      	it	lt
 8004f6c:	460b      	movlt	r3, r1
 8004f6e:	460c      	mov	r4, r1
 8004f70:	bfbc      	itt	lt
 8004f72:	464c      	movlt	r4, r9
 8004f74:	4699      	movlt	r9, r3
 8004f76:	6927      	ldr	r7, [r4, #16]
 8004f78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f7c:	68a3      	ldr	r3, [r4, #8]
 8004f7e:	6861      	ldr	r1, [r4, #4]
 8004f80:	eb07 060a 	add.w	r6, r7, sl
 8004f84:	42b3      	cmp	r3, r6
 8004f86:	b085      	sub	sp, #20
 8004f88:	bfb8      	it	lt
 8004f8a:	3101      	addlt	r1, #1
 8004f8c:	f7ff fed8 	bl	8004d40 <_Balloc>
 8004f90:	b930      	cbnz	r0, 8004fa0 <__multiply+0x44>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <__multiply+0x14c>)
 8004f96:	4845      	ldr	r0, [pc, #276]	; (80050ac <__multiply+0x150>)
 8004f98:	f240 115d 	movw	r1, #349	; 0x15d
 8004f9c:	f000 fd0a 	bl	80059b4 <__assert_func>
 8004fa0:	f100 0514 	add.w	r5, r0, #20
 8004fa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fa8:	462b      	mov	r3, r5
 8004faa:	2200      	movs	r2, #0
 8004fac:	4543      	cmp	r3, r8
 8004fae:	d321      	bcc.n	8004ff4 <__multiply+0x98>
 8004fb0:	f104 0314 	add.w	r3, r4, #20
 8004fb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004fb8:	f109 0314 	add.w	r3, r9, #20
 8004fbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004fc0:	9202      	str	r2, [sp, #8]
 8004fc2:	1b3a      	subs	r2, r7, r4
 8004fc4:	3a15      	subs	r2, #21
 8004fc6:	f022 0203 	bic.w	r2, r2, #3
 8004fca:	3204      	adds	r2, #4
 8004fcc:	f104 0115 	add.w	r1, r4, #21
 8004fd0:	428f      	cmp	r7, r1
 8004fd2:	bf38      	it	cc
 8004fd4:	2204      	movcc	r2, #4
 8004fd6:	9201      	str	r2, [sp, #4]
 8004fd8:	9a02      	ldr	r2, [sp, #8]
 8004fda:	9303      	str	r3, [sp, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d80c      	bhi.n	8004ffa <__multiply+0x9e>
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	dd03      	ble.n	8004fec <__multiply+0x90>
 8004fe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05a      	beq.n	80050a2 <__multiply+0x146>
 8004fec:	6106      	str	r6, [r0, #16]
 8004fee:	b005      	add	sp, #20
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	f843 2b04 	str.w	r2, [r3], #4
 8004ff8:	e7d8      	b.n	8004fac <__multiply+0x50>
 8004ffa:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ffe:	f1ba 0f00 	cmp.w	sl, #0
 8005002:	d024      	beq.n	800504e <__multiply+0xf2>
 8005004:	f104 0e14 	add.w	lr, r4, #20
 8005008:	46a9      	mov	r9, r5
 800500a:	f04f 0c00 	mov.w	ip, #0
 800500e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005012:	f8d9 1000 	ldr.w	r1, [r9]
 8005016:	fa1f fb82 	uxth.w	fp, r2
 800501a:	b289      	uxth	r1, r1
 800501c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005024:	f8d9 2000 	ldr.w	r2, [r9]
 8005028:	4461      	add	r1, ip
 800502a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800502e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005036:	b289      	uxth	r1, r1
 8005038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800503c:	4577      	cmp	r7, lr
 800503e:	f849 1b04 	str.w	r1, [r9], #4
 8005042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005046:	d8e2      	bhi.n	800500e <__multiply+0xb2>
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	f845 c002 	str.w	ip, [r5, r2]
 800504e:	9a03      	ldr	r2, [sp, #12]
 8005050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005054:	3304      	adds	r3, #4
 8005056:	f1b9 0f00 	cmp.w	r9, #0
 800505a:	d020      	beq.n	800509e <__multiply+0x142>
 800505c:	6829      	ldr	r1, [r5, #0]
 800505e:	f104 0c14 	add.w	ip, r4, #20
 8005062:	46ae      	mov	lr, r5
 8005064:	f04f 0a00 	mov.w	sl, #0
 8005068:	f8bc b000 	ldrh.w	fp, [ip]
 800506c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005070:	fb09 220b 	mla	r2, r9, fp, r2
 8005074:	4492      	add	sl, r2
 8005076:	b289      	uxth	r1, r1
 8005078:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800507c:	f84e 1b04 	str.w	r1, [lr], #4
 8005080:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005084:	f8be 1000 	ldrh.w	r1, [lr]
 8005088:	0c12      	lsrs	r2, r2, #16
 800508a:	fb09 1102 	mla	r1, r9, r2, r1
 800508e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005092:	4567      	cmp	r7, ip
 8005094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005098:	d8e6      	bhi.n	8005068 <__multiply+0x10c>
 800509a:	9a01      	ldr	r2, [sp, #4]
 800509c:	50a9      	str	r1, [r5, r2]
 800509e:	3504      	adds	r5, #4
 80050a0:	e79a      	b.n	8004fd8 <__multiply+0x7c>
 80050a2:	3e01      	subs	r6, #1
 80050a4:	e79c      	b.n	8004fe0 <__multiply+0x84>
 80050a6:	bf00      	nop
 80050a8:	08005da7 	.word	0x08005da7
 80050ac:	08005e18 	.word	0x08005e18

080050b0 <__pow5mult>:
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b4:	4615      	mov	r5, r2
 80050b6:	f012 0203 	ands.w	r2, r2, #3
 80050ba:	4606      	mov	r6, r0
 80050bc:	460f      	mov	r7, r1
 80050be:	d007      	beq.n	80050d0 <__pow5mult+0x20>
 80050c0:	4c25      	ldr	r4, [pc, #148]	; (8005158 <__pow5mult+0xa8>)
 80050c2:	3a01      	subs	r2, #1
 80050c4:	2300      	movs	r3, #0
 80050c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050ca:	f7ff fe9b 	bl	8004e04 <__multadd>
 80050ce:	4607      	mov	r7, r0
 80050d0:	10ad      	asrs	r5, r5, #2
 80050d2:	d03d      	beq.n	8005150 <__pow5mult+0xa0>
 80050d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050d6:	b97c      	cbnz	r4, 80050f8 <__pow5mult+0x48>
 80050d8:	2010      	movs	r0, #16
 80050da:	f7ff fe1b 	bl	8004d14 <malloc>
 80050de:	4602      	mov	r2, r0
 80050e0:	6270      	str	r0, [r6, #36]	; 0x24
 80050e2:	b928      	cbnz	r0, 80050f0 <__pow5mult+0x40>
 80050e4:	4b1d      	ldr	r3, [pc, #116]	; (800515c <__pow5mult+0xac>)
 80050e6:	481e      	ldr	r0, [pc, #120]	; (8005160 <__pow5mult+0xb0>)
 80050e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80050ec:	f000 fc62 	bl	80059b4 <__assert_func>
 80050f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050f4:	6004      	str	r4, [r0, #0]
 80050f6:	60c4      	str	r4, [r0, #12]
 80050f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80050fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005100:	b94c      	cbnz	r4, 8005116 <__pow5mult+0x66>
 8005102:	f240 2171 	movw	r1, #625	; 0x271
 8005106:	4630      	mov	r0, r6
 8005108:	f7ff ff12 	bl	8004f30 <__i2b>
 800510c:	2300      	movs	r3, #0
 800510e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005112:	4604      	mov	r4, r0
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	f04f 0900 	mov.w	r9, #0
 800511a:	07eb      	lsls	r3, r5, #31
 800511c:	d50a      	bpl.n	8005134 <__pow5mult+0x84>
 800511e:	4639      	mov	r1, r7
 8005120:	4622      	mov	r2, r4
 8005122:	4630      	mov	r0, r6
 8005124:	f7ff ff1a 	bl	8004f5c <__multiply>
 8005128:	4639      	mov	r1, r7
 800512a:	4680      	mov	r8, r0
 800512c:	4630      	mov	r0, r6
 800512e:	f7ff fe47 	bl	8004dc0 <_Bfree>
 8005132:	4647      	mov	r7, r8
 8005134:	106d      	asrs	r5, r5, #1
 8005136:	d00b      	beq.n	8005150 <__pow5mult+0xa0>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	b938      	cbnz	r0, 800514c <__pow5mult+0x9c>
 800513c:	4622      	mov	r2, r4
 800513e:	4621      	mov	r1, r4
 8005140:	4630      	mov	r0, r6
 8005142:	f7ff ff0b 	bl	8004f5c <__multiply>
 8005146:	6020      	str	r0, [r4, #0]
 8005148:	f8c0 9000 	str.w	r9, [r0]
 800514c:	4604      	mov	r4, r0
 800514e:	e7e4      	b.n	800511a <__pow5mult+0x6a>
 8005150:	4638      	mov	r0, r7
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	bf00      	nop
 8005158:	08005f68 	.word	0x08005f68
 800515c:	08005d35 	.word	0x08005d35
 8005160:	08005e18 	.word	0x08005e18

08005164 <__lshift>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	460c      	mov	r4, r1
 800516a:	6849      	ldr	r1, [r1, #4]
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	4607      	mov	r7, r0
 8005176:	4691      	mov	r9, r2
 8005178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800517c:	f108 0601 	add.w	r6, r8, #1
 8005180:	42b3      	cmp	r3, r6
 8005182:	db0b      	blt.n	800519c <__lshift+0x38>
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff fddb 	bl	8004d40 <_Balloc>
 800518a:	4605      	mov	r5, r0
 800518c:	b948      	cbnz	r0, 80051a2 <__lshift+0x3e>
 800518e:	4602      	mov	r2, r0
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <__lshift+0xd8>)
 8005192:	482b      	ldr	r0, [pc, #172]	; (8005240 <__lshift+0xdc>)
 8005194:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005198:	f000 fc0c 	bl	80059b4 <__assert_func>
 800519c:	3101      	adds	r1, #1
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	e7ee      	b.n	8005180 <__lshift+0x1c>
 80051a2:	2300      	movs	r3, #0
 80051a4:	f100 0114 	add.w	r1, r0, #20
 80051a8:	f100 0210 	add.w	r2, r0, #16
 80051ac:	4618      	mov	r0, r3
 80051ae:	4553      	cmp	r3, sl
 80051b0:	db37      	blt.n	8005222 <__lshift+0xbe>
 80051b2:	6920      	ldr	r0, [r4, #16]
 80051b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051b8:	f104 0314 	add.w	r3, r4, #20
 80051bc:	f019 091f 	ands.w	r9, r9, #31
 80051c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051c8:	d02f      	beq.n	800522a <__lshift+0xc6>
 80051ca:	f1c9 0e20 	rsb	lr, r9, #32
 80051ce:	468a      	mov	sl, r1
 80051d0:	f04f 0c00 	mov.w	ip, #0
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	fa02 f209 	lsl.w	r2, r2, r9
 80051da:	ea42 020c 	orr.w	r2, r2, ip
 80051de:	f84a 2b04 	str.w	r2, [sl], #4
 80051e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e6:	4298      	cmp	r0, r3
 80051e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80051ec:	d8f2      	bhi.n	80051d4 <__lshift+0x70>
 80051ee:	1b03      	subs	r3, r0, r4
 80051f0:	3b15      	subs	r3, #21
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	3304      	adds	r3, #4
 80051f8:	f104 0215 	add.w	r2, r4, #21
 80051fc:	4290      	cmp	r0, r2
 80051fe:	bf38      	it	cc
 8005200:	2304      	movcc	r3, #4
 8005202:	f841 c003 	str.w	ip, [r1, r3]
 8005206:	f1bc 0f00 	cmp.w	ip, #0
 800520a:	d001      	beq.n	8005210 <__lshift+0xac>
 800520c:	f108 0602 	add.w	r6, r8, #2
 8005210:	3e01      	subs	r6, #1
 8005212:	4638      	mov	r0, r7
 8005214:	612e      	str	r6, [r5, #16]
 8005216:	4621      	mov	r1, r4
 8005218:	f7ff fdd2 	bl	8004dc0 <_Bfree>
 800521c:	4628      	mov	r0, r5
 800521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005222:	f842 0f04 	str.w	r0, [r2, #4]!
 8005226:	3301      	adds	r3, #1
 8005228:	e7c1      	b.n	80051ae <__lshift+0x4a>
 800522a:	3904      	subs	r1, #4
 800522c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005230:	f841 2f04 	str.w	r2, [r1, #4]!
 8005234:	4298      	cmp	r0, r3
 8005236:	d8f9      	bhi.n	800522c <__lshift+0xc8>
 8005238:	e7ea      	b.n	8005210 <__lshift+0xac>
 800523a:	bf00      	nop
 800523c:	08005da7 	.word	0x08005da7
 8005240:	08005e18 	.word	0x08005e18

08005244 <__mcmp>:
 8005244:	b530      	push	{r4, r5, lr}
 8005246:	6902      	ldr	r2, [r0, #16]
 8005248:	690c      	ldr	r4, [r1, #16]
 800524a:	1b12      	subs	r2, r2, r4
 800524c:	d10e      	bne.n	800526c <__mcmp+0x28>
 800524e:	f100 0314 	add.w	r3, r0, #20
 8005252:	3114      	adds	r1, #20
 8005254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800525c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005264:	42a5      	cmp	r5, r4
 8005266:	d003      	beq.n	8005270 <__mcmp+0x2c>
 8005268:	d305      	bcc.n	8005276 <__mcmp+0x32>
 800526a:	2201      	movs	r2, #1
 800526c:	4610      	mov	r0, r2
 800526e:	bd30      	pop	{r4, r5, pc}
 8005270:	4283      	cmp	r3, r0
 8005272:	d3f3      	bcc.n	800525c <__mcmp+0x18>
 8005274:	e7fa      	b.n	800526c <__mcmp+0x28>
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	e7f7      	b.n	800526c <__mcmp+0x28>

0800527c <__mdiff>:
 800527c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	460c      	mov	r4, r1
 8005282:	4606      	mov	r6, r0
 8005284:	4611      	mov	r1, r2
 8005286:	4620      	mov	r0, r4
 8005288:	4690      	mov	r8, r2
 800528a:	f7ff ffdb 	bl	8005244 <__mcmp>
 800528e:	1e05      	subs	r5, r0, #0
 8005290:	d110      	bne.n	80052b4 <__mdiff+0x38>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff fd53 	bl	8004d40 <_Balloc>
 800529a:	b930      	cbnz	r0, 80052aa <__mdiff+0x2e>
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <__mdiff+0x10c>)
 800529e:	4602      	mov	r2, r0
 80052a0:	f240 2132 	movw	r1, #562	; 0x232
 80052a4:	4839      	ldr	r0, [pc, #228]	; (800538c <__mdiff+0x110>)
 80052a6:	f000 fb85 	bl	80059b4 <__assert_func>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b4:	bfa4      	itt	ge
 80052b6:	4643      	movge	r3, r8
 80052b8:	46a0      	movge	r8, r4
 80052ba:	4630      	mov	r0, r6
 80052bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052c0:	bfa6      	itte	ge
 80052c2:	461c      	movge	r4, r3
 80052c4:	2500      	movge	r5, #0
 80052c6:	2501      	movlt	r5, #1
 80052c8:	f7ff fd3a 	bl	8004d40 <_Balloc>
 80052cc:	b920      	cbnz	r0, 80052d8 <__mdiff+0x5c>
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <__mdiff+0x10c>)
 80052d0:	4602      	mov	r2, r0
 80052d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80052d6:	e7e5      	b.n	80052a4 <__mdiff+0x28>
 80052d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80052dc:	6926      	ldr	r6, [r4, #16]
 80052de:	60c5      	str	r5, [r0, #12]
 80052e0:	f104 0914 	add.w	r9, r4, #20
 80052e4:	f108 0514 	add.w	r5, r8, #20
 80052e8:	f100 0e14 	add.w	lr, r0, #20
 80052ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80052f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80052f4:	f108 0210 	add.w	r2, r8, #16
 80052f8:	46f2      	mov	sl, lr
 80052fa:	2100      	movs	r1, #0
 80052fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005304:	fa1f f883 	uxth.w	r8, r3
 8005308:	fa11 f18b 	uxtah	r1, r1, fp
 800530c:	0c1b      	lsrs	r3, r3, #16
 800530e:	eba1 0808 	sub.w	r8, r1, r8
 8005312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800531a:	fa1f f888 	uxth.w	r8, r8
 800531e:	1419      	asrs	r1, r3, #16
 8005320:	454e      	cmp	r6, r9
 8005322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005326:	f84a 3b04 	str.w	r3, [sl], #4
 800532a:	d8e7      	bhi.n	80052fc <__mdiff+0x80>
 800532c:	1b33      	subs	r3, r6, r4
 800532e:	3b15      	subs	r3, #21
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	3304      	adds	r3, #4
 8005336:	3415      	adds	r4, #21
 8005338:	42a6      	cmp	r6, r4
 800533a:	bf38      	it	cc
 800533c:	2304      	movcc	r3, #4
 800533e:	441d      	add	r5, r3
 8005340:	4473      	add	r3, lr
 8005342:	469e      	mov	lr, r3
 8005344:	462e      	mov	r6, r5
 8005346:	4566      	cmp	r6, ip
 8005348:	d30e      	bcc.n	8005368 <__mdiff+0xec>
 800534a:	f10c 0203 	add.w	r2, ip, #3
 800534e:	1b52      	subs	r2, r2, r5
 8005350:	f022 0203 	bic.w	r2, r2, #3
 8005354:	3d03      	subs	r5, #3
 8005356:	45ac      	cmp	ip, r5
 8005358:	bf38      	it	cc
 800535a:	2200      	movcc	r2, #0
 800535c:	441a      	add	r2, r3
 800535e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005362:	b17b      	cbz	r3, 8005384 <__mdiff+0x108>
 8005364:	6107      	str	r7, [r0, #16]
 8005366:	e7a3      	b.n	80052b0 <__mdiff+0x34>
 8005368:	f856 8b04 	ldr.w	r8, [r6], #4
 800536c:	fa11 f288 	uxtah	r2, r1, r8
 8005370:	1414      	asrs	r4, r2, #16
 8005372:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005376:	b292      	uxth	r2, r2
 8005378:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800537c:	f84e 2b04 	str.w	r2, [lr], #4
 8005380:	1421      	asrs	r1, r4, #16
 8005382:	e7e0      	b.n	8005346 <__mdiff+0xca>
 8005384:	3f01      	subs	r7, #1
 8005386:	e7ea      	b.n	800535e <__mdiff+0xe2>
 8005388:	08005da7 	.word	0x08005da7
 800538c:	08005e18 	.word	0x08005e18

08005390 <__d2b>:
 8005390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005394:	4689      	mov	r9, r1
 8005396:	2101      	movs	r1, #1
 8005398:	ec57 6b10 	vmov	r6, r7, d0
 800539c:	4690      	mov	r8, r2
 800539e:	f7ff fccf 	bl	8004d40 <_Balloc>
 80053a2:	4604      	mov	r4, r0
 80053a4:	b930      	cbnz	r0, 80053b4 <__d2b+0x24>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <__d2b+0xb0>)
 80053aa:	4826      	ldr	r0, [pc, #152]	; (8005444 <__d2b+0xb4>)
 80053ac:	f240 310a 	movw	r1, #778	; 0x30a
 80053b0:	f000 fb00 	bl	80059b4 <__assert_func>
 80053b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80053b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053bc:	bb35      	cbnz	r5, 800540c <__d2b+0x7c>
 80053be:	2e00      	cmp	r6, #0
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	d028      	beq.n	8005416 <__d2b+0x86>
 80053c4:	4668      	mov	r0, sp
 80053c6:	9600      	str	r6, [sp, #0]
 80053c8:	f7ff fd82 	bl	8004ed0 <__lo0bits>
 80053cc:	9900      	ldr	r1, [sp, #0]
 80053ce:	b300      	cbz	r0, 8005412 <__d2b+0x82>
 80053d0:	9a01      	ldr	r2, [sp, #4]
 80053d2:	f1c0 0320 	rsb	r3, r0, #32
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	430b      	orrs	r3, r1
 80053dc:	40c2      	lsrs	r2, r0
 80053de:	6163      	str	r3, [r4, #20]
 80053e0:	9201      	str	r2, [sp, #4]
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	61a3      	str	r3, [r4, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2202      	movne	r2, #2
 80053ec:	2201      	moveq	r2, #1
 80053ee:	6122      	str	r2, [r4, #16]
 80053f0:	b1d5      	cbz	r5, 8005428 <__d2b+0x98>
 80053f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053f6:	4405      	add	r5, r0
 80053f8:	f8c9 5000 	str.w	r5, [r9]
 80053fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005400:	f8c8 0000 	str.w	r0, [r8]
 8005404:	4620      	mov	r0, r4
 8005406:	b003      	add	sp, #12
 8005408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800540c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005410:	e7d5      	b.n	80053be <__d2b+0x2e>
 8005412:	6161      	str	r1, [r4, #20]
 8005414:	e7e5      	b.n	80053e2 <__d2b+0x52>
 8005416:	a801      	add	r0, sp, #4
 8005418:	f7ff fd5a 	bl	8004ed0 <__lo0bits>
 800541c:	9b01      	ldr	r3, [sp, #4]
 800541e:	6163      	str	r3, [r4, #20]
 8005420:	2201      	movs	r2, #1
 8005422:	6122      	str	r2, [r4, #16]
 8005424:	3020      	adds	r0, #32
 8005426:	e7e3      	b.n	80053f0 <__d2b+0x60>
 8005428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800542c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005430:	f8c9 0000 	str.w	r0, [r9]
 8005434:	6918      	ldr	r0, [r3, #16]
 8005436:	f7ff fd2b 	bl	8004e90 <__hi0bits>
 800543a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800543e:	e7df      	b.n	8005400 <__d2b+0x70>
 8005440:	08005da7 	.word	0x08005da7
 8005444:	08005e18 	.word	0x08005e18

08005448 <_calloc_r>:
 8005448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544a:	fba1 2402 	umull	r2, r4, r1, r2
 800544e:	b94c      	cbnz	r4, 8005464 <_calloc_r+0x1c>
 8005450:	4611      	mov	r1, r2
 8005452:	9201      	str	r2, [sp, #4]
 8005454:	f000 f87a 	bl	800554c <_malloc_r>
 8005458:	9a01      	ldr	r2, [sp, #4]
 800545a:	4605      	mov	r5, r0
 800545c:	b930      	cbnz	r0, 800546c <_calloc_r+0x24>
 800545e:	4628      	mov	r0, r5
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	220c      	movs	r2, #12
 8005466:	6002      	str	r2, [r0, #0]
 8005468:	2500      	movs	r5, #0
 800546a:	e7f8      	b.n	800545e <_calloc_r+0x16>
 800546c:	4621      	mov	r1, r4
 800546e:	f7fd fdf3 	bl	8003058 <memset>
 8005472:	e7f4      	b.n	800545e <_calloc_r+0x16>

08005474 <_free_r>:
 8005474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005476:	2900      	cmp	r1, #0
 8005478:	d044      	beq.n	8005504 <_free_r+0x90>
 800547a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547e:	9001      	str	r0, [sp, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f1a1 0404 	sub.w	r4, r1, #4
 8005486:	bfb8      	it	lt
 8005488:	18e4      	addlt	r4, r4, r3
 800548a:	f000 fb19 	bl	8005ac0 <__malloc_lock>
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <_free_r+0x94>)
 8005490:	9801      	ldr	r0, [sp, #4]
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	b933      	cbnz	r3, 80054a4 <_free_r+0x30>
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6014      	str	r4, [r2, #0]
 800549a:	b003      	add	sp, #12
 800549c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a0:	f000 bb14 	b.w	8005acc <__malloc_unlock>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d908      	bls.n	80054ba <_free_r+0x46>
 80054a8:	6825      	ldr	r5, [r4, #0]
 80054aa:	1961      	adds	r1, r4, r5
 80054ac:	428b      	cmp	r3, r1
 80054ae:	bf01      	itttt	eq
 80054b0:	6819      	ldreq	r1, [r3, #0]
 80054b2:	685b      	ldreq	r3, [r3, #4]
 80054b4:	1949      	addeq	r1, r1, r5
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	e7ed      	b.n	8005496 <_free_r+0x22>
 80054ba:	461a      	mov	r2, r3
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b10b      	cbz	r3, 80054c4 <_free_r+0x50>
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d9fa      	bls.n	80054ba <_free_r+0x46>
 80054c4:	6811      	ldr	r1, [r2, #0]
 80054c6:	1855      	adds	r5, r2, r1
 80054c8:	42a5      	cmp	r5, r4
 80054ca:	d10b      	bne.n	80054e4 <_free_r+0x70>
 80054cc:	6824      	ldr	r4, [r4, #0]
 80054ce:	4421      	add	r1, r4
 80054d0:	1854      	adds	r4, r2, r1
 80054d2:	42a3      	cmp	r3, r4
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	d1e0      	bne.n	800549a <_free_r+0x26>
 80054d8:	681c      	ldr	r4, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	6053      	str	r3, [r2, #4]
 80054de:	4421      	add	r1, r4
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	e7da      	b.n	800549a <_free_r+0x26>
 80054e4:	d902      	bls.n	80054ec <_free_r+0x78>
 80054e6:	230c      	movs	r3, #12
 80054e8:	6003      	str	r3, [r0, #0]
 80054ea:	e7d6      	b.n	800549a <_free_r+0x26>
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	1961      	adds	r1, r4, r5
 80054f0:	428b      	cmp	r3, r1
 80054f2:	bf04      	itt	eq
 80054f4:	6819      	ldreq	r1, [r3, #0]
 80054f6:	685b      	ldreq	r3, [r3, #4]
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	bf04      	itt	eq
 80054fc:	1949      	addeq	r1, r1, r5
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	6054      	str	r4, [r2, #4]
 8005502:	e7ca      	b.n	800549a <_free_r+0x26>
 8005504:	b003      	add	sp, #12
 8005506:	bd30      	pop	{r4, r5, pc}
 8005508:	20000488 	.word	0x20000488

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0e      	ldr	r6, [pc, #56]	; (8005548 <sbrk_aligned+0x3c>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 f9e6 	bl	80058e8 <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f9e1 	bl	80058e8 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d00a      	beq.n	8005540 <sbrk_aligned+0x34>
 800552a:	1cc4      	adds	r4, r0, #3
 800552c:	f024 0403 	bic.w	r4, r4, #3
 8005530:	42a0      	cmp	r0, r4
 8005532:	d007      	beq.n	8005544 <sbrk_aligned+0x38>
 8005534:	1a21      	subs	r1, r4, r0
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f9d6 	bl	80058e8 <_sbrk_r>
 800553c:	3001      	adds	r0, #1
 800553e:	d101      	bne.n	8005544 <sbrk_aligned+0x38>
 8005540:	f04f 34ff 	mov.w	r4, #4294967295
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	2000048c 	.word	0x2000048c

0800554c <_malloc_r>:
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	1ccd      	adds	r5, r1, #3
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	2d00      	cmp	r5, #0
 8005560:	4607      	mov	r7, r0
 8005562:	db01      	blt.n	8005568 <_malloc_r+0x1c>
 8005564:	42a9      	cmp	r1, r5
 8005566:	d905      	bls.n	8005574 <_malloc_r+0x28>
 8005568:	230c      	movs	r3, #12
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	2600      	movs	r6, #0
 800556e:	4630      	mov	r0, r6
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	4e2e      	ldr	r6, [pc, #184]	; (8005630 <_malloc_r+0xe4>)
 8005576:	f000 faa3 	bl	8005ac0 <__malloc_lock>
 800557a:	6833      	ldr	r3, [r6, #0]
 800557c:	461c      	mov	r4, r3
 800557e:	bb34      	cbnz	r4, 80055ce <_malloc_r+0x82>
 8005580:	4629      	mov	r1, r5
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff ffc2 	bl	800550c <sbrk_aligned>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	4604      	mov	r4, r0
 800558c:	d14d      	bne.n	800562a <_malloc_r+0xde>
 800558e:	6834      	ldr	r4, [r6, #0]
 8005590:	4626      	mov	r6, r4
 8005592:	2e00      	cmp	r6, #0
 8005594:	d140      	bne.n	8005618 <_malloc_r+0xcc>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4631      	mov	r1, r6
 800559a:	4638      	mov	r0, r7
 800559c:	eb04 0803 	add.w	r8, r4, r3
 80055a0:	f000 f9a2 	bl	80058e8 <_sbrk_r>
 80055a4:	4580      	cmp	r8, r0
 80055a6:	d13a      	bne.n	800561e <_malloc_r+0xd2>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	3503      	adds	r5, #3
 80055ac:	1a6d      	subs	r5, r5, r1
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	4629      	mov	r1, r5
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ffa5 	bl	800550c <sbrk_aligned>
 80055c2:	3001      	adds	r0, #1
 80055c4:	d02b      	beq.n	800561e <_malloc_r+0xd2>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	442b      	add	r3, r5
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	e00e      	b.n	80055ec <_malloc_r+0xa0>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	1b52      	subs	r2, r2, r5
 80055d2:	d41e      	bmi.n	8005612 <_malloc_r+0xc6>
 80055d4:	2a0b      	cmp	r2, #11
 80055d6:	d916      	bls.n	8005606 <_malloc_r+0xba>
 80055d8:	1961      	adds	r1, r4, r5
 80055da:	42a3      	cmp	r3, r4
 80055dc:	6025      	str	r5, [r4, #0]
 80055de:	bf18      	it	ne
 80055e0:	6059      	strne	r1, [r3, #4]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	bf08      	it	eq
 80055e6:	6031      	streq	r1, [r6, #0]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4638      	mov	r0, r7
 80055ee:	f104 060b 	add.w	r6, r4, #11
 80055f2:	f000 fa6b 	bl	8005acc <__malloc_unlock>
 80055f6:	f026 0607 	bic.w	r6, r6, #7
 80055fa:	1d23      	adds	r3, r4, #4
 80055fc:	1af2      	subs	r2, r6, r3
 80055fe:	d0b6      	beq.n	800556e <_malloc_r+0x22>
 8005600:	1b9b      	subs	r3, r3, r6
 8005602:	50a3      	str	r3, [r4, r2]
 8005604:	e7b3      	b.n	800556e <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	6032      	streq	r2, [r6, #0]
 800560e:	605a      	strne	r2, [r3, #4]
 8005610:	e7ec      	b.n	80055ec <_malloc_r+0xa0>
 8005612:	4623      	mov	r3, r4
 8005614:	6864      	ldr	r4, [r4, #4]
 8005616:	e7b2      	b.n	800557e <_malloc_r+0x32>
 8005618:	4634      	mov	r4, r6
 800561a:	6876      	ldr	r6, [r6, #4]
 800561c:	e7b9      	b.n	8005592 <_malloc_r+0x46>
 800561e:	230c      	movs	r3, #12
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4638      	mov	r0, r7
 8005624:	f000 fa52 	bl	8005acc <__malloc_unlock>
 8005628:	e7a1      	b.n	800556e <_malloc_r+0x22>
 800562a:	6025      	str	r5, [r4, #0]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa0>
 800562e:	bf00      	nop
 8005630:	20000488 	.word	0x20000488

08005634 <__sfputc_r>:
 8005634:	6893      	ldr	r3, [r2, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	b410      	push	{r4}
 800563c:	6093      	str	r3, [r2, #8]
 800563e:	da08      	bge.n	8005652 <__sfputc_r+0x1e>
 8005640:	6994      	ldr	r4, [r2, #24]
 8005642:	42a3      	cmp	r3, r4
 8005644:	db01      	blt.n	800564a <__sfputc_r+0x16>
 8005646:	290a      	cmp	r1, #10
 8005648:	d103      	bne.n	8005652 <__sfputc_r+0x1e>
 800564a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800564e:	f7fe ba03 	b.w	8003a58 <__swbuf_r>
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	1c58      	adds	r0, r3, #1
 8005656:	6010      	str	r0, [r2, #0]
 8005658:	7019      	strb	r1, [r3, #0]
 800565a:	4608      	mov	r0, r1
 800565c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005660:	4770      	bx	lr

08005662 <__sfputs_r>:
 8005662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005664:	4606      	mov	r6, r0
 8005666:	460f      	mov	r7, r1
 8005668:	4614      	mov	r4, r2
 800566a:	18d5      	adds	r5, r2, r3
 800566c:	42ac      	cmp	r4, r5
 800566e:	d101      	bne.n	8005674 <__sfputs_r+0x12>
 8005670:	2000      	movs	r0, #0
 8005672:	e007      	b.n	8005684 <__sfputs_r+0x22>
 8005674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005678:	463a      	mov	r2, r7
 800567a:	4630      	mov	r0, r6
 800567c:	f7ff ffda 	bl	8005634 <__sfputc_r>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d1f3      	bne.n	800566c <__sfputs_r+0xa>
 8005684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005688 <_vfiprintf_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	460d      	mov	r5, r1
 800568e:	b09d      	sub	sp, #116	; 0x74
 8005690:	4614      	mov	r4, r2
 8005692:	4698      	mov	r8, r3
 8005694:	4606      	mov	r6, r0
 8005696:	b118      	cbz	r0, 80056a0 <_vfiprintf_r+0x18>
 8005698:	6983      	ldr	r3, [r0, #24]
 800569a:	b90b      	cbnz	r3, 80056a0 <_vfiprintf_r+0x18>
 800569c:	f7ff fa30 	bl	8004b00 <__sinit>
 80056a0:	4b89      	ldr	r3, [pc, #548]	; (80058c8 <_vfiprintf_r+0x240>)
 80056a2:	429d      	cmp	r5, r3
 80056a4:	d11b      	bne.n	80056de <_vfiprintf_r+0x56>
 80056a6:	6875      	ldr	r5, [r6, #4]
 80056a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	d405      	bmi.n	80056ba <_vfiprintf_r+0x32>
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	059a      	lsls	r2, r3, #22
 80056b2:	d402      	bmi.n	80056ba <_vfiprintf_r+0x32>
 80056b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056b6:	f7ff fac6 	bl	8004c46 <__retarget_lock_acquire_recursive>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	071b      	lsls	r3, r3, #28
 80056be:	d501      	bpl.n	80056c4 <_vfiprintf_r+0x3c>
 80056c0:	692b      	ldr	r3, [r5, #16]
 80056c2:	b9eb      	cbnz	r3, 8005700 <_vfiprintf_r+0x78>
 80056c4:	4629      	mov	r1, r5
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7fe fa18 	bl	8003afc <__swsetup_r>
 80056cc:	b1c0      	cbz	r0, 8005700 <_vfiprintf_r+0x78>
 80056ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056d0:	07dc      	lsls	r4, r3, #31
 80056d2:	d50e      	bpl.n	80056f2 <_vfiprintf_r+0x6a>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	b01d      	add	sp, #116	; 0x74
 80056da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056de:	4b7b      	ldr	r3, [pc, #492]	; (80058cc <_vfiprintf_r+0x244>)
 80056e0:	429d      	cmp	r5, r3
 80056e2:	d101      	bne.n	80056e8 <_vfiprintf_r+0x60>
 80056e4:	68b5      	ldr	r5, [r6, #8]
 80056e6:	e7df      	b.n	80056a8 <_vfiprintf_r+0x20>
 80056e8:	4b79      	ldr	r3, [pc, #484]	; (80058d0 <_vfiprintf_r+0x248>)
 80056ea:	429d      	cmp	r5, r3
 80056ec:	bf08      	it	eq
 80056ee:	68f5      	ldreq	r5, [r6, #12]
 80056f0:	e7da      	b.n	80056a8 <_vfiprintf_r+0x20>
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	0598      	lsls	r0, r3, #22
 80056f6:	d4ed      	bmi.n	80056d4 <_vfiprintf_r+0x4c>
 80056f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fa:	f7ff faa5 	bl	8004c48 <__retarget_lock_release_recursive>
 80056fe:	e7e9      	b.n	80056d4 <_vfiprintf_r+0x4c>
 8005700:	2300      	movs	r3, #0
 8005702:	9309      	str	r3, [sp, #36]	; 0x24
 8005704:	2320      	movs	r3, #32
 8005706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800570a:	f8cd 800c 	str.w	r8, [sp, #12]
 800570e:	2330      	movs	r3, #48	; 0x30
 8005710:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058d4 <_vfiprintf_r+0x24c>
 8005714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005718:	f04f 0901 	mov.w	r9, #1
 800571c:	4623      	mov	r3, r4
 800571e:	469a      	mov	sl, r3
 8005720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005724:	b10a      	cbz	r2, 800572a <_vfiprintf_r+0xa2>
 8005726:	2a25      	cmp	r2, #37	; 0x25
 8005728:	d1f9      	bne.n	800571e <_vfiprintf_r+0x96>
 800572a:	ebba 0b04 	subs.w	fp, sl, r4
 800572e:	d00b      	beq.n	8005748 <_vfiprintf_r+0xc0>
 8005730:	465b      	mov	r3, fp
 8005732:	4622      	mov	r2, r4
 8005734:	4629      	mov	r1, r5
 8005736:	4630      	mov	r0, r6
 8005738:	f7ff ff93 	bl	8005662 <__sfputs_r>
 800573c:	3001      	adds	r0, #1
 800573e:	f000 80aa 	beq.w	8005896 <_vfiprintf_r+0x20e>
 8005742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005744:	445a      	add	r2, fp
 8005746:	9209      	str	r2, [sp, #36]	; 0x24
 8005748:	f89a 3000 	ldrb.w	r3, [sl]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80a2 	beq.w	8005896 <_vfiprintf_r+0x20e>
 8005752:	2300      	movs	r3, #0
 8005754:	f04f 32ff 	mov.w	r2, #4294967295
 8005758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800575c:	f10a 0a01 	add.w	sl, sl, #1
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	9307      	str	r3, [sp, #28]
 8005764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005768:	931a      	str	r3, [sp, #104]	; 0x68
 800576a:	4654      	mov	r4, sl
 800576c:	2205      	movs	r2, #5
 800576e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005772:	4858      	ldr	r0, [pc, #352]	; (80058d4 <_vfiprintf_r+0x24c>)
 8005774:	f7fa fd34 	bl	80001e0 <memchr>
 8005778:	9a04      	ldr	r2, [sp, #16]
 800577a:	b9d8      	cbnz	r0, 80057b4 <_vfiprintf_r+0x12c>
 800577c:	06d1      	lsls	r1, r2, #27
 800577e:	bf44      	itt	mi
 8005780:	2320      	movmi	r3, #32
 8005782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005786:	0713      	lsls	r3, r2, #28
 8005788:	bf44      	itt	mi
 800578a:	232b      	movmi	r3, #43	; 0x2b
 800578c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005790:	f89a 3000 	ldrb.w	r3, [sl]
 8005794:	2b2a      	cmp	r3, #42	; 0x2a
 8005796:	d015      	beq.n	80057c4 <_vfiprintf_r+0x13c>
 8005798:	9a07      	ldr	r2, [sp, #28]
 800579a:	4654      	mov	r4, sl
 800579c:	2000      	movs	r0, #0
 800579e:	f04f 0c0a 	mov.w	ip, #10
 80057a2:	4621      	mov	r1, r4
 80057a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a8:	3b30      	subs	r3, #48	; 0x30
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d94e      	bls.n	800584c <_vfiprintf_r+0x1c4>
 80057ae:	b1b0      	cbz	r0, 80057de <_vfiprintf_r+0x156>
 80057b0:	9207      	str	r2, [sp, #28]
 80057b2:	e014      	b.n	80057de <_vfiprintf_r+0x156>
 80057b4:	eba0 0308 	sub.w	r3, r0, r8
 80057b8:	fa09 f303 	lsl.w	r3, r9, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	46a2      	mov	sl, r4
 80057c2:	e7d2      	b.n	800576a <_vfiprintf_r+0xe2>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	1d19      	adds	r1, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	9103      	str	r1, [sp, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bfbb      	ittet	lt
 80057d0:	425b      	neglt	r3, r3
 80057d2:	f042 0202 	orrlt.w	r2, r2, #2
 80057d6:	9307      	strge	r3, [sp, #28]
 80057d8:	9307      	strlt	r3, [sp, #28]
 80057da:	bfb8      	it	lt
 80057dc:	9204      	strlt	r2, [sp, #16]
 80057de:	7823      	ldrb	r3, [r4, #0]
 80057e0:	2b2e      	cmp	r3, #46	; 0x2e
 80057e2:	d10c      	bne.n	80057fe <_vfiprintf_r+0x176>
 80057e4:	7863      	ldrb	r3, [r4, #1]
 80057e6:	2b2a      	cmp	r3, #42	; 0x2a
 80057e8:	d135      	bne.n	8005856 <_vfiprintf_r+0x1ce>
 80057ea:	9b03      	ldr	r3, [sp, #12]
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfb8      	it	lt
 80057f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80057fa:	3402      	adds	r4, #2
 80057fc:	9305      	str	r3, [sp, #20]
 80057fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058e4 <_vfiprintf_r+0x25c>
 8005802:	7821      	ldrb	r1, [r4, #0]
 8005804:	2203      	movs	r2, #3
 8005806:	4650      	mov	r0, sl
 8005808:	f7fa fcea 	bl	80001e0 <memchr>
 800580c:	b140      	cbz	r0, 8005820 <_vfiprintf_r+0x198>
 800580e:	2340      	movs	r3, #64	; 0x40
 8005810:	eba0 000a 	sub.w	r0, r0, sl
 8005814:	fa03 f000 	lsl.w	r0, r3, r0
 8005818:	9b04      	ldr	r3, [sp, #16]
 800581a:	4303      	orrs	r3, r0
 800581c:	3401      	adds	r4, #1
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005824:	482c      	ldr	r0, [pc, #176]	; (80058d8 <_vfiprintf_r+0x250>)
 8005826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800582a:	2206      	movs	r2, #6
 800582c:	f7fa fcd8 	bl	80001e0 <memchr>
 8005830:	2800      	cmp	r0, #0
 8005832:	d03f      	beq.n	80058b4 <_vfiprintf_r+0x22c>
 8005834:	4b29      	ldr	r3, [pc, #164]	; (80058dc <_vfiprintf_r+0x254>)
 8005836:	bb1b      	cbnz	r3, 8005880 <_vfiprintf_r+0x1f8>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	3307      	adds	r3, #7
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	3308      	adds	r3, #8
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005846:	443b      	add	r3, r7
 8005848:	9309      	str	r3, [sp, #36]	; 0x24
 800584a:	e767      	b.n	800571c <_vfiprintf_r+0x94>
 800584c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005850:	460c      	mov	r4, r1
 8005852:	2001      	movs	r0, #1
 8005854:	e7a5      	b.n	80057a2 <_vfiprintf_r+0x11a>
 8005856:	2300      	movs	r3, #0
 8005858:	3401      	adds	r4, #1
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	4619      	mov	r1, r3
 800585e:	f04f 0c0a 	mov.w	ip, #10
 8005862:	4620      	mov	r0, r4
 8005864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005868:	3a30      	subs	r2, #48	; 0x30
 800586a:	2a09      	cmp	r2, #9
 800586c:	d903      	bls.n	8005876 <_vfiprintf_r+0x1ee>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0c5      	beq.n	80057fe <_vfiprintf_r+0x176>
 8005872:	9105      	str	r1, [sp, #20]
 8005874:	e7c3      	b.n	80057fe <_vfiprintf_r+0x176>
 8005876:	fb0c 2101 	mla	r1, ip, r1, r2
 800587a:	4604      	mov	r4, r0
 800587c:	2301      	movs	r3, #1
 800587e:	e7f0      	b.n	8005862 <_vfiprintf_r+0x1da>
 8005880:	ab03      	add	r3, sp, #12
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	462a      	mov	r2, r5
 8005886:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <_vfiprintf_r+0x258>)
 8005888:	a904      	add	r1, sp, #16
 800588a:	4630      	mov	r0, r6
 800588c:	f7fd fc8c 	bl	80031a8 <_printf_float>
 8005890:	4607      	mov	r7, r0
 8005892:	1c78      	adds	r0, r7, #1
 8005894:	d1d6      	bne.n	8005844 <_vfiprintf_r+0x1bc>
 8005896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005898:	07d9      	lsls	r1, r3, #31
 800589a:	d405      	bmi.n	80058a8 <_vfiprintf_r+0x220>
 800589c:	89ab      	ldrh	r3, [r5, #12]
 800589e:	059a      	lsls	r2, r3, #22
 80058a0:	d402      	bmi.n	80058a8 <_vfiprintf_r+0x220>
 80058a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058a4:	f7ff f9d0 	bl	8004c48 <__retarget_lock_release_recursive>
 80058a8:	89ab      	ldrh	r3, [r5, #12]
 80058aa:	065b      	lsls	r3, r3, #25
 80058ac:	f53f af12 	bmi.w	80056d4 <_vfiprintf_r+0x4c>
 80058b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b2:	e711      	b.n	80056d8 <_vfiprintf_r+0x50>
 80058b4:	ab03      	add	r3, sp, #12
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	462a      	mov	r2, r5
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <_vfiprintf_r+0x258>)
 80058bc:	a904      	add	r1, sp, #16
 80058be:	4630      	mov	r0, r6
 80058c0:	f7fd ff16 	bl	80036f0 <_printf_i>
 80058c4:	e7e4      	b.n	8005890 <_vfiprintf_r+0x208>
 80058c6:	bf00      	nop
 80058c8:	08005dd8 	.word	0x08005dd8
 80058cc:	08005df8 	.word	0x08005df8
 80058d0:	08005db8 	.word	0x08005db8
 80058d4:	08005f74 	.word	0x08005f74
 80058d8:	08005f7e 	.word	0x08005f7e
 80058dc:	080031a9 	.word	0x080031a9
 80058e0:	08005663 	.word	0x08005663
 80058e4:	08005f7a 	.word	0x08005f7a

080058e8 <_sbrk_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	; (8005904 <_sbrk_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f000 f992 	bl	8005c1c <_sbrk>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_sbrk_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_sbrk_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000490 	.word	0x20000490

08005908 <__sread>:
 8005908:	b510      	push	{r4, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	f000 f8e2 	bl	8005ad8 <_read_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	bfab      	itete	ge
 8005918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800591a:	89a3      	ldrhlt	r3, [r4, #12]
 800591c:	181b      	addge	r3, r3, r0
 800591e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005922:	bfac      	ite	ge
 8005924:	6563      	strge	r3, [r4, #84]	; 0x54
 8005926:	81a3      	strhlt	r3, [r4, #12]
 8005928:	bd10      	pop	{r4, pc}

0800592a <__swrite>:
 800592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592e:	461f      	mov	r7, r3
 8005930:	898b      	ldrh	r3, [r1, #12]
 8005932:	05db      	lsls	r3, r3, #23
 8005934:	4605      	mov	r5, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4616      	mov	r6, r2
 800593a:	d505      	bpl.n	8005948 <__swrite+0x1e>
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	2302      	movs	r3, #2
 8005942:	2200      	movs	r2, #0
 8005944:	f000 f898 	bl	8005a78 <_lseek_r>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	4632      	mov	r2, r6
 8005956:	463b      	mov	r3, r7
 8005958:	4628      	mov	r0, r5
 800595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	f000 b817 	b.w	8005990 <_write_r>

08005962 <__sseek>:
 8005962:	b510      	push	{r4, lr}
 8005964:	460c      	mov	r4, r1
 8005966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596a:	f000 f885 	bl	8005a78 <_lseek_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	bf15      	itete	ne
 8005974:	6560      	strne	r0, [r4, #84]	; 0x54
 8005976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800597a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800597e:	81a3      	strheq	r3, [r4, #12]
 8005980:	bf18      	it	ne
 8005982:	81a3      	strhne	r3, [r4, #12]
 8005984:	bd10      	pop	{r4, pc}

08005986 <__sclose>:
 8005986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598a:	f000 b831 	b.w	80059f0 <_close_r>
	...

08005990 <_write_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_write_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fb ff45 	bl	800182e <_write>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_write_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_write_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000490 	.word	0x20000490

080059b4 <__assert_func>:
 80059b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059b6:	4614      	mov	r4, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <__assert_func+0x2c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4605      	mov	r5, r0
 80059c0:	68d8      	ldr	r0, [r3, #12]
 80059c2:	b14c      	cbz	r4, 80059d8 <__assert_func+0x24>
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <__assert_func+0x30>)
 80059c6:	9100      	str	r1, [sp, #0]
 80059c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059cc:	4906      	ldr	r1, [pc, #24]	; (80059e8 <__assert_func+0x34>)
 80059ce:	462b      	mov	r3, r5
 80059d0:	f000 f81e 	bl	8005a10 <fiprintf>
 80059d4:	f000 f89f 	bl	8005b16 <abort>
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <__assert_func+0x38>)
 80059da:	461c      	mov	r4, r3
 80059dc:	e7f3      	b.n	80059c6 <__assert_func+0x12>
 80059de:	bf00      	nop
 80059e0:	2000001c 	.word	0x2000001c
 80059e4:	08005f85 	.word	0x08005f85
 80059e8:	08005f92 	.word	0x08005f92
 80059ec:	08005fc0 	.word	0x08005fc0

080059f0 <_close_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	; (8005a0c <_close_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f000 f8d6 	bl	8005bac <_close>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_close_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_close_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000490 	.word	0x20000490

08005a10 <fiprintf>:
 8005a10:	b40e      	push	{r1, r2, r3}
 8005a12:	b503      	push	{r0, r1, lr}
 8005a14:	4601      	mov	r1, r0
 8005a16:	ab03      	add	r3, sp, #12
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <fiprintf+0x20>)
 8005a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1e:	6800      	ldr	r0, [r0, #0]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f7ff fe31 	bl	8005688 <_vfiprintf_r>
 8005a26:	b002      	add	sp, #8
 8005a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a2c:	b003      	add	sp, #12
 8005a2e:	4770      	bx	lr
 8005a30:	2000001c 	.word	0x2000001c

08005a34 <_fstat_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4d07      	ldr	r5, [pc, #28]	; (8005a54 <_fstat_r+0x20>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	f000 f8bb 	bl	8005bbc <_fstat>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d102      	bne.n	8005a50 <_fstat_r+0x1c>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	b103      	cbz	r3, 8005a50 <_fstat_r+0x1c>
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	bd38      	pop	{r3, r4, r5, pc}
 8005a52:	bf00      	nop
 8005a54:	20000490 	.word	0x20000490

08005a58 <_isatty_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d06      	ldr	r5, [pc, #24]	; (8005a74 <_isatty_r+0x1c>)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f000 f8ba 	bl	8005bdc <_isatty>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_isatty_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_isatty_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20000490 	.word	0x20000490

08005a78 <_lseek_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d07      	ldr	r5, [pc, #28]	; (8005a98 <_lseek_r+0x20>)
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	4608      	mov	r0, r1
 8005a80:	4611      	mov	r1, r2
 8005a82:	2200      	movs	r2, #0
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f000 f8b8 	bl	8005bfc <_lseek>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_lseek_r+0x1e>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_lseek_r+0x1e>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	20000490 	.word	0x20000490

08005a9c <__ascii_mbtowc>:
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	b901      	cbnz	r1, 8005aa2 <__ascii_mbtowc+0x6>
 8005aa0:	a901      	add	r1, sp, #4
 8005aa2:	b142      	cbz	r2, 8005ab6 <__ascii_mbtowc+0x1a>
 8005aa4:	b14b      	cbz	r3, 8005aba <__ascii_mbtowc+0x1e>
 8005aa6:	7813      	ldrb	r3, [r2, #0]
 8005aa8:	600b      	str	r3, [r1, #0]
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	1e10      	subs	r0, r2, #0
 8005aae:	bf18      	it	ne
 8005ab0:	2001      	movne	r0, #1
 8005ab2:	b002      	add	sp, #8
 8005ab4:	4770      	bx	lr
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	e7fb      	b.n	8005ab2 <__ascii_mbtowc+0x16>
 8005aba:	f06f 0001 	mvn.w	r0, #1
 8005abe:	e7f8      	b.n	8005ab2 <__ascii_mbtowc+0x16>

08005ac0 <__malloc_lock>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <__malloc_lock+0x8>)
 8005ac2:	f7ff b8c0 	b.w	8004c46 <__retarget_lock_acquire_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	20000484 	.word	0x20000484

08005acc <__malloc_unlock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	; (8005ad4 <__malloc_unlock+0x8>)
 8005ace:	f7ff b8bb 	b.w	8004c48 <__retarget_lock_release_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	20000484 	.word	0x20000484

08005ad8 <_read_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d07      	ldr	r5, [pc, #28]	; (8005af8 <_read_r+0x20>)
 8005adc:	4604      	mov	r4, r0
 8005ade:	4608      	mov	r0, r1
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	602a      	str	r2, [r5, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 f890 	bl	8005c0c <_read>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_read_r+0x1e>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_read_r+0x1e>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000490 	.word	0x20000490

08005afc <__ascii_wctomb>:
 8005afc:	b149      	cbz	r1, 8005b12 <__ascii_wctomb+0x16>
 8005afe:	2aff      	cmp	r2, #255	; 0xff
 8005b00:	bf85      	ittet	hi
 8005b02:	238a      	movhi	r3, #138	; 0x8a
 8005b04:	6003      	strhi	r3, [r0, #0]
 8005b06:	700a      	strbls	r2, [r1, #0]
 8005b08:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b0c:	bf98      	it	ls
 8005b0e:	2001      	movls	r0, #1
 8005b10:	4770      	bx	lr
 8005b12:	4608      	mov	r0, r1
 8005b14:	4770      	bx	lr

08005b16 <abort>:
 8005b16:	b508      	push	{r3, lr}
 8005b18:	2006      	movs	r0, #6
 8005b1a:	f000 f82b 	bl	8005b74 <raise>
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f000 f88a 	bl	8005c38 <_exit>

08005b24 <_raise_r>:
 8005b24:	291f      	cmp	r1, #31
 8005b26:	b538      	push	{r3, r4, r5, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	d904      	bls.n	8005b38 <_raise_r+0x14>
 8005b2e:	2316      	movs	r3, #22
 8005b30:	6003      	str	r3, [r0, #0]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b3a:	b112      	cbz	r2, 8005b42 <_raise_r+0x1e>
 8005b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b40:	b94b      	cbnz	r3, 8005b56 <_raise_r+0x32>
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 f830 	bl	8005ba8 <_getpid_r>
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b52:	f000 b817 	b.w	8005b84 <_kill_r>
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d00a      	beq.n	8005b70 <_raise_r+0x4c>
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	d103      	bne.n	8005b66 <_raise_r+0x42>
 8005b5e:	2316      	movs	r3, #22
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	2001      	movs	r0, #1
 8005b64:	e7e7      	b.n	8005b36 <_raise_r+0x12>
 8005b66:	2400      	movs	r4, #0
 8005b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	4798      	blx	r3
 8005b70:	2000      	movs	r0, #0
 8005b72:	e7e0      	b.n	8005b36 <_raise_r+0x12>

08005b74 <raise>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <raise+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f7ff bfd3 	b.w	8005b24 <_raise_r>
 8005b7e:	bf00      	nop
 8005b80:	2000001c 	.word	0x2000001c

08005b84 <_kill_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	; (8005ba4 <_kill_r+0x20>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	f000 f82b 	bl	8005bec <_kill>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d102      	bne.n	8005ba0 <_kill_r+0x1c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b103      	cbz	r3, 8005ba0 <_kill_r+0x1c>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000490 	.word	0x20000490

08005ba8 <_getpid_r>:
 8005ba8:	f000 b810 	b.w	8005bcc <_getpid>

08005bac <_close>:
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <_close+0xc>)
 8005bae:	2258      	movs	r2, #88	; 0x58
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	4770      	bx	lr
 8005bb8:	20000490 	.word	0x20000490

08005bbc <_fstat>:
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <_fstat+0xc>)
 8005bbe:	2258      	movs	r2, #88	; 0x58
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	4770      	bx	lr
 8005bc8:	20000490 	.word	0x20000490

08005bcc <_getpid>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	; (8005bd8 <_getpid+0xc>)
 8005bce:	2258      	movs	r2, #88	; 0x58
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	4770      	bx	lr
 8005bd8:	20000490 	.word	0x20000490

08005bdc <_isatty>:
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <_isatty+0xc>)
 8005bde:	2258      	movs	r2, #88	; 0x58
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	2000      	movs	r0, #0
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000490 	.word	0x20000490

08005bec <_kill>:
 8005bec:	4b02      	ldr	r3, [pc, #8]	; (8005bf8 <_kill+0xc>)
 8005bee:	2258      	movs	r2, #88	; 0x58
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf6:	4770      	bx	lr
 8005bf8:	20000490 	.word	0x20000490

08005bfc <_lseek>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <_lseek+0xc>)
 8005bfe:	2258      	movs	r2, #88	; 0x58
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295
 8005c06:	4770      	bx	lr
 8005c08:	20000490 	.word	0x20000490

08005c0c <_read>:
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <_read+0xc>)
 8005c0e:	2258      	movs	r2, #88	; 0x58
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f04f 30ff 	mov.w	r0, #4294967295
 8005c16:	4770      	bx	lr
 8005c18:	20000490 	.word	0x20000490

08005c1c <_sbrk>:
 8005c1c:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <_sbrk+0x14>)
 8005c1e:	6811      	ldr	r1, [r2, #0]
 8005c20:	4603      	mov	r3, r0
 8005c22:	b909      	cbnz	r1, 8005c28 <_sbrk+0xc>
 8005c24:	4903      	ldr	r1, [pc, #12]	; (8005c34 <_sbrk+0x18>)
 8005c26:	6011      	str	r1, [r2, #0]
 8005c28:	6810      	ldr	r0, [r2, #0]
 8005c2a:	4403      	add	r3, r0
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4770      	bx	lr
 8005c30:	20000494 	.word	0x20000494
 8005c34:	20000498 	.word	0x20000498

08005c38 <_exit>:
 8005c38:	e7fe      	b.n	8005c38 <_exit>
	...

08005c3c <_init>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr

08005c48 <_fini>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr
