
STM32L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e24c  08008890  08008890  00009890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026adc  08026adc  000281c8  2**0
                  CONTENTS
  4 .ARM          00000008  08026adc  08026adc  00027adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026ae4  08026ae4  000281c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026ae4  08026ae4  00027ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026ae8  08026ae8  00027ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08026aec  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000281c8  2**0
                  CONTENTS
 10 .bss          00000170  200001c8  200001c8  000281c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000338  20000338  000281c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000281c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000425f  00000000  00000000  000281f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001201  00000000  00000000  0002c457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000328  00000000  00000000  0002d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000237  00000000  00000000  0002d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000aa99  00000000  00000000  0002dbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007179  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000851b1  00000000  00000000  0003f7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000093  00000000  00000000  000c497a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021b4  00000000  00000000  000c4a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000c6bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008874 	.word	0x08008874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08008874 	.word	0x08008874

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <convolve>:
		complex_t *pOutput,
		Morlet_t *mor,
		uint32_t sigLen,
		uint32_t newsize,
		float32_t scale,
		bool isLastScale){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	@ 0x30
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	6178      	str	r0, [r7, #20]
 8000cfc:	6139      	str	r1, [r7, #16]
 8000cfe:	60fa      	str	r2, [r7, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	ed87 0a01 	vstr	s0, [r7, #4]

	if(isLastScale){
 8000d06:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d02b      	beq.n	8000d66 <convolve+0x72>
		//Inicializo buffer temporal
		complex_t *lastscalemem = (complex_t*)aligned_alloc(32, newsize*sizeof(complex_t));
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4619      	mov	r1, r3
 8000d14:	2020      	movs	r0, #32
 8000d16:	f002 fe47 	bl	80039a8 <aligned_alloc>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	61fb      	str	r3, [r7, #28]
		arm_fill_f32(0.0f, (float32_t*)lastscalemem, 2*newsize);
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	69f8      	ldr	r0, [r7, #28]
 8000d26:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8000da4 <convolve+0xb0>
 8000d2a:	f001 fdc5 	bl	80028b8 <arm_fill_f32>
		fftbased(pInv, Ihat, O1, lastscalemem, mor->base.mother, newsize,
 8000d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d34:	b292      	uxth	r2, r2
 8000d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d38:	7b09      	ldrb	r1, [r1, #12]
 8000d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d3c:	7b40      	ldrb	r0, [r0, #13]
 8000d3e:	9003      	str	r0, [sp, #12]
 8000d40:	9102      	str	r1, [sp, #8]
 8000d42:	9201      	str	r2, [sp, #4]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	6939      	ldr	r1, [r7, #16]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f000 f82b 	bl	8000dac <fftbased>
				scale,mor->base.imag_frequency,mor->base.doublesided);
		arm_copy_f32((float32_t*)lastscalemem,(float32_t*)pOutput, 2*newsize);
 8000d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	69f8      	ldr	r0, [r7, #28]
 8000d60:	f001 fd78 	bl	8002854 <arm_copy_f32>
		if(!pOutput)printf("LA SALIDA NO ES UN PUNTERO\r\n");
		fftbased(pInv, Ihat, O1,pOutput , mor->base.mother, newsize,
						scale,mor->base.imag_frequency,mor->base.doublesided);

	}
}
 8000d64:	e019      	b.n	8000d9a <convolve+0xa6>
		if(!pOutput)printf("LA SALIDA NO ES UN PUNTERO\r\n");
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <convolve+0x7e>
 8000d6c:	480e      	ldr	r0, [pc, #56]	@ (8000da8 <convolve+0xb4>)
 8000d6e:	f003 fef5 	bl	8004b5c <puts>
		fftbased(pInv, Ihat, O1,pOutput , mor->base.mother, newsize,
 8000d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d78:	b292      	uxth	r2, r2
 8000d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d7c:	7b09      	ldrb	r1, [r1, #12]
 8000d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d80:	7b40      	ldrb	r0, [r0, #13]
 8000d82:	9003      	str	r0, [sp, #12]
 8000d84:	9102      	str	r1, [sp, #8]
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f000 f809 	bl	8000dac <fftbased>
}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	00000000 	.word	0x00000000
 8000da8:	08008890 	.word	0x08008890

08000dac <fftbased>:
		complex_t *pOut,
		float32_t *mother,
		uint16_t size,
		float32_t scale,
		bool imaginary,
		bool doublesided){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6178      	str	r0, [r7, #20]
 8000db4:	6139      	str	r1, [r7, #16]
 8000db6:	60fa      	str	r2, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	ed87 0a01 	vstr	s0, [r7, #4]

	//Realizo la multiplicacion
	daughter_wavelet_multiplication(Ihat, O1, mother, scale, size, imaginary, doublesided);
 8000dbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	ed97 0a01 	vldr	s0, [r7, #4]
 8000dd2:	6a3a      	ldr	r2, [r7, #32]
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	f000 f812 	bl	8000e00 <daughter_wavelet_multiplication>
	//Realizo la IFFT del resultado de la multiplicacion
	arm_cfft_f32(pInv, (float32_t*)O1, IFFT, ENABLE);
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2201      	movs	r2, #1
 8000de0:	68f9      	ldr	r1, [r7, #12]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f001 fd8a 	bl	80028fc <arm_cfft_f32>
	arm_copy_f32((float32_t*)O1,(float32_t*)pOut, 2*size);
 8000de8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	461a      	mov	r2, r3
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f001 fd2f 	bl	8002854 <arm_copy_f32>

}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <daughter_wavelet_multiplication>:
		float32_t const *mother,
		float32_t  scale,
		uint16_t isize,
		bool imaginary,
		bool doublesided)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b092      	sub	sp, #72	@ 0x48
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6178      	str	r0, [r7, #20]
 8000e08:	6139      	str	r1, [r7, #16]
 8000e0a:	60fa      	str	r2, [r7, #12]
 8000e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e10:	80fb      	strh	r3, [r7, #6]
	float32_t isizef=(float32_t)isize;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float32_t endpointf;
	uint32_t s1 = isize - 1;
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
	//Busco el indice hasta el cual aplico la multiplicacion
	if (isizef<(isizef*2.0f/scale)) {
 8000e26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e2a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000e2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e36:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	d502      	bpl.n	8000e4a <daughter_wavelet_multiplication+0x4a>
		endpointf=isizef;
 8000e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e48:	e009      	b.n	8000e5e <daughter_wavelet_multiplication+0x5e>
	} else {
		endpointf=(isizef*2.0f/scale);
 8000e4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000e52:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e5a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	}
	//Calculo el paso en el indice de la escala
	float32_t step= (scale/2.0f);
 8000e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e62:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	//Trunco endpointf para obtener el indice enter
	uint32_t endpoint= (uint32_t)endpointf;
 8000e6e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e76:	ee17 3a90 	vmov	r3, s15
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float32_t tmp;
	uint32_t index;
	//Preparo el vector por el cual voy a multiplicar
	float32_t *tmpVector=(float32_t*)malloc(sizeof(float32_t) * isize);
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fdb7 	bl	80039f4 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24

	arm_fill_f32(1.0f, tmpVector, isize);
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e94:	f001 fd10 	bl	80028b8 <arm_fill_f32>
	//Le hago el downsampling a la wavelet hija
	for (int q = 0; q < endpoint; q++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e9c:	e033      	b.n	8000f06 <daughter_wavelet_multiplication+0x106>
		tmp=step * (float32_t)q;
 8000e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		if (tmp > isizef - 1) tmp = isizef - 1;
 8000eb4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ec0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ecc:	dd07      	ble.n	8000ede <daughter_wavelet_multiplication+0xde>
 8000ece:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eda:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		int index = (int)tmp;
 8000ede:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee6:	ee17 3a90 	vmov	r3, s15
 8000eea:	61bb      	str	r3, [r7, #24]
		tmpVector[q]=mother[index];
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000efa:	440b      	add	r3, r1
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	601a      	str	r2, [r3, #0]
	for (int q = 0; q < endpoint; q++) {
 8000f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f02:	3301      	adds	r3, #1
 8000f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8c7      	bhi.n	8000e9e <daughter_wavelet_multiplication+0x9e>
	}

	//Aplico la conjugada si es necesario
	if(imaginary)
 8000f0e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d01d      	beq.n	8000f52 <daughter_wavelet_multiplication+0x152>
	{
		float32_t *tmpVector2=(float32_t*)malloc(sizeof(float32_t) * isize);
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fd6a 	bl	80039f4 <malloc>
 8000f20:	4603      	mov	r3, r0
 8000f22:	623b      	str	r3, [r7, #32]
		arm_fill_f32(0.0f, tmpVector2, isize);
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	4619      	mov	r1, r3
 8000f28:	6a38      	ldr	r0, [r7, #32]
 8000f2a:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800104c <daughter_wavelet_multiplication+0x24c>
 8000f2e:	f001 fcc3 	bl	80028b8 <arm_fill_f32>
		arm_cmplx_mult_real_f32((float32_t*)input, tmpVector,tmpVector2, endpoint);
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	6a3a      	ldr	r2, [r7, #32]
 8000f36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f38:	6978      	ldr	r0, [r7, #20]
 8000f3a:	f001 fbab 	bl	8002694 <arm_cmplx_mult_real_f32>
		arm_cmplx_conj_f32(tmpVector2, (float32_t*)output,isize);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	461a      	mov	r2, r3
 8000f42:	6939      	ldr	r1, [r7, #16]
 8000f44:	6a38      	ldr	r0, [r7, #32]
 8000f46:	f001 fb49 	bl	80025dc <arm_cmplx_conj_f32>
		free(tmpVector2);
 8000f4a:	6a38      	ldr	r0, [r7, #32]
 8000f4c:	f002 fd5a 	bl	8003a04 <free>
 8000f50:	e008      	b.n	8000f64 <daughter_wavelet_multiplication+0x164>
	}
	else{
		//Multiplico la wavelet hija por la transformada de la señal
		arm_cmplx_mult_real_f32((float32_t*)input, tmpVector,(float32_t*)output, endpoint);
 8000f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f001 fb9b 	bl	8002694 <arm_cmplx_mult_real_f32>
		free(tmpVector);
 8000f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f60:	f002 fd50 	bl	8003a04 <free>
	}
	//Si se requiere procesar la parte negativa (doublesided)
	if(doublesided){
 8000f64:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d06b      	beq.n	8001044 <daughter_wavelet_multiplication+0x244>
		for (int i = 0; i < endpoint;i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f70:	e064      	b.n	800103c <daughter_wavelet_multiplication+0x23c>
		{
			tmp=step * (float32_t)i;
 8000f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f84:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			if (tmp > isizef - 1) tmp = isizef - 1;
 8000f88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f94:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	dd07      	ble.n	8000fb2 <daughter_wavelet_multiplication+0x1b2>
 8000fa2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fae:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			int index = (int)tmp;
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fba:	ee17 3a90 	vmov	r3, s15
 8000fbe:	61fb      	str	r3, [r7, #28]
			output[s1 -i].real = input[s1 - i].real * mother[index] * (1 - 2 * imaginary);
 8000fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4413      	add	r3, r2
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	f1c3 0301 	rsb	r3, r3, #1
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	edc3 7a00 	vstr	s15, [r3]
			output[s1 -i].imag = input[s1 - i].imag * mother[index];
 8001006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4413      	add	r3, r2
 8001012:	ed93 7a01 	vldr	s14, [r3, #4]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4413      	add	r3, r2
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	edc3 7a01 	vstr	s15, [r3, #4]
		for (int i = 0; i < endpoint;i++)
 8001036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001038:	3301      	adds	r3, #1
 800103a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800103c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800103e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001040:	429a      	cmp	r2, r3
 8001042:	d896      	bhi.n	8000f72 <daughter_wavelet_multiplication+0x172>
		}
	}
}
 8001044:	bf00      	nop
 8001046:	3748      	adds	r7, #72	@ 0x48
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	00000000 	.word	0x00000000

08001050 <cwt>:
 */
void cwt(Morlet_t *mor,
		Scales_t *scales,
		float32_t *inputSignal,
		uint32_t sigLen,
		complex_t *pOutput){
 8001050:	b580      	push	{r7, lr}
 8001052:	b098      	sub	sp, #96	@ 0x60
 8001054:	af04      	add	r7, sp, #16
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	//Arreglos Temporales
	complex_t *Ihat, *O1;
	//Encuentro la potencia de dos más cercana al tamaño de la señal de entrada
	const uint32_t newsize = find2power(sigLen);
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f000 f8bc 	bl	80011dc <find2power>
 8001064:	6478      	str	r0, [r7, #68]	@ 0x44
	//Cannot pass the nyquist frequency
	assert(newsize <= 4096 && "Tamaño de la transformada no soportado");
 8001066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800106c:	d905      	bls.n	800107a <cwt+0x2a>
 800106e:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <cwt+0x17c>)
 8001070:	4a57      	ldr	r2, [pc, #348]	@ (80011d0 <cwt+0x180>)
 8001072:	21b7      	movs	r1, #183	@ 0xb7
 8001074:	4857      	ldr	r0, [pc, #348]	@ (80011d4 <cwt+0x184>)
 8001076:	f002 fc9f 	bl	80039b8 <__assert_func>
	//Inicializo los resultados intermedios de la FFT
	//Como resultado de la RFFT tengo una salida de (N/2 + 1)numeros complejos
	Ihat = (complex_t*)aligned_alloc(32, newsize*sizeof(complex_t));
 800107a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4619      	mov	r1, r3
 8001080:	2020      	movs	r0, #32
 8001082:	f002 fc91 	bl	80039a8 <aligned_alloc>
 8001086:	4603      	mov	r3, r0
 8001088:	643b      	str	r3, [r7, #64]	@ 0x40
	O1 = (complex_t*)aligned_alloc(32, newsize*sizeof(complex_t));
 800108a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4619      	mov	r1, r3
 8001090:	2020      	movs	r0, #32
 8001092:	f002 fc89 	bl	80039a8 <aligned_alloc>
 8001096:	4603      	mov	r3, r0
 8001098:	63fb      	str	r3, [r7, #60]	@ 0x3c
	arm_fill_f32(0.0f, (float32_t*)Ihat, 2*newsize);
 800109a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80010a2:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80011d8 <cwt+0x188>
 80010a6:	f001 fc07 	bl	80028b8 <arm_fill_f32>
	arm_fill_f32(0.0f, (float32_t*)O1, 2*newsize);
 80010aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010b2:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80011d8 <cwt+0x188>
 80010b6:	f001 fbff 	bl	80028b8 <arm_fill_f32>
	arm_rfft_fast_instance_f32 myFFTObject;
	//Instancio otra estructura pero para calcular la IFFT compleja
	arm_cfft_instance_f32 myIFFTObject;
	//Loa inicializo
	arm_status status;
	status=arm_rfft_fast_init_f32(&myFFTObject, newsize);
 80010ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 f911 	bl	80032ec <arm_rfft_fast_init_f32>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	status=arm_cfft_init_f32(&myIFFTObject, newsize);
 80010d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 f80a 	bl	80030f4 <arm_cfft_init_f32>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	//Calculo la FFT
	arm_rfft_fast_f32(&myFFTObject, inputSignal,(float32_t *)Ihat, FFT);
 80010e6:	f107 0020 	add.w	r0, r7, #32
 80010ea:	2300      	movs	r3, #0
 80010ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f002 f84a 	bl	8003188 <arm_rfft_fast_f32>
	//Genero la wavelet madre en el dominio de la frecuencia
	morlet_Gen_Freq(mor, newsize);
 80010f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 fbcc 	bl	8001894 <morlet_Gen_Freq>
	//Aplico al vector de salida la simetria hermitiana F(-w)=F*(w)
	//Esto me permite tener una señal cuando haga la transformada inversa
	for(int i=1; i<(newsize>>1); i++) {
 80010fc:	2301      	movs	r3, #1
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001100:	e01e      	b.n	8001140 <cwt+0xf0>
		Ihat[newsize-i].real = Ihat[i].real;
 8001102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001108:	441a      	add	r2, r3
 800110a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800110c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800110e:	1acb      	subs	r3, r1, r3
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001114:	440b      	add	r3, r1
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	601a      	str	r2, [r3, #0]
		Ihat[newsize-i].imag = -Ihat[i].imag;
 800111a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001120:	4413      	add	r3, r2
 8001122:	edd3 7a01 	vldr	s15, [r3, #4]
 8001126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001130:	4413      	add	r3, r2
 8001132:	eef1 7a67 	vneg.f32	s15, s15
 8001136:	edc3 7a01 	vstr	s15, [r3, #4]
	for(int i=1; i<(newsize>>1); i++) {
 800113a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800113c:	3301      	adds	r3, #1
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001142:	085a      	lsrs	r2, r3, #1
 8001144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001146:	429a      	cmp	r2, r3
 8001148:	d8db      	bhi.n	8001102 <cwt+0xb2>
	}
	//Para cada una de las escalas se multiplican a cada punto
	//del espectro FFT de la señal de entrada
	for (int i = 0; i < scales->nscales; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800114e:	e027      	b.n	80011a0 <cwt+0x150>
		convolve(&myIFFTObject, Ihat, O1, pOutput, mor, sigLen,
				newsize, scales->scales[i], i==(scales->nscales-1));
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
		convolve(&myIFFTObject, Ihat, O1, pOutput, mor, sigLen,
 800115a:	edd3 7a00 	vldr	s15, [r3]
				newsize, scales->scales[i], i==(scales->nscales-1));
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	3b01      	subs	r3, #1
		convolve(&myIFFTObject, Ihat, O1, pOutput, mor, sigLen,
 8001164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001166:	429a      	cmp	r2, r3
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f107 0010 	add.w	r0, r7, #16
 8001174:	9303      	str	r3, [sp, #12]
 8001176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	eeb0 0a67 	vmov.f32	s0, s15
 8001186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001188:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800118a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800118c:	f7ff fdb2 	bl	8000cf4 <convolve>
		pOutput= pOutput + sigLen;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001196:	4413      	add	r3, r2
 8001198:	65bb      	str	r3, [r7, #88]	@ 0x58
	for (int i = 0; i < scales->nscales; i++) {
 800119a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800119c:	3301      	adds	r3, #1
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbd2      	blt.n	8001150 <cwt+0x100>
	}
	//Libero memoria que ya no necesito
	free(Ihat);
 80011aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80011ac:	f002 fc2a 	bl	8003a04 <free>
	free(O1);
 80011b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011b2:	f002 fc27 	bl	8003a04 <free>
	free(mor);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f002 fc24 	bl	8003a04 <free>
	free(scales);
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f002 fc21 	bl	8003a04 <free>
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	@ 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080088ac 	.word	0x080088ac
 80011d0:	080089d4 	.word	0x080089d4
 80011d4:	080088ec 	.word	0x080088ec
 80011d8:	00000000 	.word	0x00000000

080011dc <find2power>:



uint32_t find2power(uint32_t n)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    // Si n es 0, definimos que la función retorne 0 para evitar bucle infinito.
    if(n == 0)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <find2power+0x12>
        return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e00a      	b.n	8001204 <find2power+0x28>

    uint32_t m2 = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
    // Mientras m2 sea menor que n, se multiplica por 2
    while(m2 < n) {
 80011f2:	e002      	b.n	80011fa <find2power+0x1e>
        m2 <<= 1;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
    while(m2 < n) {
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3f8      	bcc.n	80011f4 <find2power+0x18>
    }
    return m2;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <scales_Init>:
		Wavelet_t *wav,
		SCALETYPE st,
		int32_t afs,
		float32_t af0,
		float32_t af1,
		int32_t afn){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6178      	str	r0, [r7, #20]
 8001218:	6139      	str	r1, [r7, #16]
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001220:	edc7 0a00 	vstr	s1, [r7]
 8001224:	4613      	mov	r3, r2
 8001226:	73fb      	strb	r3, [r7, #15]
	//Save parameters
	myScales->fs=afs;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	605a      	str	r2, [r3, #4]
	myScales->nscales = afn;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	6a3a      	ldr	r2, [r7, #32]
 8001232:	609a      	str	r2, [r3, #8]
	//Initialize memory for scales array
	myScales->scales = (float32_t*)malloc(afn*sizeof(float32_t));
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fbdb 	bl	80039f4 <malloc>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	601a      	str	r2, [r3, #0]
	//Calculate scales array
	if (st==FCWT_LINSCALES) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <scales_Init+0x50>
		calculate_linscale_array(myScales, afs, af0, af1, afn);
 800124c:	6a3a      	ldr	r2, [r7, #32]
 800124e:	edd7 0a00 	vldr	s1, [r7]
 8001252:	ed97 0a01 	vldr	s0, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	6978      	ldr	r0, [r7, #20]
 800125a:	f000 f90b 	bl	8001474 <calculate_linscale_array>
	} else{
		calculate_linfreq_array(myScales, afs, af0, af1, afn);

	}

}
 800125e:	e017      	b.n	8001290 <scales_Init+0x80>
	} else if (st==FCWT_LOGSCALES) {
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10b      	bne.n	800127e <scales_Init+0x6e>
		calculate_logscale_array(myScales,2.0f, afs, af0, af1, afn);
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	ed97 1a00 	vldr	s2, [r7]
 800126c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f000 f80e 	bl	8001298 <calculate_logscale_array>
}
 800127c:	e008      	b.n	8001290 <scales_Init+0x80>
		calculate_linfreq_array(myScales, afs, af0, af1, afn);
 800127e:	6a3a      	ldr	r2, [r7, #32]
 8001280:	edd7 0a00 	vldr	s1, [r7]
 8001284:	ed97 0a01 	vldr	s0, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f000 f974 	bl	8001578 <calculate_linfreq_array>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <calculate_logscale_array>:
void calculate_logscale_array(Scales_t *myScales,
		float32_t base,
		int32_t fs,
		float32_t f0,
		float32_t f1,
		int32_t fn){
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b092      	sub	sp, #72	@ 0x48
 800129c:	af00      	add	r7, sp, #0
 800129e:	6178      	str	r0, [r7, #20]
 80012a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80012a4:	60f9      	str	r1, [r7, #12]
 80012a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80012ae:	603a      	str	r2, [r7, #0]
	//If a signal has fs=100hz and you want to measure [0.1-50]Hz, you need scales 2 to 1000;
	float32_t nf0 = f0;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
	float32_t nf1 = f1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	//Calculando escalas inicial y final
	float32_t s0 = (fs/nf1);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012c2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80012c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	float32_t s1 = (fs/nf0);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	//Cannot pass the nyquist frequency
	assert(f1 <= fs/2 && "Max frequency cannot be higher than the Nyquist frequency (fs/2)");
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	0fda      	lsrs	r2, r3, #31
 80012e8:	4413      	add	r3, r2
 80012ea:	105b      	asrs	r3, r3, #1
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	d905      	bls.n	800130e <calculate_logscale_array+0x76>
 8001302:	4b58      	ldr	r3, [pc, #352]	@ (8001464 <calculate_logscale_array+0x1cc>)
 8001304:	4a58      	ldr	r2, [pc, #352]	@ (8001468 <calculate_logscale_array+0x1d0>)
 8001306:	2146      	movs	r1, #70	@ 0x46
 8001308:	4858      	ldr	r0, [pc, #352]	@ (800146c <calculate_logscale_array+0x1d4>)
 800130a:	f002 fb55 	bl	80039b8 <__assert_func>
	//Calculo el exponente logaritmico inicial
	float32_t power0 = log(s0)/log(base);
 800130e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	ec43 2b10 	vmov	d0, r2, r3
 800131c:	f006 ff80 	bl	8008220 <log>
 8001320:	ec55 4b10 	vmov	r4, r5, d0
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	ec43 2b10 	vmov	d0, r2, r3
 8001332:	f006 ff75 	bl	8008220 <log>
 8001336:	ec53 2b10 	vmov	r2, r3, d0
 800133a:	4620      	mov	r0, r4
 800133c:	4629      	mov	r1, r5
 800133e:	f7ff fa85 	bl	800084c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fc4d 	bl	8000be8 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
	//Calculo el exponente logaritmico final
	float32_t power1 = log(s1)/log(base);
 8001352:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ec43 2b10 	vmov	d0, r2, r3
 8001360:	f006 ff5e 	bl	8008220 <log>
 8001364:	ec55 4b10 	vmov	r4, r5, d0
 8001368:	6938      	ldr	r0, [r7, #16]
 800136a:	f7ff f8ed 	bl	8000548 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	ec43 2b10 	vmov	d0, r2, r3
 8001376:	f006 ff53 	bl	8008220 <log>
 800137a:	ec53 2b10 	vmov	r2, r3, d0
 800137e:	4620      	mov	r0, r4
 8001380:	4629      	mov	r1, r5
 8001382:	f7ff fa63 	bl	800084c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fc2b 	bl	8000be8 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//Calculo el paso de cada exponente
	float32_t dpower = power1-power0;
 8001396:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800139a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800139e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	dpower /= (float32_t)(fn-1);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80013b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	//Reservo memoria para mi vector de exponentes logaritmicos y de pasos
	float32_t *logsSteps = (float32_t*)malloc(sizeof(float32_t) * fn);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fb16 	bl	80039f4 <malloc>
 80013c8:	4603      	mov	r3, r0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t *expLogs0   = (float32_t*)malloc(sizeof(float32_t) * fn);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fb0f 	bl	80039f4 <malloc>
 80013d6:	4603      	mov	r3, r0
 80013d8:	623b      	str	r3, [r7, #32]
	float32_t *expLogs1   = (float32_t*)malloc(sizeof(float32_t) * fn);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fb08 	bl	80039f4 <malloc>
 80013e4:	4603      	mov	r3, r0
 80013e6:	61fb      	str	r3, [r7, #28]
	//Relleno mi vector de pasos
	for (int i = 0; i <fn; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80013ec:	e011      	b.n	8001412 <calculate_logscale_array+0x17a>
		logsSteps[i]=dpower * (float32_t)i;
 80013ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fe:	4413      	add	r3, r2
 8001400:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <fn; i++) {
 800140c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800140e:	3301      	adds	r3, #1
 8001410:	647b      	str	r3, [r7, #68]	@ 0x44
 8001412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe9      	blt.n	80013ee <calculate_logscale_array+0x156>
	}
	//Calculo vectorizadamente mi array de escalas
	arm_offset_f32(logsSteps, power0, expLogs0, fn);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001426:	f001 f84d 	bl	80024c4 <arm_offset_f32>
	//Aplicando la propiedad e^(y* ln(x))=x^y entonces podemos
	//calcular la potencia base dos multiplicando el exponente por ln(2)
	//Y al resultado aplicarle la potencia de euler
	arm_scale_f32(expLogs0,(float32_t)(LN_2), expLogs1, fn);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	69f9      	ldr	r1, [r7, #28]
 8001430:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001470 <calculate_logscale_array+0x1d8>
 8001434:	6a38      	ldr	r0, [r7, #32]
 8001436:	f001 f88b 	bl	8002550 <arm_scale_f32>
	arm_vexp_f32(expLogs1, myScales->scales, fn);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	69f8      	ldr	r0, [r7, #28]
 8001444:	f001 f9f6 	bl	8002834 <arm_vexp_f32>
	//Libero la memoria ocupada por los vectores temporales
	free(logsSteps);
 8001448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800144a:	f002 fadb 	bl	8003a04 <free>
	free(expLogs0);
 800144e:	6a38      	ldr	r0, [r7, #32]
 8001450:	f002 fad8 	bl	8003a04 <free>
	free(expLogs1);
 8001454:	69f8      	ldr	r0, [r7, #28]
 8001456:	f002 fad5 	bl	8003a04 <free>

}
 800145a:	bf00      	nop
 800145c:	3748      	adds	r7, #72	@ 0x48
 800145e:	46bd      	mov	sp, r7
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	bf00      	nop
 8001464:	08008918 	.word	0x08008918
 8001468:	080089d8 	.word	0x080089d8
 800146c:	0800896c 	.word	0x0800896c
 8001470:	3f317218 	.word	0x3f317218

08001474 <calculate_linscale_array>:
 */
void calculate_linscale_array(Scales_t *myScales,
		int32_t fs,
		float32_t f0,
		float32_t f1,
		int32_t fn){
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	@ 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6178      	str	r0, [r7, #20]
 800147c:	6139      	str	r1, [r7, #16]
 800147e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001482:	edc7 0a02 	vstr	s1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
	//If a signal has fs=100hz and you want to measure [0.1-50]Hz, you need scales 2 to 1000;
	float32_t nf0 = f0;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
	float32_t nf1 = f1;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//Calculando escalas inicial y final
	float32_t s0 = (fs/nf1);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float32_t s1 = (fs/nf0);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80014b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//Cannot pass the nyquist frequency
	assert(f1 <= fs/2 && "Max frequency cannot be higher than the Nyquist frequency (fs/2)");
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	0fda      	lsrs	r2, r3, #31
 80014c0:	4413      	add	r3, r2
 80014c2:	105b      	asrs	r3, r3, #1
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d905      	bls.n	80014e6 <calculate_linscale_array+0x72>
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <calculate_linscale_array+0xf8>)
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <calculate_linscale_array+0xfc>)
 80014de:	217b      	movs	r1, #123	@ 0x7b
 80014e0:	4824      	ldr	r0, [pc, #144]	@ (8001574 <calculate_linscale_array+0x100>)
 80014e2:	f002 fa69 	bl	80039b8 <__assert_func>
	//Diferencia de escalas
	float32_t ds = s1-s0;
 80014e6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80014ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f2:	edc7 7a08 	vstr	s15, [r7, #32]
	ds /= (float32_t)(fn);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001500:	edd7 6a08 	vldr	s13, [r7, #32]
 8001504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001508:	edc7 7a08 	vstr	s15, [r7, #32]
	//Reservo memoria para mi vector de pasos
	float32_t *scaleSteps = (float32_t*)malloc(sizeof(float32_t) * fn);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fa6f 	bl	80039f4 <malloc>
 8001516:	4603      	mov	r3, r0
 8001518:	61fb      	str	r3, [r7, #28]

	//Relleno mi vector de pasos
	for (int i = 0; i <fn; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
 800151e:	e011      	b.n	8001544 <calculate_linscale_array+0xd0>
		scaleSteps[i]=ds * (float32_t)i;
 8001520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	edd7 7a08 	vldr	s15, [r7, #32]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <fn; i++) {
 800153e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001540:	3301      	adds	r3, #1
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
 8001544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbe9      	blt.n	8001520 <calculate_linscale_array+0xac>
	}
	arm_offset_f32(scaleSteps, s0, myScales->scales,fn);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4619      	mov	r1, r3
 8001554:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001558:	69f8      	ldr	r0, [r7, #28]
 800155a:	f000 ffb3 	bl	80024c4 <arm_offset_f32>

	//Libero memoria de vectores temporales
	free(scaleSteps);
 800155e:	69f8      	ldr	r0, [r7, #28]
 8001560:	f002 fa50 	bl	8003a04 <free>
}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	@ 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08008918 	.word	0x08008918
 8001570:	080089f4 	.word	0x080089f4
 8001574:	0800896c 	.word	0x0800896c

08001578 <calculate_linfreq_array>:
 */
void calculate_linfreq_array(Scales_t *myScales,
		int32_t fs,
		float32_t f0,
		float32_t f1,
		int32_t fn){
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	@ 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6178      	str	r0, [r7, #20]
 8001580:	6139      	str	r1, [r7, #16]
 8001582:	ed87 0a03 	vstr	s0, [r7, #12]
 8001586:	edc7 0a02 	vstr	s1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]

	float32_t nf0 = f0;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float32_t nf1 = f1;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
	//Cannot pass the nyquist frequency
	assert(f1 <= fs/2 && "Max frequency cannot be higher than the Nyquist frequency (fs/2)");
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	0fda      	lsrs	r2, r3, #31
 8001598:	4413      	add	r3, r2
 800159a:	105b      	asrs	r3, r3, #1
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d905      	bls.n	80015be <calculate_linfreq_array+0x46>
 80015b2:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <calculate_linfreq_array+0x120>)
 80015b4:	4a39      	ldr	r2, [pc, #228]	@ (800169c <calculate_linfreq_array+0x124>)
 80015b6:	219e      	movs	r1, #158	@ 0x9e
 80015b8:	4839      	ldr	r0, [pc, #228]	@ (80016a0 <calculate_linfreq_array+0x128>)
 80015ba:	f002 f9fd 	bl	80039b8 <__assert_func>
	float32_t df = nf1-nf0;
 80015be:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80015c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80015c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	df /= (float32_t)fn;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//Reservo memoria para mi vector de pasos
	float32_t *frecSteps0 = (float32_t*)malloc(sizeof(float32_t) * fn);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fa03 	bl	80039f4 <malloc>
 80015ee:	4603      	mov	r3, r0
 80015f0:	623b      	str	r3, [r7, #32]
	float32_t *frecSteps1 = (float32_t*)malloc(sizeof(float32_t) * fn);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 f9fc 	bl	80039f4 <malloc>
 80015fc:	4603      	mov	r3, r0
 80015fe:	61fb      	str	r3, [r7, #28]
	//Relleno mi vector de pasos
	for (int i = 0; i <fn; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
 8001604:	e011      	b.n	800162a <calculate_linfreq_array+0xb2>
		frecSteps0[i]=df * (float32_t)i;
 8001606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	4413      	add	r3, r2
 8001618:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <fn; i++) {
 8001624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001626:	3301      	adds	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
 800162a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbe9      	blt.n	8001606 <calculate_linfreq_array+0x8e>
	}
	arm_offset_f32(frecSteps0, nf0, frecSteps1, fn);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	461a      	mov	r2, r3
 8001636:	69f9      	ldr	r1, [r7, #28]
 8001638:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800163c:	6a38      	ldr	r0, [r7, #32]
 800163e:	f000 ff41 	bl	80024c4 <arm_offset_f32>
	for (int i = 0; i <fn; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
 8001646:	e019      	b.n	800167c <calculate_linfreq_array+0x104>
		myScales->scales[fn-1-i]=(float32_t)(fs)/frecSteps1[i];
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1e59      	subs	r1, r3, #1
 8001666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001668:	1acb      	subs	r3, r1, r3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001672:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <fn; i++) {
 8001676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001678:	3301      	adds	r3, #1
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
 800167c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbe1      	blt.n	8001648 <calculate_linfreq_array+0xd0>
	}
	free(frecSteps0);
 8001684:	6a38      	ldr	r0, [r7, #32]
 8001686:	f002 f9bd 	bl	8003a04 <free>
	free(frecSteps1);
 800168a:	69f8      	ldr	r0, [r7, #28]
 800168c:	f002 f9ba 	bl	8003a04 <free>
}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	@ 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	08008918 	.word	0x08008918
 800169c:	08008a10 	.word	0x08008a10
 80016a0:	0800896c 	.word	0x0800896c

080016a4 <createChirp>:
 * @Brief Create a linear Chirp signal
 * @Par:
 * -fs: frecuencia de muestreo de la señal (Hz)
 * -deltaT:tiempo muestreado de la señal    (sec)
 */
float32_t* createChirp(uint32_t fs,float32_t deltaT,float32_t freq_Inicial,float32_t freq_Final){
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b08f      	sub	sp, #60	@ 0x3c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80016b4:	ed87 1a00 	vstr	s2, [r7]
	//Number of samples is sampling rate by time
	uint32_t num_Samples= (uint32_t)((float32_t)fs * deltaT);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//Inicialize my signal vector
	float32_t *signal=(float32_t*)malloc(sizeof(float32_t)*num_Samples);
 80016d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 f98b 	bl	80039f4 <malloc>
 80016de:	4603      	mov	r3, r0
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	// Generar el vector de tiempo
	float32_t *time = (float *)malloc(num_Samples * sizeof(float));
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 f984 	bl	80039f4 <malloc>
 80016ec:	4603      	mov	r3, r0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t *time_alCuadrado = (float *)malloc(num_Samples * sizeof(float));
 80016f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f97d 	bl	80039f4 <malloc>
 80016fa:	4603      	mov	r3, r0
 80016fc:	623b      	str	r3, [r7, #32]
	float32_t *temp1= (float *)malloc(num_Samples * sizeof(float));
 80016fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f976 	bl	80039f4 <malloc>
 8001708:	4603      	mov	r3, r0
 800170a:	61fb      	str	r3, [r7, #28]
	float32_t *temp2= (float *)malloc(num_Samples * sizeof(float));
 800170c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4618      	mov	r0, r3
 8001712:	f002 f96f 	bl	80039f4 <malloc>
 8001716:	4603      	mov	r3, r0
 8001718:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < num_Samples; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34
 800171e:	e014      	b.n	800174a <createChirp+0xa6>
		time[i] = (float32_t)i / (float32_t)fs;
 8001720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173a:	4413      	add	r3, r2
 800173c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001740:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < num_Samples; i++) {
 8001744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001746:	3301      	adds	r3, #1
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34
 800174a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174e:	429a      	cmp	r2, r3
 8001750:	d8e6      	bhi.n	8001720 <createChirp+0x7c>
	}
	//Calculo la tasa de cambio de la frecuencia
	float32_t k=(freq_Final-freq_Inicial)/time[num_Samples-1];
 8001752:	ed97 7a00 	vldr	s14, [r7]
 8001756:	edd7 7a01 	vldr	s15, [r7, #4]
 800175a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001764:	3b01      	subs	r3, #1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176a:	4413      	add	r3, r2
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	edc7 7a05 	vstr	s15, [r7, #20]

	//Elevo al cuadrado mi vector temporal
	arm_mult_f32(time, time, time_alCuadrado, num_Samples);
 8001778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177a:	6a3a      	ldr	r2, [r7, #32]
 800177c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800177e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001780:	f000 fe48 	bl	8002414 <arm_mult_f32>
	//temp1=(t^2)*0.5k
	arm_scale_f32(time_alCuadrado, (0.5f*k), temp1, num_Samples);
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800178c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001792:	69f9      	ldr	r1, [r7, #28]
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	6a38      	ldr	r0, [r7, #32]
 800179a:	f000 fed9 	bl	8002550 <arm_scale_f32>
	//temp2=t*f0
	arm_scale_f32(time, freq_Inicial, temp2, num_Samples);
 800179e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80017a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017a8:	f000 fed2 	bl	8002550 <arm_scale_f32>
	//time_alcuadrado=(t*f0)+((t^2)*0.5k)
	arm_add_f32(temp2, temp1, time_alCuadrado,num_Samples);
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	6a3a      	ldr	r2, [r7, #32]
 80017b0:	69f9      	ldr	r1, [r7, #28]
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f000 fdd6 	bl	8002364 <arm_add_f32>
	//time=((t*f0)+((t^2)*0.5k))*(2*PI)
	arm_scale_f32(time_alCuadrado, (2.0f*PI), time, num_Samples);
 80017b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017bc:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001820 <createChirp+0x17c>
 80017c0:	6a38      	ldr	r0, [r7, #32]
 80017c2:	f000 fec5 	bl	8002550 <arm_scale_f32>
	//Generate my signal
	for (int i = 0; i < num_Samples; ++i) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ca:	e014      	b.n	80017f6 <createChirp+0x152>
		signal[i]=arm_sin_f32(time[i]);
 80017cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d2:	4413      	add	r3, r2
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017de:	18d4      	adds	r4, r2, r3
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	f000 ffd8 	bl	8002798 <arm_sin_f32>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < num_Samples; ++i) {
 80017f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f2:	3301      	adds	r3, #1
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d8e6      	bhi.n	80017cc <createChirp+0x128>
	}
	//Libero los vectores auxiliares
	free(time);
 80017fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001800:	f002 f900 	bl	8003a04 <free>
	free(temp1);
 8001804:	69f8      	ldr	r0, [r7, #28]
 8001806:	f002 f8fd 	bl	8003a04 <free>
	free(time_alCuadrado);
 800180a:	6a38      	ldr	r0, [r7, #32]
 800180c:	f002 f8fa 	bl	8003a04 <free>
	free(temp2);
 8001810:	69b8      	ldr	r0, [r7, #24]
 8001812:	f002 f8f7 	bl	8003a04 <free>

	return signal;
 8001816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8001818:	4618      	mov	r0, r3
 800181a:	373c      	adds	r7, #60	@ 0x3c
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	40c90fdb 	.word	0x40c90fdb

08001824 <morlet_Init>:
	w->four_wavelen=0.0f;
}
/*
 * @Brief Constructor clase Morlet
 */
void morlet_Init(Morlet_t *mor,float32_t bandwidth){
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	ed87 0a00 	vstr	s0, [r7]
	//Valido el puntero
	if (!mor) return;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d026      	beq.n	8001884 <morlet_Init+0x60>
	//Inicializo los demas atributos
	mor->base.four_wavelen= 0.9876f;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <morlet_Init+0x6c>)
 800183a:	605a      	str	r2, [r3, #4]
	mor->base.mother=NULL;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
	mor->base.width=0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
	mor->base.doublesided=false;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	735a      	strb	r2, [r3, #13]
	mor->base.imag_frequency=false;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	731a      	strb	r2, [r3, #12]
	mor->fb = bandwidth;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	611a      	str	r2, [r3, #16]
	mor->fb2 = 2.0f *bandwidth*bandwidth;
 800185a:	edd7 7a00 	vldr	s15, [r7]
 800185e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001862:	edd7 7a00 	vldr	s15, [r7]
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edc3 7a06 	vstr	s15, [r3, #24]
	mor->ifb = 1.0f / bandwidth;
 8001870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001874:	ed97 7a00 	vldr	s14, [r7]
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	edc3 7a05 	vstr	s15, [r3, #20]
 8001882:	e000      	b.n	8001886 <morlet_Init+0x62>
	if (!mor) return;
 8001884:	bf00      	nop

}
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	3f7cd35b 	.word	0x3f7cd35b

08001894 <morlet_Gen_Freq>:
/*
 * @Brief Generador de Morlet en el dominio de la frecuencia
 * @Note: Se computa la FT de la Morlet compleja
 *        Se puede encontrar la formula en pag36 del Addison
 */
void morlet_Gen_Freq(Morlet_t *mor, uint32_t size){
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	@ 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	//Frequency domain, because we only need size. Default scale is always 2;
	mor->base.width = size;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	601a      	str	r2, [r3, #0]
	float32_t toradians = (TWOPI)/(float32_t)size;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ae:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001a00 <morlet_Gen_Freq+0x16c>
 80018b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	613b      	str	r3, [r7, #16]
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 80018c0:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8001a00 <morlet_Gen_Freq+0x16c>
 80018c4:	eef1 7ae7 	vsqrt.f32	s15, s15
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	edc3 7a00 	vstr	s15, [r3]
	float32_t coef;//Este coeficiente sera igual a raiz de 2 por pi a la un cuarto
	arm_sqrt_f32((float32_t)(TWOPI), &coef);
	coef *= IPI4;
 80018ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d2:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001a04 <morlet_Gen_Freq+0x170>
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	edc7 7a03 	vstr	s15, [r7, #12]
	// Reserva de memoria para la wavelet madre
	mor->base.mother = (float32_t*)malloc(sizeof(float32_t)*size);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 f886 	bl	80039f4 <malloc>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
	// Reservar arreglos temporales para cálculos vectorizados
	float32_t *freqs         = (float32_t*)malloc(sizeof(float32_t) * size);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 f87d 	bl	80039f4 <malloc>
 80018fa:	4603      	mov	r3, r0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t *V             = (float32_t*)malloc(sizeof(float32_t) * size);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4618      	mov	r0, r3
 8001904:	f002 f876 	bl	80039f4 <malloc>
 8001908:	4603      	mov	r3, r0
 800190a:	623b      	str	r3, [r7, #32]
	float32_t *V_pow2        = (float32_t*)malloc(sizeof(float32_t) * size);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f86f 	bl	80039f4 <malloc>
 8001916:	4603      	mov	r3, r0
 8001918:	61fb      	str	r3, [r7, #28]
	float32_t *expArg        = (float32_t*)malloc(sizeof(float32_t) * size);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f868 	bl	80039f4 <malloc>
 8001924:	4603      	mov	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
	float32_t *expVal        = (float32_t*)malloc(sizeof(float32_t) * size);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f002 f861 	bl	80039f4 <malloc>
 8001932:	4603      	mov	r3, r0
 8001934:	617b      	str	r3, [r7, #20]

	// 1. Llenar el vector de frecuencias: freqs[w] = w * toradians
	for (int w = 0; w < size; w++) {
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800193a:	e011      	b.n	8001960 <morlet_Gen_Freq+0xcc>

		freqs[w] = w * toradians;
 800193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	4413      	add	r3, r2
 800194e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
	for (int w = 0; w < size; w++) {
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	3301      	adds	r3, #1
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8e9      	bhi.n	800193c <morlet_Gen_Freq+0xa8>
	}
	// 2. Escalar: V = freqs * (2.0f * mor->fb)
	arm_scale_f32(freqs, 2.0f * mor->fb, V, size);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	edd3 7a04 	vldr	s15, [r3, #16]
 800196e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800197c:	f000 fde8 	bl	8002550 <arm_scale_f32>

	// 3. Restar constante: V = V - (2.0f * PI * mor->fb)
	arm_offset_f32(V, -(2.0f * PI * mor->fb), V, size);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a04 	vldr	s15, [r3, #16]
 8001986:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a00 <morlet_Gen_Freq+0x16c>
 800198a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198e:	eef1 7a67 	vneg.f32	s15, s15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	6a39      	ldr	r1, [r7, #32]
 8001996:	eeb0 0a67 	vmov.f32	s0, s15
 800199a:	6a38      	ldr	r0, [r7, #32]
 800199c:	f000 fd92 	bl	80024c4 <arm_offset_f32>

	// 4. Elevar al cuadrado: V_pow2 = V * V (elemento a elemento)
	arm_mult_f32(V, V, V_pow2, size);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	6a38      	ldr	r0, [r7, #32]
 80019a8:	f000 fd34 	bl	8002414 <arm_mult_f32>

	// 5. Multiplicar por -0.5: expArg = -0.5 * V_pow2
	arm_scale_f32(V_pow2, -0.5f, expArg, size);
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 80019b4:	69f8      	ldr	r0, [r7, #28]
 80019b6:	f000 fdcb 	bl	8002550 <arm_scale_f32>

	// 6. Calcular el exponencial: expVal = exp(expArg)
	arm_vexp_f32(expArg, expVal, size);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	6979      	ldr	r1, [r7, #20]
 80019be:	69b8      	ldr	r0, [r7, #24]
 80019c0:	f000 ff38 	bl	8002834 <arm_vexp_f32>

	// 7. Multiplicar por la constante de normalización: mother = norm * expVal
	arm_scale_f32(expVal,coef, mor->base.mother, size);
 80019c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	eeb0 0a67 	vmov.f32	s0, s15
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f000 fdbb 	bl	8002550 <arm_scale_f32>

	// Liberar los arreglos temporales
	free(freqs);
 80019da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019dc:	f002 f812 	bl	8003a04 <free>
	free(V);
 80019e0:	6a38      	ldr	r0, [r7, #32]
 80019e2:	f002 f80f 	bl	8003a04 <free>
	free(V_pow2);
 80019e6:	69f8      	ldr	r0, [r7, #28]
 80019e8:	f002 f80c 	bl	8003a04 <free>
	free(expArg);
 80019ec:	69b8      	ldr	r0, [r7, #24]
 80019ee:	f002 f809 	bl	8003a04 <free>
	free(expVal);
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f002 f806 	bl	8003a04 <free>

}
 80019f8:	bf00      	nop
 80019fa:	3730      	adds	r7, #48	@ 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40c90fdb 	.word	0x40c90fdb
 8001a04:	3f4049c4 	.word	0x3f4049c4

08001a08 <main>:
#define MORLET_BW  1.0f
#define FREC_INIC  50.0f
#define FREC_END   300.0f

int main (void)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8001a0e:	b092      	sub	sp, #72	@ 0x48
 8001a10:	af02      	add	r7, sp, #8
	//----------Setup------------------------------//
	//80 MHz  Clock configuration
	rcc_Max_Speed_CLK_Config();
 8001a12:	f000 fa67 	bl	8001ee4 <rcc_Max_Speed_CLK_Config>
	rcc_SysTick_config(SYSTEM_CLK/8000);
 8001a16:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a1a:	f000 fa1d 	bl	8001e58 <rcc_SysTick_config>
	//FPU ENABLE
	SCB->CPACR |= ((3UL << 10*2) | (3UL<< 11*2));
 8001a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <main+0x1c8>)
 8001a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a24:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd0 <main+0x1c8>)
 8001a26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a2a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	//UART configuration
	uart_UART2_GPIO_config();
 8001a2e:	f000 fb6f 	bl	8002110 <uart_UART2_GPIO_config>
	uart_UART2_config(SYSTEM_CLK,UART_BAUDRATE);
 8001a32:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001a36:	4867      	ldr	r0, [pc, #412]	@ (8001bd4 <main+0x1cc>)
 8001a38:	f000 fbcc 	bl	80021d4 <uart_UART2_config>
	//Genero mi señal
	float32_t *mySignal=createChirp(SAMP_RATE, SIG_TIME, FREC_INIC, FREC_END);
 8001a3c:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 8001bd8 <main+0x1d0>
 8001a40:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8001bdc <main+0x1d4>
 8001a44:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8001a48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a4c:	f7ff fe2a 	bl	80016a4 <createChirp>
 8001a50:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001a54:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a58:	6018      	str	r0, [r3, #0]
	//Inicializo mi matriz de salida de la CWT de tamaño N X M
	//donde N: numero de escalas y M:numero de muestras de la señal
	//Lo hago de manera unidimensional para que este en el mismo bloque de memoria
	complex_t output[SCALES_NUM * SAMP_NUM];
	complex_t *cwt_Data=output;
 8001a5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a5e:	3b14      	subs	r3, #20
 8001a60:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001a64:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001a68:	6013      	str	r3, [r2, #0]
	arm_fill_f32(0.0f, (float32_t*)cwt_Data,2*SCALES_NUM*SAMP_NUM);
 8001a6a:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 8001a6e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001a72:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8001be0 <main+0x1d8>
 8001a7c:	f000 ff1c 	bl	80028b8 <arm_fill_f32>
	//Creo mi objeto Wavelet Morlet y lo inicializo
	Morlet_t mor;
	morlet_Init(&mor, MORLET_BW);
 8001a80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a84:	3b30      	subs	r3, #48	@ 0x30
 8001a86:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff feca 	bl	8001824 <morlet_Init>
	//Creo un objeto de escalas y lo inicializo
	Scales_t scales;
	scales_Init(&scales, (Wavelet_t*)&mor, FCWT_LOGSCALES, SAMP_RATE, FREC_INIC, FREC_END,SCALES_NUM);
 8001a90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a94:	3930      	subs	r1, #48	@ 0x30
 8001a96:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001a9a:	383c      	subs	r0, #60	@ 0x3c
 8001a9c:	2332      	movs	r3, #50	@ 0x32
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8001bd8 <main+0x1d0>
 8001aa4:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8001bdc <main+0x1d4>
 8001aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aac:	2201      	movs	r2, #1
 8001aae:	f7ff fbaf 	bl	8001210 <scales_Init>
	//Calculo la CWT
	cwt(&mor, &scales, mySignal, SAMP_NUM, cwt_Data);
 8001ab2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001ab6:	393c      	subs	r1, #60	@ 0x3c
 8001ab8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001abc:	3830      	subs	r0, #48	@ 0x30
 8001abe:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001ac2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001ad0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	f7ff fabb 	bl	8001050 <cwt>
	//Mando el resultado por puerto serie
	for (int i = 0; i < SCALES_NUM; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001ae0:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e067      	b.n	8001bb8 <main+0x1b0>
		printf("Resultados de la cwt de la escala %d:\r\n", i);
 8001ae8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001aec:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	483c      	ldr	r0, [pc, #240]	@ (8001be4 <main+0x1dc>)
 8001af4:	f002 ffca 	bl	8004a8c <iprintf>
		for (int j = 0; j < SAMP_NUM; j++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001afe:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e046      	b.n	8001b94 <main+0x18c>
			// Calcula el índice lineal en la matriz contigua
			int idx = i * SAMP_NUM + j;
 8001b06:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001b0a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	01db      	lsls	r3, r3, #7
 8001b12:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001b16:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001b22:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001b26:	6013      	str	r3, [r2, #0]
			// Imprime la parte real e imaginaria del elemento
			printf("%f,%f\r\n", cwt_Data[idx].real, cwt_Data[idx].imag);
 8001b28:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001b2c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001b38:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd00 	bl	8000548 <__aeabi_f2d>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001b50:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001b5c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcee 	bl	8000548 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9cd 2300 	strd	r2, r3, [sp]
 8001b74:	4622      	mov	r2, r4
 8001b76:	462b      	mov	r3, r5
 8001b78:	481b      	ldr	r0, [pc, #108]	@ (8001be8 <main+0x1e0>)
 8001b7a:	f002 ff87 	bl	8004a8c <iprintf>
		for (int j = 0; j < SAMP_NUM; j++) {
 8001b7e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001b82:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001b8e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001b98:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ba0:	ddb1      	ble.n	8001b06 <main+0xfe>
	for (int i = 0; i < SCALES_NUM; i++) {
 8001ba2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001ba6:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001bb2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001bbc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b31      	cmp	r3, #49	@ 0x31
 8001bc4:	dd90      	ble.n	8001ae8 <main+0xe0>
		}
	}
	printf("END\r\n");
 8001bc6:	4809      	ldr	r0, [pc, #36]	@ (8001bec <main+0x1e4>)
 8001bc8:	f002 ffc8 	bl	8004b5c <puts>
	 * free(cwt_Data);
	 * free(mySignal);
	 */

	//----------Loop forever-----------------------//
	while(1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <main+0x1c4>
 8001bd0:	e000ed00 	.word	0xe000ed00
 8001bd4:	04c4b400 	.word	0x04c4b400
 8001bd8:	43960000 	.word	0x43960000
 8001bdc:	42480000 	.word	0x42480000
 8001be0:	00000000 	.word	0x00000000
 8001be4:	0800899c 	.word	0x0800899c
 8001be8:	080089c4 	.word	0x080089c4
 8001bec:	080089cc 	.word	0x080089cc

08001bf0 <__io_putchar>:
#include "uart.h"

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);

int __io_putchar(int ch) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	733b      	strb	r3, [r7, #12]
 uart_UART2_TX(&c[0], 1, 100);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2264      	movs	r2, #100	@ 0x64
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fb3e 	bl	8002288 <uart_UART2_TX>
 return ch;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_write>:

int _write(int file,char *ptr, int len) {
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e009      	b.n	8001c3c <_write+0x26>
  __io_putchar(*ptr++);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ffdd 	bl	8001bf0 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf1      	blt.n	8001c28 <_write+0x12>
 }
 return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  return 1;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_kill>:

int _kill(int pid, int sig)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c68:	f003 f8da 	bl	8004e20 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2216      	movs	r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_exit>:

void _exit (int status)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c86:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffe7 	bl	8001c5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <_exit+0x12>

08001c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4601      	mov	r1, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf0      	blt.n	8001ca6 <_read+0x12>
  }

  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f003 f85a 	bl	8004e20 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20010000 	.word	0x20010000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	200001e4 	.word	0x200001e4
 8001da0:	20000338 	.word	0x20000338

08001da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0c      	blt.n	8001df4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <__NVIC_ClearPendingIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	3360      	adds	r3, #96	@ 0x60
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <rcc_SysTick_config>:

/*
 * Brief SysTick Configuration
 */
void rcc_SysTick_config(uint32_t arr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	//Reset control register
	SysTick->CTRL=0;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
	//Set the reload value
	SysTick->LOAD =arr-1;
 8001e66:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
	//Priority SysTick interrupt (NVIC)
	NVIC_SetPriority(SysTick_IRQn,15);
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ffc6 	bl	8001e04 <__NVIC_SetPriority>
	//Reset SysTick value to 0
	SysTick->VAL=0;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
	//Enable SysTick from Control register
	SysTick->CTRL &=  ~(SysTick_CTRL_CLKSOURCE_Msk);//Select Processor clock (AHB)
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |=  SysTick_CTRL_TICKINT_Msk;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |=  (0x1UL << (0U));
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <rcc_SysTick_config+0x54>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]

}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <rcc_msIncTicks>:
/*
 * Brief increment msTicks
 */
void rcc_msIncTicks(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	msTicks++;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <rcc_msIncTicks+0x18>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <rcc_msIncTicks+0x18>)
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	200001e8 	.word	0x200001e8

08001ecc <rcc_msGetTicks>:
/*
 * Brief get msTicks
 */
uint32_t rcc_msGetTicks(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	return msTicks;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <rcc_msGetTicks+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200001e8 	.word	0x200001e8

08001ee4 <rcc_Max_Speed_CLK_Config>:

/*
 * Brief Max Speed Clock Configuration(80MHz)
 */
void rcc_Max_Speed_CLK_Config(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	////PLL Configuration
	//Disable PLL
	RCC->CR &= ~(RCC_CR_PLLON);
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]
	//Wait for PLL Ready is cleared
	while((RCC->CR & RCC_CR_PLLRDY ));
 8001ef4:	bf00      	nop
 8001ef6:	4b49      	ldr	r3, [pc, #292]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <rcc_Max_Speed_CLK_Config+0x12>
	//Select MSI as PLL clock source
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a45      	ldr	r2, [pc, #276]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f08:	f023 0303 	bic.w	r3, r3, #3
 8001f0c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=  (RCC_PLLCFGR_PLLSRC_MSI);
 8001f0e:	4b43      	ldr	r3, [pc, #268]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a42      	ldr	r2, [pc, #264]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	60d3      	str	r3, [r2, #12]
	//PLL_M=1(Divide by)
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8001f1a:	4b40      	ldr	r3, [pc, #256]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f24:	60d3      	str	r3, [r2, #12]
	//PLL_N=40(Multiply by 40: 40x 4MHz=160MHz)
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001f30:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=  (40UL << RCC_PLLCFGR_PLLN_Pos);
 8001f32:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4a39      	ldr	r2, [pc, #228]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f38:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001f3c:	60d3      	str	r3, [r2, #12]
	//PLL_R=2(Divide by 2:160MHz/2=80MHz)
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLR);
 8001f3e:	4b37      	ldr	r3, [pc, #220]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a36      	ldr	r2, [pc, #216]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001f48:	60d3      	str	r3, [r2, #12]
	//PLL_Q=2
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 8001f4a:	4b34      	ldr	r3, [pc, #208]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a33      	ldr	r2, [pc, #204]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f50:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001f54:	60d3      	str	r3, [r2, #12]
	//PLL_P=7
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a30      	ldr	r2, [pc, #192]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001f60:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=  (0x7UL << RCC_PLLCFGR_PLLP_Pos);
 8001f62:	4b2e      	ldr	r3, [pc, #184]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f68:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8001f6c:	60d3      	str	r3, [r2, #12]
	//Enable PLL
	RCC->CR |= (RCC_CR_PLLON);
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]
	//Enable PLLCLK output(PLL_R)
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLREN);
 8001f7a:	4b28      	ldr	r3, [pc, #160]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a27      	ldr	r2, [pc, #156]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f84:	60d3      	str	r3, [r2, #12]
	//Wait for PLL Ready is set
	while(!(RCC->CR & RCC_CR_PLLRDY ));
 8001f86:	bf00      	nop
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f9      	beq.n	8001f88 <rcc_Max_Speed_CLK_Config+0xa4>
	//Flash Registers Clock Enable
	RCC->AHB1ENR |=(RCC_AHB1ENR_FLASHEN);
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f98:	4a20      	ldr	r2, [pc, #128]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9e:	6493      	str	r3, [r2, #72]	@ 0x48
	//Flash Latency and prefetch (4 Wait states when System CLK>64MHZ)
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <rcc_Max_Speed_CLK_Config+0x13c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8002020 <rcc_Max_Speed_CLK_Config+0x13c>)
 8001fa6:	f023 0307 	bic.w	r3, r3, #7
 8001faa:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (0x4UL << (0U));
 8001fac:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <rcc_Max_Speed_CLK_Config+0x13c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002020 <rcc_Max_Speed_CLK_Config+0x13c>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6013      	str	r3, [r2, #0]
	//Check if Latency is correctly changed
	while(!(FLASH->ACR & (4UL << (0U))));
 8001fb8:	bf00      	nop
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <rcc_Max_Speed_CLK_Config+0x13c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f9      	beq.n	8001fba <rcc_Max_Speed_CLK_Config+0xd6>
	//PLL as clock source of SYSCLK
	RCC->CFGR &= ~(RCC_CFGR_SW_Msk);
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a14      	ldr	r2, [pc, #80]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fcc:	f023 0303 	bic.w	r3, r3, #3
 8001fd0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_SW_Msk);
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fd8:	f043 0303 	orr.w	r3, r3, #3
 8001fdc:	6093      	str	r3, [r2, #8]
	////Wait for clock change be stable
	while(!(RCC->CFGR & (0x3UL << (2U)) ));
 8001fde:	bf00      	nop
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f9      	beq.n	8001fe0 <rcc_Max_Speed_CLK_Config+0xfc>
	//Clear prescalers
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001ff2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ff6:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8001ffe:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002002:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <rcc_Max_Speed_CLK_Config+0x138>)
 800200a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800200e:	6093      	str	r3, [r2, #8]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <SysTick_Handler>:

/*
 * Brief SysTick Interrupt callback
 */
void SysTick_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff fecc 	bl	8001dc8 <__NVIC_ClearPendingIRQ>
	rcc_msIncTicks();
 8002030:	f7ff ff3e 	bl	8001eb0 <rcc_msIncTicks>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <__NVIC_SetPriorityGrouping>:
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	@ (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	@ (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	@ (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <uart_UART2_GPIO_config>:
}
/*
 * @Brief UART2 GPIO Config(PA2(Tx);PA15(Rx))
 */
void uart_UART2_GPIO_config(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  // Enable PortA Clock
  RCC->AHB2ENR  |= ( RCC_AHB2ENR_GPIOAEN );
 8002114:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <uart_UART2_GPIO_config+0xc0>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <uart_UART2_GPIO_config+0xc0>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  // Configure pins PA2, PA15 for USART2 .
  GPIOA->MODER    &= ~( ( 0x3 << ( 2 * 2 ) ) |
 8002120:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800212a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800212e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002132:	6013      	str	r3, [r2, #0]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->MODER    |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8002134:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800213e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002142:	f043 0320 	orr.w	r3, r3, #32
 8002146:	6013      	str	r3, [r2, #0]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->OTYPER   &= ~( ( 0x1 << 2 ) |
 8002148:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6053      	str	r3, [r2, #4]
      ( 0x1 << 15 ) );
  GPIOA->OSPEEDR  &= ~( ( 0x3 << ( 2 * 2 ) ) |
 800215c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002166:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800216a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800216e:	6093      	str	r3, [r2, #8]
      ( 0x3 << ( 15 * 2 ) ) );
  GPIOA->OSPEEDR  |=  ( ( 0x2 << ( 2 * 2 ) ) |
 8002170:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800217a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	6093      	str	r3, [r2, #8]
      ( 0x2 << ( 15 * 2 ) ) );
  GPIOA->AFR[ 0 ] &= ~( ( 0xF << ( 2 * 4 ) ) );
 8002184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800218e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002192:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 0 ] |=  ( ( 0x7 << ( 2 * 4 ) ) );
 8002194:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800219e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021a2:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[ 1 ] &= ~( ( 0xF << ( ( 15 - 8 ) * 4 ) ) );
 80021a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80021ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80021b2:	6253      	str	r3, [r2, #36]	@ 0x24
  GPIOA->AFR[ 1 ] |=  ( ( 0x3 << ( ( 15 - 8 ) * 4 ) ) );
 80021b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80021be:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80021c2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <uart_UART2_config>:
/*
 * @Brief UART2 Peripheral Config
 */
void uart_UART2_config(uint32_t systemClock, uint32_t baudRate)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  //// Enable floating-point unit.
  //SCB->CPACR    |=  ( 0xFUL << (20U) );
  // Enable UART2 Clock
  RCC->APB1ENR1 |= ( RCC_APB1ENR1_USART2EN );
 80021de:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <uart_UART2_config+0xac>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	4a27      	ldr	r2, [pc, #156]	@ (8002280 <uart_UART2_config+0xac>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
  // Set word length to 8-bits
  USART2->CR1  &= ~(USART_CR1_M1);
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <uart_UART2_config+0xb0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a25      	ldr	r2, [pc, #148]	@ (8002284 <uart_UART2_config+0xb0>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	6013      	str	r3, [r2, #0]
  // Set baud rate
  USART2->BRR = systemClock/baudRate;
 80021f6:	4923      	ldr	r1, [pc, #140]	@ (8002284 <uart_UART2_config+0xb0>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	60cb      	str	r3, [r1, #12]
  // Parity control disabled
  USART2->CR1  &= ~(USART_CR1_PCE);
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <uart_UART2_config+0xb0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1f      	ldr	r2, [pc, #124]	@ (8002284 <uart_UART2_config+0xb0>)
 8002208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800220c:	6013      	str	r3, [r2, #0]
  // Stop bits to 1
  USART2->CR2  &= ~(USART_CR2_STOP);
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <uart_UART2_config+0xb0>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <uart_UART2_config+0xb0>)
 8002214:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002218:	6053      	str	r3, [r2, #4]
  // Disable HW flow control
  USART2->CR3  &= ~(USART_CR3_CTSE);
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <uart_UART2_config+0xb0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a19      	ldr	r2, [pc, #100]	@ (8002284 <uart_UART2_config+0xb0>)
 8002220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002224:	6093      	str	r3, [r2, #8]
  USART2->CR3  &= ~(USART_CR3_RTSE);
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <uart_UART2_config+0xb0>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <uart_UART2_config+0xb0>)
 800222c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002230:	6093      	str	r3, [r2, #8]
  // Clear flags
  USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <uart_UART2_config+0xb0>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a13      	ldr	r2, [pc, #76]	@ (8002284 <uart_UART2_config+0xb0>)
 8002238:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800223c:	6053      	str	r3, [r2, #4]
  USART2->CR3 &= ~(USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN );
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <uart_UART2_config+0xb0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <uart_UART2_config+0xb0>)
 8002244:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002248:	6093      	str	r3, [r2, #8]
  // Enable UART2 peripheral
  USART2->CR1 |= ( USART_CR1_RE | USART_CR1_TE | USART_CR1_UE );
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <uart_UART2_config+0xb0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <uart_UART2_config+0xb0>)
 8002250:	f043 030d 	orr.w	r3, r3, #13
 8002254:	6013      	str	r3, [r2, #0]
  // Enable Rx ready to read interruption
  USART2->CR1 |= ( USART_CR1_RXNEIE );
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <uart_UART2_config+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <uart_UART2_config+0xb0>)
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	6013      	str	r3, [r2, #0]
  //All priority bits assigned to the preempt priority group
  NVIC_SetPriorityGrouping(0U);
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff fee8 	bl	8002038 <__NVIC_SetPriorityGrouping>
  //Priority of the interrupt (NVIC)
  NVIC_SetPriority(USART2_IRQn,1);
 8002268:	2101      	movs	r1, #1
 800226a:	2026      	movs	r0, #38	@ 0x26
 800226c:	f7ff ff26 	bl	80020bc <__NVIC_SetPriority>
  //Enable the interrupt
  NVIC_EnableIRQ(USART2_IRQn);
 8002270:	2026      	movs	r0, #38	@ 0x26
 8002272:	f7ff ff05 	bl	8002080 <__NVIC_EnableIRQ>

}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40004400 	.word	0x40004400

08002288 <uart_UART2_TX>:
/*
 * @Brief UART2 Transmit
 */
bool uart_UART2_TX(uint8_t *data,uint8_t len,uint32_t timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	460b      	mov	r3, r1
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	72fb      	strb	r3, [r7, #11]
  //Write to DR as TXE flag is HIGH (Tx buffer Empty)
  uint8_t dataIdx = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]
  uint32_t startTick = rcc_msGetTicks();
 800229a:	f7ff fe17 	bl	8001ecc <rcc_msGetTicks>
 800229e:	6138      	str	r0, [r7, #16]
  while(dataIdx<len)
 80022a0:	e019      	b.n	80022d6 <uart_UART2_TX+0x4e>
  {
    if(USART2->ISR & USART_ISR_TXE) //Tx buffer empty
 80022a2:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <uart_UART2_TX+0x84>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <uart_UART2_TX+0x3a>
    {
      USART2->TDR = data[dataIdx];
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <uart_UART2_TX+0x84>)
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      dataIdx++;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	3301      	adds	r3, #1
 80022be:	75fb      	strb	r3, [r7, #23]
 80022c0:	e009      	b.n	80022d6 <uart_UART2_TX+0x4e>
    }
    else //Manage timeout
    {
      if((rcc_msGetTicks() - startTick)>= timeout) return false;
 80022c2:	f7ff fe03 	bl	8001ecc <rcc_msGetTicks>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d801      	bhi.n	80022d6 <uart_UART2_TX+0x4e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	e015      	b.n	8002302 <uart_UART2_TX+0x7a>
  while(dataIdx<len)
 80022d6:	7dfa      	ldrb	r2, [r7, #23]
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3e1      	bcc.n	80022a2 <uart_UART2_TX+0x1a>
    }
  }
  //Wait for busy flag
  while((USART2->ISR & USART_ISR_TC))
 80022de:	e009      	b.n	80022f4 <uart_UART2_TX+0x6c>
  {
    if((rcc_msGetTicks() - startTick)>= timeout) return false;
 80022e0:	f7ff fdf4 	bl	8001ecc <rcc_msGetTicks>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d801      	bhi.n	80022f4 <uart_UART2_TX+0x6c>
 80022f0:	2300      	movs	r3, #0
 80022f2:	e006      	b.n	8002302 <uart_UART2_TX+0x7a>
  while((USART2->ISR & USART_ISR_TC))
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <uart_UART2_TX+0x84>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <uart_UART2_TX+0x58>
  }
  return true;
 8002300:	2301      	movs	r3, #1

}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40004400 	.word	0x40004400

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002314:	f7ff fd46 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	@ (800234c <LoopForever+0x6>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	@ (8002350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <LoopForever+0xe>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	@ (800235c <LoopForever+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233e:	f002 fd75 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7ff fb61 	bl	8001a08 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002354:	08026aec 	.word	0x08026aec
  ldr r2, =_sbss
 8002358:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800235c:	20000338 	.word	0x20000338

08002360 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_IRQHandler>
	...

08002364 <arm_add_f32>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	089e      	lsrs	r6, r3, #2
 8002368:	d033      	beq.n	80023d2 <arm_add_f32+0x6e>
 800236a:	f100 0410 	add.w	r4, r0, #16
 800236e:	f101 0e10 	add.w	lr, r1, #16
 8002372:	f102 0c10 	add.w	ip, r2, #16
 8002376:	4635      	mov	r5, r6
 8002378:	ed54 7a04 	vldr	s15, [r4, #-16]
 800237c:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8002380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002384:	3410      	adds	r4, #16
 8002386:	ed4c 7a04 	vstr	s15, [ip, #-16]
 800238a:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800238e:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8002392:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002396:	3d01      	subs	r5, #1
 8002398:	ed4c 7a03 	vstr	s15, [ip, #-12]
 800239c:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80023a0:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 80023a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023a8:	f10e 0e10 	add.w	lr, lr, #16
 80023ac:	ed4c 7a02 	vstr	s15, [ip, #-8]
 80023b0:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 80023b4:	ed1e 7a05 	vldr	s14, [lr, #-20]	@ 0xffffffec
 80023b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023bc:	f10c 0c10 	add.w	ip, ip, #16
 80023c0:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 80023c4:	d1d8      	bne.n	8002378 <arm_add_f32+0x14>
 80023c6:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 80023ca:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80023ce:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 80023d2:	f013 0303 	ands.w	r3, r3, #3
 80023d6:	d01b      	beq.n	8002410 <arm_add_f32+0xac>
 80023d8:	edd1 7a00 	vldr	s15, [r1]
 80023dc:	ed90 7a00 	vldr	s14, [r0]
 80023e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023e4:	3b01      	subs	r3, #1
 80023e6:	edc2 7a00 	vstr	s15, [r2]
 80023ea:	d011      	beq.n	8002410 <arm_add_f32+0xac>
 80023ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80023f0:	ed91 7a01 	vldr	s14, [r1, #4]
 80023f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	edc2 7a01 	vstr	s15, [r2, #4]
 80023fe:	d007      	beq.n	8002410 <arm_add_f32+0xac>
 8002400:	edd0 7a02 	vldr	s15, [r0, #8]
 8002404:	ed91 7a02 	vldr	s14, [r1, #8]
 8002408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240c:	edc2 7a02 	vstr	s15, [r2, #8]
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	bf00      	nop

08002414 <arm_mult_f32>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	089e      	lsrs	r6, r3, #2
 8002418:	d033      	beq.n	8002482 <arm_mult_f32+0x6e>
 800241a:	f100 0410 	add.w	r4, r0, #16
 800241e:	f101 0e10 	add.w	lr, r1, #16
 8002422:	f102 0c10 	add.w	ip, r2, #16
 8002426:	4635      	mov	r5, r6
 8002428:	ed54 7a04 	vldr	s15, [r4, #-16]
 800242c:	ed1e 7a04 	vldr	s14, [lr, #-16]
 8002430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002434:	3410      	adds	r4, #16
 8002436:	ed4c 7a04 	vstr	s15, [ip, #-16]
 800243a:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800243e:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	3d01      	subs	r5, #1
 8002448:	ed4c 7a03 	vstr	s15, [ip, #-12]
 800244c:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8002450:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8002454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002458:	f10e 0e10 	add.w	lr, lr, #16
 800245c:	ed4c 7a02 	vstr	s15, [ip, #-8]
 8002460:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8002464:	ed1e 7a05 	vldr	s14, [lr, #-20]	@ 0xffffffec
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	f10c 0c10 	add.w	ip, ip, #16
 8002470:	ed4c 7a05 	vstr	s15, [ip, #-20]	@ 0xffffffec
 8002474:	d1d8      	bne.n	8002428 <arm_mult_f32+0x14>
 8002476:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800247a:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800247e:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8002482:	f013 0303 	ands.w	r3, r3, #3
 8002486:	d01b      	beq.n	80024c0 <arm_mult_f32+0xac>
 8002488:	edd1 7a00 	vldr	s15, [r1]
 800248c:	ed90 7a00 	vldr	s14, [r0]
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	3b01      	subs	r3, #1
 8002496:	edc2 7a00 	vstr	s15, [r2]
 800249a:	d011      	beq.n	80024c0 <arm_mult_f32+0xac>
 800249c:	edd0 7a01 	vldr	s15, [r0, #4]
 80024a0:	ed91 7a01 	vldr	s14, [r1, #4]
 80024a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	edc2 7a01 	vstr	s15, [r2, #4]
 80024ae:	d007      	beq.n	80024c0 <arm_mult_f32+0xac>
 80024b0:	edd0 7a02 	vldr	s15, [r0, #8]
 80024b4:	ed91 7a02 	vldr	s14, [r1, #8]
 80024b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024bc:	edc2 7a02 	vstr	s15, [r2, #8]
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
 80024c2:	bf00      	nop

080024c4 <arm_offset_f32>:
 80024c4:	b510      	push	{r4, lr}
 80024c6:	0894      	lsrs	r4, r2, #2
 80024c8:	d027      	beq.n	800251a <arm_offset_f32+0x56>
 80024ca:	f100 0c10 	add.w	ip, r0, #16
 80024ce:	f101 0310 	add.w	r3, r1, #16
 80024d2:	46a6      	mov	lr, r4
 80024d4:	ed5c 7a04 	vldr	s15, [ip, #-16]
 80024d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80024dc:	f10c 0c10 	add.w	ip, ip, #16
 80024e0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80024e4:	ed5c 7a07 	vldr	s15, [ip, #-28]	@ 0xffffffe4
 80024e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80024ec:	f1be 0e01 	subs.w	lr, lr, #1
 80024f0:	ed43 7a03 	vstr	s15, [r3, #-12]
 80024f4:	ed5c 7a06 	vldr	s15, [ip, #-24]	@ 0xffffffe8
 80024f8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80024fc:	f103 0310 	add.w	r3, r3, #16
 8002500:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8002504:	ed5c 7a05 	vldr	s15, [ip, #-20]	@ 0xffffffec
 8002508:	ee77 7a80 	vadd.f32	s15, s15, s0
 800250c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8002510:	d1e0      	bne.n	80024d4 <arm_offset_f32+0x10>
 8002512:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8002516:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800251a:	f012 0203 	ands.w	r2, r2, #3
 800251e:	d015      	beq.n	800254c <arm_offset_f32+0x88>
 8002520:	edd0 7a00 	vldr	s15, [r0]
 8002524:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002528:	3a01      	subs	r2, #1
 800252a:	edc1 7a00 	vstr	s15, [r1]
 800252e:	d00d      	beq.n	800254c <arm_offset_f32+0x88>
 8002530:	edd0 7a01 	vldr	s15, [r0, #4]
 8002534:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002538:	2a01      	cmp	r2, #1
 800253a:	edc1 7a01 	vstr	s15, [r1, #4]
 800253e:	d005      	beq.n	800254c <arm_offset_f32+0x88>
 8002540:	edd0 7a02 	vldr	s15, [r0, #8]
 8002544:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002548:	ed81 0a02 	vstr	s0, [r1, #8]
 800254c:	bd10      	pop	{r4, pc}
 800254e:	bf00      	nop

08002550 <arm_scale_f32>:
 8002550:	b510      	push	{r4, lr}
 8002552:	0894      	lsrs	r4, r2, #2
 8002554:	d027      	beq.n	80025a6 <arm_scale_f32+0x56>
 8002556:	f100 0c10 	add.w	ip, r0, #16
 800255a:	f101 0310 	add.w	r3, r1, #16
 800255e:	46a6      	mov	lr, r4
 8002560:	ed1c 6a03 	vldr	s12, [ip, #-12]
 8002564:	ed1c 7a02 	vldr	s14, [ip, #-8]
 8002568:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800256c:	ed5c 6a04 	vldr	s13, [ip, #-16]
 8002570:	ee20 6a06 	vmul.f32	s12, s0, s12
 8002574:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002578:	ee60 7a27 	vmul.f32	s15, s0, s15
 800257c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002580:	f1be 0e01 	subs.w	lr, lr, #1
 8002584:	ed03 6a03 	vstr	s12, [r3, #-12]
 8002588:	ed43 6a04 	vstr	s13, [r3, #-16]
 800258c:	ed03 7a02 	vstr	s14, [r3, #-8]
 8002590:	ed43 7a01 	vstr	s15, [r3, #-4]
 8002594:	f10c 0c10 	add.w	ip, ip, #16
 8002598:	f103 0310 	add.w	r3, r3, #16
 800259c:	d1e0      	bne.n	8002560 <arm_scale_f32+0x10>
 800259e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80025a2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80025a6:	f012 0203 	ands.w	r2, r2, #3
 80025aa:	d015      	beq.n	80025d8 <arm_scale_f32+0x88>
 80025ac:	edd0 7a00 	vldr	s15, [r0]
 80025b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80025b4:	3a01      	subs	r2, #1
 80025b6:	edc1 7a00 	vstr	s15, [r1]
 80025ba:	d00d      	beq.n	80025d8 <arm_scale_f32+0x88>
 80025bc:	edd0 7a01 	vldr	s15, [r0, #4]
 80025c0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80025c4:	2a01      	cmp	r2, #1
 80025c6:	edc1 7a01 	vstr	s15, [r1, #4]
 80025ca:	d005      	beq.n	80025d8 <arm_scale_f32+0x88>
 80025cc:	edd0 7a02 	vldr	s15, [r0, #8]
 80025d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80025d4:	ed81 0a02 	vstr	s0, [r1, #8]
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	bf00      	nop

080025dc <arm_cmplx_conj_f32>:
 80025dc:	b510      	push	{r4, lr}
 80025de:	0894      	lsrs	r4, r2, #2
 80025e0:	d037      	beq.n	8002652 <arm_cmplx_conj_f32+0x76>
 80025e2:	f100 0c20 	add.w	ip, r0, #32
 80025e6:	f101 0320 	add.w	r3, r1, #32
 80025ea:	46a6      	mov	lr, r4
 80025ec:	ed5c 7a08 	vldr	s15, [ip, #-32]	@ 0xffffffe0
 80025f0:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 80025f4:	ed5c 7a07 	vldr	s15, [ip, #-28]	@ 0xffffffe4
 80025f8:	eef1 7a67 	vneg.f32	s15, s15
 80025fc:	f10c 0c20 	add.w	ip, ip, #32
 8002600:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8002604:	ed5c 7a0e 	vldr	s15, [ip, #-56]	@ 0xffffffc8
 8002608:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800260c:	ed5c 7a0d 	vldr	s15, [ip, #-52]	@ 0xffffffcc
 8002610:	eef1 7a67 	vneg.f32	s15, s15
 8002614:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8002618:	ed5c 7a0c 	vldr	s15, [ip, #-48]	@ 0xffffffd0
 800261c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8002620:	ed5c 7a0b 	vldr	s15, [ip, #-44]	@ 0xffffffd4
 8002624:	eef1 7a67 	vneg.f32	s15, s15
 8002628:	ed43 7a03 	vstr	s15, [r3, #-12]
 800262c:	ed5c 7a0a 	vldr	s15, [ip, #-40]	@ 0xffffffd8
 8002630:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002634:	ed5c 7a09 	vldr	s15, [ip, #-36]	@ 0xffffffdc
 8002638:	f1be 0e01 	subs.w	lr, lr, #1
 800263c:	eef1 7a67 	vneg.f32	s15, s15
 8002640:	f103 0320 	add.w	r3, r3, #32
 8002644:	ed43 7a09 	vstr	s15, [r3, #-36]	@ 0xffffffdc
 8002648:	d1d0      	bne.n	80025ec <arm_cmplx_conj_f32+0x10>
 800264a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800264e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8002652:	f012 0203 	ands.w	r2, r2, #3
 8002656:	d01b      	beq.n	8002690 <arm_cmplx_conj_f32+0xb4>
 8002658:	6803      	ldr	r3, [r0, #0]
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002660:	3a01      	subs	r2, #1
 8002662:	eef1 7a67 	vneg.f32	s15, s15
 8002666:	edc1 7a01 	vstr	s15, [r1, #4]
 800266a:	d011      	beq.n	8002690 <arm_cmplx_conj_f32+0xb4>
 800266c:	6883      	ldr	r3, [r0, #8]
 800266e:	608b      	str	r3, [r1, #8]
 8002670:	edd0 7a03 	vldr	s15, [r0, #12]
 8002674:	2a01      	cmp	r2, #1
 8002676:	eef1 7a67 	vneg.f32	s15, s15
 800267a:	edc1 7a03 	vstr	s15, [r1, #12]
 800267e:	d007      	beq.n	8002690 <arm_cmplx_conj_f32+0xb4>
 8002680:	6903      	ldr	r3, [r0, #16]
 8002682:	610b      	str	r3, [r1, #16]
 8002684:	edd0 7a05 	vldr	s15, [r0, #20]
 8002688:	eef1 7a67 	vneg.f32	s15, s15
 800268c:	edc1 7a05 	vstr	s15, [r1, #20]
 8002690:	bd10      	pop	{r4, pc}
 8002692:	bf00      	nop

08002694 <arm_cmplx_mult_real_f32>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	089e      	lsrs	r6, r3, #2
 8002698:	d04b      	beq.n	8002732 <arm_cmplx_mult_real_f32+0x9e>
 800269a:	f101 0410 	add.w	r4, r1, #16
 800269e:	f100 0e20 	add.w	lr, r0, #32
 80026a2:	f102 0c20 	add.w	ip, r2, #32
 80026a6:	4635      	mov	r5, r6
 80026a8:	ed1e 7a08 	vldr	s14, [lr, #-32]	@ 0xffffffe0
 80026ac:	ed54 6a04 	vldr	s13, [r4, #-16]
 80026b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80026b4:	f10e 0e20 	add.w	lr, lr, #32
 80026b8:	ed0c 7a08 	vstr	s14, [ip, #-32]	@ 0xffffffe0
 80026bc:	ed5e 7a0f 	vldr	s15, [lr, #-60]	@ 0xffffffc4
 80026c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026c4:	3410      	adds	r4, #16
 80026c6:	ed4c 7a07 	vstr	s15, [ip, #-28]	@ 0xffffffe4
 80026ca:	ed54 6a07 	vldr	s13, [r4, #-28]	@ 0xffffffe4
 80026ce:	ed1e 7a0e 	vldr	s14, [lr, #-56]	@ 0xffffffc8
 80026d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80026d6:	3d01      	subs	r5, #1
 80026d8:	ed0c 7a06 	vstr	s14, [ip, #-24]	@ 0xffffffe8
 80026dc:	ed5e 7a0d 	vldr	s15, [lr, #-52]	@ 0xffffffcc
 80026e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026e4:	f10c 0c20 	add.w	ip, ip, #32
 80026e8:	ed4c 7a0d 	vstr	s15, [ip, #-52]	@ 0xffffffcc
 80026ec:	ed54 6a06 	vldr	s13, [r4, #-24]	@ 0xffffffe8
 80026f0:	ed1e 7a0c 	vldr	s14, [lr, #-48]	@ 0xffffffd0
 80026f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80026f8:	ed0c 7a0c 	vstr	s14, [ip, #-48]	@ 0xffffffd0
 80026fc:	ed5e 7a0b 	vldr	s15, [lr, #-44]	@ 0xffffffd4
 8002700:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002704:	ed4c 7a0b 	vstr	s15, [ip, #-44]	@ 0xffffffd4
 8002708:	ed54 6a05 	vldr	s13, [r4, #-20]	@ 0xffffffec
 800270c:	ed1e 7a0a 	vldr	s14, [lr, #-40]	@ 0xffffffd8
 8002710:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002714:	ed0c 7a0a 	vstr	s14, [ip, #-40]	@ 0xffffffd8
 8002718:	ed5e 7a09 	vldr	s15, [lr, #-36]	@ 0xffffffdc
 800271c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002720:	ed4c 7a09 	vstr	s15, [ip, #-36]	@ 0xffffffdc
 8002724:	d1c0      	bne.n	80026a8 <arm_cmplx_mult_real_f32+0x14>
 8002726:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800272a:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800272e:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8002732:	f013 0303 	ands.w	r3, r3, #3
 8002736:	d02d      	beq.n	8002794 <arm_cmplx_mult_real_f32+0x100>
 8002738:	edd1 6a00 	vldr	s13, [r1]
 800273c:	ed90 7a00 	vldr	s14, [r0]
 8002740:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002744:	3b01      	subs	r3, #1
 8002746:	ed82 7a00 	vstr	s14, [r2]
 800274a:	edd0 7a01 	vldr	s15, [r0, #4]
 800274e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002752:	edc2 7a01 	vstr	s15, [r2, #4]
 8002756:	d01d      	beq.n	8002794 <arm_cmplx_mult_real_f32+0x100>
 8002758:	edd1 6a01 	vldr	s13, [r1, #4]
 800275c:	ed90 7a02 	vldr	s14, [r0, #8]
 8002760:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002764:	2b01      	cmp	r3, #1
 8002766:	ed82 7a02 	vstr	s14, [r2, #8]
 800276a:	edd0 7a03 	vldr	s15, [r0, #12]
 800276e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002772:	edc2 7a03 	vstr	s15, [r2, #12]
 8002776:	d00d      	beq.n	8002794 <arm_cmplx_mult_real_f32+0x100>
 8002778:	edd1 6a02 	vldr	s13, [r1, #8]
 800277c:	ed90 7a04 	vldr	s14, [r0, #16]
 8002780:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002784:	ed82 7a04 	vstr	s14, [r2, #16]
 8002788:	edd0 7a05 	vldr	s15, [r0, #20]
 800278c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002790:	edc2 7a05 	vstr	s15, [r2, #20]
 8002794:	bd70      	pop	{r4, r5, r6, pc}
 8002796:	bf00      	nop

08002798 <arm_sin_f32>:
 8002798:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8002824 <arm_sin_f32+0x8c>
 800279c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80027a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80027ac:	d504      	bpl.n	80027b8 <arm_sin_f32+0x20>
 80027ae:	ee17 3a90 	vmov	r3, s15
 80027b2:	3b01      	subs	r3, #1
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027bc:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002828 <arm_sin_f32+0x90>
 80027c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80027c4:	ee60 7a26 	vmul.f32	s15, s0, s13
 80027c8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80027cc:	ee17 3a10 	vmov	r3, s14
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d6:	d21b      	bcs.n	8002810 <arm_sin_f32+0x78>
 80027d8:	ee07 3a10 	vmov	s14, r3
 80027dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80027e6:	b289      	uxth	r1, r1
 80027e8:	4a10      	ldr	r2, [pc, #64]	@ (800282c <arm_sin_f32+0x94>)
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80027f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80027f6:	edd1 6a00 	vldr	s13, [r1]
 80027fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002802:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800280e:	4770      	bx	lr
 8002810:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002814:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002830 <arm_sin_f32+0x98>
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	2101      	movs	r1, #1
 800281e:	2300      	movs	r3, #0
 8002820:	e7e2      	b.n	80027e8 <arm_sin_f32+0x50>
 8002822:	bf00      	nop
 8002824:	3e22f983 	.word	0x3e22f983
 8002828:	44000000 	.word	0x44000000
 800282c:	0800df00 	.word	0x0800df00
 8002830:	00000000 	.word	0x00000000

08002834 <arm_vexp_f32>:
 8002834:	b162      	cbz	r2, 8002850 <arm_vexp_f32+0x1c>
 8002836:	b570      	push	{r4, r5, r6, lr}
 8002838:	4606      	mov	r6, r0
 800283a:	460d      	mov	r5, r1
 800283c:	4614      	mov	r4, r2
 800283e:	ecb6 0a01 	vldmia	r6!, {s0}
 8002842:	f005 fd2b 	bl	800829c <expf>
 8002846:	3c01      	subs	r4, #1
 8002848:	eca5 0a01 	vstmia	r5!, {s0}
 800284c:	d1f7      	bne.n	800283e <arm_vexp_f32+0xa>
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <arm_copy_f32>:
 8002854:	b510      	push	{r4, lr}
 8002856:	0894      	lsrs	r4, r2, #2
 8002858:	d01f      	beq.n	800289a <arm_copy_f32+0x46>
 800285a:	f100 0c10 	add.w	ip, r0, #16
 800285e:	f101 0310 	add.w	r3, r1, #16
 8002862:	46a6      	mov	lr, r4
 8002864:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8002868:	ed43 7a04 	vstr	s15, [r3, #-16]
 800286c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8002870:	f10c 0c10 	add.w	ip, ip, #16
 8002874:	ed43 7a03 	vstr	s15, [r3, #-12]
 8002878:	ed5c 7a06 	vldr	s15, [ip, #-24]	@ 0xffffffe8
 800287c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002880:	ed5c 7a05 	vldr	s15, [ip, #-20]	@ 0xffffffec
 8002884:	f1be 0e01 	subs.w	lr, lr, #1
 8002888:	f103 0310 	add.w	r3, r3, #16
 800288c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8002890:	d1e8      	bne.n	8002864 <arm_copy_f32+0x10>
 8002892:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8002896:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800289a:	f012 0203 	ands.w	r2, r2, #3
 800289e:	d009      	beq.n	80028b4 <arm_copy_f32+0x60>
 80028a0:	6803      	ldr	r3, [r0, #0]
 80028a2:	600b      	str	r3, [r1, #0]
 80028a4:	3a01      	subs	r2, #1
 80028a6:	d005      	beq.n	80028b4 <arm_copy_f32+0x60>
 80028a8:	6843      	ldr	r3, [r0, #4]
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	2a01      	cmp	r2, #1
 80028ae:	bf1c      	itt	ne
 80028b0:	6883      	ldrne	r3, [r0, #8]
 80028b2:	608b      	strne	r3, [r1, #8]
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop

080028b8 <arm_fill_f32>:
 80028b8:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 80028bc:	d010      	beq.n	80028e0 <arm_fill_f32+0x28>
 80028be:	f100 0310 	add.w	r3, r0, #16
 80028c2:	4662      	mov	r2, ip
 80028c4:	3a01      	subs	r2, #1
 80028c6:	ed03 0a04 	vstr	s0, [r3, #-16]
 80028ca:	ed03 0a03 	vstr	s0, [r3, #-12]
 80028ce:	ed03 0a02 	vstr	s0, [r3, #-8]
 80028d2:	ed03 0a01 	vstr	s0, [r3, #-4]
 80028d6:	f103 0310 	add.w	r3, r3, #16
 80028da:	d1f3      	bne.n	80028c4 <arm_fill_f32+0xc>
 80028dc:	eb00 100c 	add.w	r0, r0, ip, lsl #4
 80028e0:	f011 0103 	ands.w	r1, r1, #3
 80028e4:	d009      	beq.n	80028fa <arm_fill_f32+0x42>
 80028e6:	3901      	subs	r1, #1
 80028e8:	ed80 0a00 	vstr	s0, [r0]
 80028ec:	d005      	beq.n	80028fa <arm_fill_f32+0x42>
 80028ee:	2901      	cmp	r1, #1
 80028f0:	ed80 0a01 	vstr	s0, [r0, #4]
 80028f4:	bf18      	it	ne
 80028f6:	ed80 0a02 	vstrne	s0, [r0, #8]
 80028fa:	4770      	bx	lr

080028fc <arm_cfft_f32>:
 80028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002900:	ed2d 8b0c 	vpush	{d8-d13}
 8002904:	b093      	sub	sp, #76	@ 0x4c
 8002906:	2a01      	cmp	r2, #1
 8002908:	8805      	ldrh	r5, [r0, #0]
 800290a:	9202      	str	r2, [sp, #8]
 800290c:	4683      	mov	fp, r0
 800290e:	460c      	mov	r4, r1
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	f000 835a 	beq.w	8002fca <arm_cfft_f32+0x6ce>
 8002916:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800291a:	f000 811d 	beq.w	8002b58 <arm_cfft_f32+0x25c>
 800291e:	d91c      	bls.n	800295a <arm_cfft_f32+0x5e>
 8002920:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8002924:	f000 8118 	beq.w	8002b58 <arm_cfft_f32+0x25c>
 8002928:	f240 8346 	bls.w	8002fb8 <arm_cfft_f32+0x6bc>
 800292c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8002930:	d106      	bne.n	8002940 <arm_cfft_f32+0x44>
 8002932:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002936:	2301      	movs	r3, #1
 8002938:	4629      	mov	r1, r5
 800293a:	4620      	mov	r0, r4
 800293c:	f000 fd76 	bl	800342c <arm_radix8_butterfly_f32>
 8002940:	9b01      	ldr	r3, [sp, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80d4 	bne.w	8002af0 <arm_cfft_f32+0x1f4>
 8002948:	9b02      	ldr	r3, [sp, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f000 80db 	beq.w	8002b06 <arm_cfft_f32+0x20a>
 8002950:	b013      	add	sp, #76	@ 0x4c
 8002952:	ecbd 8b0c 	vpop	{d8-d13}
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800295a:	2d40      	cmp	r5, #64	@ 0x40
 800295c:	d0e9      	beq.n	8002932 <arm_cfft_f32+0x36>
 800295e:	f240 80f5 	bls.w	8002b4c <arm_cfft_f32+0x250>
 8002962:	2d80      	cmp	r5, #128	@ 0x80
 8002964:	d1ec      	bne.n	8002940 <arm_cfft_f32+0x44>
 8002966:	0869      	lsrs	r1, r5, #1
 8002968:	f8db 2004 	ldr.w	r2, [fp, #4]
 800296c:	0088      	lsls	r0, r1, #2
 800296e:	3010      	adds	r0, #16
 8002970:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8002974:	f104 0310 	add.w	r3, r4, #16
 8002978:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 800297c:	eb04 0c00 	add.w	ip, r4, r0
 8002980:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8002984:	4430      	add	r0, r6
 8002986:	f102 0810 	add.w	r8, r2, #16
 800298a:	f106 0710 	add.w	r7, r6, #16
 800298e:	ed17 1a04 	vldr	s2, [r7, #-16]
 8002992:	ed57 1a03 	vldr	s3, [r7, #-12]
 8002996:	ed10 5a04 	vldr	s10, [r0, #-16]
 800299a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800299e:	ed57 8a02 	vldr	s17, [r7, #-8]
 80029a2:	ed17 8a01 	vldr	s16, [r7, #-4]
 80029a6:	ed10 7a02 	vldr	s14, [r0, #-8]
 80029aa:	ed50 7a01 	vldr	s15, [r0, #-4]
 80029ae:	ed13 4a04 	vldr	s8, [r3, #-16]
 80029b2:	ed53 4a03 	vldr	s9, [r3, #-12]
 80029b6:	ed13 6a02 	vldr	s12, [r3, #-8]
 80029ba:	ed53 6a01 	vldr	s13, [r3, #-4]
 80029be:	ed1c 2a04 	vldr	s4, [ip, #-16]
 80029c2:	ed5c 2a03 	vldr	s5, [ip, #-12]
 80029c6:	ed1c 0a02 	vldr	s0, [ip, #-8]
 80029ca:	ed5c 0a01 	vldr	s1, [ip, #-4]
 80029ce:	ee74 ba01 	vadd.f32	s23, s8, s2
 80029d2:	ee34 baa1 	vadd.f32	s22, s9, s3
 80029d6:	ee72 9a05 	vadd.f32	s19, s4, s10
 80029da:	ee32 9aa5 	vadd.f32	s18, s5, s11
 80029de:	ee30 3a07 	vadd.f32	s6, s0, s14
 80029e2:	ee70 3aa7 	vadd.f32	s7, s1, s15
 80029e6:	ee76 aa28 	vadd.f32	s21, s12, s17
 80029ea:	ee36 aa88 	vadd.f32	s20, s13, s16
 80029ee:	ed43 ba04 	vstr	s23, [r3, #-16]
 80029f2:	ed03 ba03 	vstr	s22, [r3, #-12]
 80029f6:	ed43 aa02 	vstr	s21, [r3, #-8]
 80029fa:	ed03 aa01 	vstr	s20, [r3, #-4]
 80029fe:	ed4c 9a04 	vstr	s19, [ip, #-16]
 8002a02:	ed0c 9a03 	vstr	s18, [ip, #-12]
 8002a06:	ed0c 3a02 	vstr	s6, [ip, #-8]
 8002a0a:	ed4c 3a01 	vstr	s7, [ip, #-4]
 8002a0e:	ed58 3a03 	vldr	s7, [r8, #-12]
 8002a12:	ed18 3a04 	vldr	s6, [r8, #-16]
 8002a16:	ee34 4a41 	vsub.f32	s8, s8, s2
 8002a1a:	ee74 4ae1 	vsub.f32	s9, s9, s3
 8002a1e:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8002a22:	ee35 5a42 	vsub.f32	s10, s10, s4
 8002a26:	ee24 1aa3 	vmul.f32	s2, s9, s7
 8002a2a:	ee63 1ac4 	vnmul.f32	s3, s7, s8
 8002a2e:	ee23 2a65 	vnmul.f32	s4, s6, s11
 8002a32:	eea4 1a03 	vfma.f32	s2, s8, s6
 8002a36:	3310      	adds	r3, #16
 8002a38:	459e      	cmp	lr, r3
 8002a3a:	ee65 2a03 	vmul.f32	s5, s10, s6
 8002a3e:	eeb0 4a61 	vmov.f32	s8, s3
 8002a42:	eea4 4a83 	vfma.f32	s8, s9, s6
 8002a46:	f10c 0c10 	add.w	ip, ip, #16
 8002a4a:	f108 0810 	add.w	r8, r8, #16
 8002a4e:	eef0 4a42 	vmov.f32	s9, s4
 8002a52:	eee5 4a23 	vfma.f32	s9, s10, s7
 8002a56:	f107 0710 	add.w	r7, r7, #16
 8002a5a:	f100 0010 	add.w	r0, r0, #16
 8002a5e:	eeb0 5a62 	vmov.f32	s10, s5
 8002a62:	eea5 5aa3 	vfma.f32	s10, s11, s7
 8002a66:	ed07 4a07 	vstr	s8, [r7, #-28]	@ 0xffffffe4
 8002a6a:	ed07 1a08 	vstr	s2, [r7, #-32]	@ 0xffffffe0
 8002a6e:	ed40 4a08 	vstr	s9, [r0, #-32]	@ 0xffffffe0
 8002a72:	ed00 5a07 	vstr	s10, [r0, #-28]	@ 0xffffffe4
 8002a76:	ed58 5a05 	vldr	s11, [r8, #-20]	@ 0xffffffec
 8002a7a:	ed18 5a06 	vldr	s10, [r8, #-24]	@ 0xffffffe8
 8002a7e:	ee36 6a68 	vsub.f32	s12, s12, s17
 8002a82:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8002a86:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002a8a:	ee37 7a40 	vsub.f32	s14, s14, s0
 8002a8e:	ee26 3aa5 	vmul.f32	s6, s13, s11
 8002a92:	ee65 3ac6 	vnmul.f32	s7, s11, s12
 8002a96:	ee25 4a67 	vnmul.f32	s8, s10, s15
 8002a9a:	eea6 3a05 	vfma.f32	s6, s12, s10
 8002a9e:	ee67 4a05 	vmul.f32	s9, s14, s10
 8002aa2:	eeb0 6a63 	vmov.f32	s12, s7
 8002aa6:	eea6 6a85 	vfma.f32	s12, s13, s10
 8002aaa:	eef0 6a44 	vmov.f32	s13, s8
 8002aae:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002ab2:	eeb0 7a64 	vmov.f32	s14, s9
 8002ab6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8002aba:	ed07 3a06 	vstr	s6, [r7, #-24]	@ 0xffffffe8
 8002abe:	ed07 6a05 	vstr	s12, [r7, #-20]	@ 0xffffffec
 8002ac2:	ed40 6a06 	vstr	s13, [r0, #-24]	@ 0xffffffe8
 8002ac6:	ed00 7a05 	vstr	s14, [r0, #-20]	@ 0xffffffec
 8002aca:	f47f af60 	bne.w	800298e <arm_cfft_f32+0x92>
 8002ace:	b289      	uxth	r1, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	9103      	str	r1, [sp, #12]
 8002ad6:	f000 fca9 	bl	800342c <arm_radix8_butterfly_f32>
 8002ada:	2302      	movs	r3, #2
 8002adc:	9903      	ldr	r1, [sp, #12]
 8002ade:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 fca2 	bl	800342c <arm_radix8_butterfly_f32>
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f43f af2c 	beq.w	8002948 <arm_cfft_f32+0x4c>
 8002af0:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002af4:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 8002af8:	4620      	mov	r0, r4
 8002afa:	f000 fc71 	bl	80033e0 <arm_bitreversal_32>
 8002afe:	9b02      	ldr	r3, [sp, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f47f af25 	bne.w	8002950 <arm_cfft_f32+0x54>
 8002b06:	ee07 5a90 	vmov	s15, r5
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	f43f af1a 	beq.w	8002950 <arm_cfft_f32+0x54>
 8002b1c:	3408      	adds	r4, #8
 8002b1e:	2300      	movs	r3, #0
 8002b20:	3301      	adds	r3, #1
 8002b22:	429d      	cmp	r5, r3
 8002b24:	f104 0408 	add.w	r4, r4, #8
 8002b28:	ed14 7a04 	vldr	s14, [r4, #-16]
 8002b2c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8002b30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002b34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002b38:	ed04 7a04 	vstr	s14, [r4, #-16]
 8002b3c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002b40:	d1ee      	bne.n	8002b20 <arm_cfft_f32+0x224>
 8002b42:	b013      	add	sp, #76	@ 0x4c
 8002b44:	ecbd 8b0c 	vpop	{d8-d13}
 8002b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b4c:	2d10      	cmp	r5, #16
 8002b4e:	f43f af0a 	beq.w	8002966 <arm_cfft_f32+0x6a>
 8002b52:	2d20      	cmp	r5, #32
 8002b54:	f47f aef4 	bne.w	8002940 <arm_cfft_f32+0x44>
 8002b58:	086b      	lsrs	r3, r5, #1
 8002b5a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8002b5e:	ed91 6a00 	vldr	s12, [r1]
 8002b62:	edd1 5a01 	vldr	s11, [r1, #4]
 8002b66:	ed94 7a00 	vldr	s14, [r4]
 8002b6a:	edd4 7a01 	vldr	s15, [r4, #4]
 8002b6e:	f8db 7004 	ldr.w	r7, [fp, #4]
 8002b72:	9104      	str	r1, [sp, #16]
 8002b74:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8002b78:	ee77 6a06 	vadd.f32	s13, s14, s12
 8002b7c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002b80:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8002b84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002b88:	edd2 5a00 	vldr	s11, [r2]
 8002b8c:	ed92 2a01 	vldr	s4, [r2, #4]
 8002b90:	9205      	str	r2, [sp, #20]
 8002b92:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8002b96:	ed96 5a00 	vldr	s10, [r6]
 8002b9a:	edd6 2a01 	vldr	s5, [r6, #4]
 8002b9e:	9608      	str	r6, [sp, #32]
 8002ba0:	ee36 3aa5 	vadd.f32	s6, s13, s11
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	ee33 3a05 	vadd.f32	s6, s6, s10
 8002baa:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8002bae:	3008      	adds	r0, #8
 8002bb0:	ed84 3a00 	vstr	s6, [r4]
 8002bb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8002bb6:	0858      	lsrs	r0, r3, #1
 8002bb8:	9006      	str	r0, [sp, #24]
 8002bba:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002bbe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8002bc8:	edd2 3a01 	vldr	s7, [r2, #4]
 8002bcc:	9709      	str	r7, [sp, #36]	@ 0x24
 8002bce:	3008      	adds	r0, #8
 8002bd0:	ee77 4a02 	vadd.f32	s9, s14, s4
 8002bd4:	ee36 4a62 	vsub.f32	s8, s12, s5
 8002bd8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8002bdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002be0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8002be2:	edd6 5a01 	vldr	s11, [r6, #4]
 8002be6:	4608      	mov	r0, r1
 8002be8:	ee37 7a22 	vadd.f32	s14, s14, s5
 8002bec:	ee36 6a23 	vadd.f32	s12, s12, s7
 8002bf0:	3008      	adds	r0, #8
 8002bf2:	900c      	str	r0, [sp, #48]	@ 0x30
 8002bf4:	ee37 7a42 	vsub.f32	s14, s14, s4
 8002bf8:	9806      	ldr	r0, [sp, #24]
 8002bfa:	ee34 4a42 	vsub.f32	s8, s8, s4
 8002bfe:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8002c02:	ee36 6a25 	vadd.f32	s12, s12, s11
 8002c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002c0a:	ed84 6a01 	vstr	s12, [r4, #4]
 8002c0e:	3b0c      	subs	r3, #12
 8002c10:	ed86 7a00 	vstr	s14, [r6]
 8002c14:	ed86 5a01 	vstr	s10, [r6, #4]
 8002c18:	edc1 6a00 	vstr	s13, [r1]
 8002c1c:	ed81 4a01 	vstr	s8, [r1, #4]
 8002c20:	4611      	mov	r1, r2
 8002c22:	edc2 4a00 	vstr	s9, [r2]
 8002c26:	edc2 7a01 	vstr	s15, [r2, #4]
 8002c2a:	1e82      	subs	r2, r0, #2
 8002c2c:	0850      	lsrs	r0, r2, #1
 8002c2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002c30:	3108      	adds	r1, #8
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	f104 0210 	add.w	r2, r4, #16
 8002c3a:	910d      	str	r1, [sp, #52]	@ 0x34
 8002c3c:	9003      	str	r0, [sp, #12]
 8002c3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002c40:	f107 0820 	add.w	r8, r7, #32
 8002c44:	9210      	str	r2, [sp, #64]	@ 0x40
 8002c46:	f107 0930 	add.w	r9, r7, #48	@ 0x30
 8002c4a:	9f03      	ldr	r7, [sp, #12]
 8002c4c:	9a04      	ldr	r2, [sp, #16]
 8002c4e:	9511      	str	r5, [sp, #68]	@ 0x44
 8002c50:	469a      	mov	sl, r3
 8002c52:	013b      	lsls	r3, r7, #4
 8002c54:	9307      	str	r3, [sp, #28]
 8002c56:	eb08 1307 	add.w	r3, r8, r7, lsl #4
 8002c5a:	f1a2 010c 	sub.w	r1, r2, #12
 8002c5e:	f102 0e10 	add.w	lr, r2, #16
 8002c62:	461d      	mov	r5, r3
 8002c64:	9a05      	ldr	r2, [sp, #20]
 8002c66:	e9dd 370f 	ldrd	r3, r7, [sp, #60]	@ 0x3c
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f1a2 0c0c 	sub.w	ip, r2, #12
 8002c70:	3e0c      	subs	r6, #12
 8002c72:	3010      	adds	r0, #16
 8002c74:	3210      	adds	r2, #16
 8002c76:	ed52 8a02 	vldr	s17, [r2, #-8]
 8002c7a:	ed50 1a02 	vldr	s3, [r0, #-8]
 8002c7e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8002c82:	ed57 2a02 	vldr	s5, [r7, #-8]
 8002c86:	ed12 1a01 	vldr	s2, [r2, #-4]
 8002c8a:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8002c8e:	ed10 ba01 	vldr	s22, [r0, #-4]
 8002c92:	ed57 6a01 	vldr	s13, [r7, #-4]
 8002c96:	ee72 3a86 	vadd.f32	s7, s5, s12
 8002c9a:	ee71 7aa8 	vadd.f32	s15, s3, s17
 8002c9e:	ee36 4a87 	vadd.f32	s8, s13, s14
 8002ca2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002ca6:	ee72 2ac6 	vsub.f32	s5, s5, s12
 8002caa:	ed47 7a02 	vstr	s15, [r7, #-8]
 8002cae:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002cb2:	ed50 7a01 	vldr	s15, [r0, #-4]
 8002cb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002cba:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002cbe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8002cc2:	ee32 aac1 	vsub.f32	s20, s5, s2
 8002cc6:	ed47 7a01 	vstr	s15, [r7, #-4]
 8002cca:	eddc ba02 	vldr	s23, [ip, #8]
 8002cce:	ed93 ca02 	vldr	s24, [r3, #8]
 8002cd2:	ed91 5a02 	vldr	s10, [r1, #8]
 8002cd6:	edd6 0a02 	vldr	s1, [r6, #8]
 8002cda:	ed9c 0a01 	vldr	s0, [ip, #4]
 8002cde:	ed93 6a01 	vldr	s12, [r3, #4]
 8002ce2:	ed91 8a01 	vldr	s16, [r1, #4]
 8002ce6:	ed96 7a01 	vldr	s14, [r6, #4]
 8002cea:	ee70 caab 	vadd.f32	s25, s1, s23
 8002cee:	ee35 da0c 	vadd.f32	s26, s10, s24
 8002cf2:	ee77 aa00 	vadd.f32	s21, s14, s0
 8002cf6:	ee7c 7a8d 	vadd.f32	s15, s25, s26
 8002cfa:	ee76 9ae1 	vsub.f32	s19, s13, s3
 8002cfe:	edc6 7a02 	vstr	s15, [r6, #8]
 8002d02:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d06:	ed91 2a01 	vldr	s4, [r1, #4]
 8002d0a:	ee32 2a27 	vadd.f32	s4, s4, s15
 8002d0e:	ee79 9aa8 	vadd.f32	s19, s19, s17
 8002d12:	ee32 2a2a 	vadd.f32	s4, s4, s21
 8002d16:	ee3a aa0b 	vadd.f32	s20, s20, s22
 8002d1a:	ed86 2a01 	vstr	s4, [r6, #4]
 8002d1e:	ed1a 9a01 	vldr	s18, [sl, #-4]
 8002d22:	ed5a 7a02 	vldr	s15, [sl, #-8]
 8002d26:	ee30 3a86 	vadd.f32	s6, s1, s12
 8002d2a:	ee7a aac8 	vsub.f32	s21, s21, s16
 8002d2e:	ee7c 5ac5 	vsub.f32	s11, s25, s10
 8002d32:	ee75 4a4c 	vsub.f32	s9, s10, s24
 8002d36:	ee33 3a6b 	vsub.f32	s6, s6, s23
 8002d3a:	ee3a 5ac6 	vsub.f32	s10, s21, s12
 8002d3e:	ee75 5acc 	vsub.f32	s11, s11, s24
 8002d42:	ee3b 6a86 	vadd.f32	s12, s23, s12
 8002d46:	ee29 ca89 	vmul.f32	s24, s19, s18
 8002d4a:	ee69 ba4a 	vnmul.f32	s23, s18, s20
 8002d4e:	eeaa ca27 	vfma.f32	s24, s20, s15
 8002d52:	f108 0810 	add.w	r8, r8, #16
 8002d56:	3708      	adds	r7, #8
 8002d58:	eeb0 aa6b 	vmov.f32	s20, s23
 8002d5c:	eea9 aaa7 	vfma.f32	s20, s19, s15
 8002d60:	3e08      	subs	r6, #8
 8002d62:	f10a 0a08 	add.w	sl, sl, #8
 8002d66:	ee74 9ac0 	vsub.f32	s19, s9, s0
 8002d6a:	ee33 3a48 	vsub.f32	s6, s6, s16
 8002d6e:	ee79 9a87 	vadd.f32	s19, s19, s14
 8002d72:	ee63 aa27 	vmul.f32	s21, s6, s15
 8002d76:	ee67 7ae9 	vnmul.f32	s15, s15, s19
 8002d7a:	ed00 aa01 	vstr	s20, [r0, #-4]
 8002d7e:	eeb0 aa6a 	vmov.f32	s20, s21
 8002d82:	eee3 7a09 	vfma.f32	s15, s6, s18
 8002d86:	3008      	adds	r0, #8
 8002d88:	3908      	subs	r1, #8
 8002d8a:	eea9 aa89 	vfma.f32	s20, s19, s18
 8002d8e:	f10e 0e08 	add.w	lr, lr, #8
 8002d92:	f1ac 0c08 	sub.w	ip, ip, #8
 8002d96:	ee73 3ae1 	vsub.f32	s7, s7, s3
 8002d9a:	ee34 4a4b 	vsub.f32	s8, s8, s22
 8002d9e:	ed00 ca04 	vstr	s24, [r0, #-16]
 8002da2:	ed81 aa03 	vstr	s20, [r1, #12]
 8002da6:	edc1 7a04 	vstr	s15, [r1, #16]
 8002daa:	ed58 7a07 	vldr	s15, [r8, #-28]	@ 0xffffffe4
 8002dae:	ee73 3ae8 	vsub.f32	s7, s7, s17
 8002db2:	ee34 4a41 	vsub.f32	s8, s8, s2
 8002db6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8002dba:	ee76 6ae8 	vsub.f32	s13, s13, s17
 8002dbe:	ed58 4a08 	vldr	s9, [r8, #-32]	@ 0xffffffe0
 8002dc2:	ee64 8a27 	vmul.f32	s17, s8, s15
 8002dc6:	ee27 3ae3 	vnmul.f32	s6, s15, s7
 8002dca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002dce:	ee3d 2a6c 	vsub.f32	s4, s26, s25
 8002dd2:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8002dd6:	eee3 8aa4 	vfma.f32	s17, s7, s9
 8002dda:	4545      	cmp	r5, r8
 8002ddc:	f109 0918 	add.w	r9, r9, #24
 8002de0:	eef0 3a43 	vmov.f32	s7, s6
 8002de4:	eee4 3a24 	vfma.f32	s7, s8, s9
 8002de8:	f102 0208 	add.w	r2, r2, #8
 8002dec:	f1a3 0308 	sub.w	r3, r3, #8
 8002df0:	eee5 5a64 	vfms.f32	s11, s10, s9
 8002df4:	eee4 7a82 	vfma.f32	s15, s9, s4
 8002df8:	ee72 2acb 	vsub.f32	s5, s5, s22
 8002dfc:	ed4e 8a04 	vstr	s17, [lr, #-16]
 8002e00:	ee36 6a48 	vsub.f32	s12, s12, s16
 8002e04:	ed4e 3a03 	vstr	s7, [lr, #-12]
 8002e08:	edcc 7a04 	vstr	s15, [ip, #16]
 8002e0c:	edcc 5a03 	vstr	s11, [ip, #12]
 8002e10:	ed19 5a0c 	vldr	s10, [r9, #-48]	@ 0xffffffd0
 8002e14:	ed59 5a0b 	vldr	s11, [r9, #-44]	@ 0xffffffd4
 8002e18:	ee77 7a00 	vadd.f32	s15, s14, s0
 8002e1c:	ee32 1a81 	vadd.f32	s2, s5, s2
 8002e20:	ee36 7a60 	vsub.f32	s14, s12, s1
 8002e24:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8002e28:	ee25 4ac1 	vnmul.f32	s8, s11, s2
 8002e2c:	ee65 4a67 	vnmul.f32	s9, s10, s15
 8002e30:	ee27 6a05 	vmul.f32	s12, s14, s10
 8002e34:	eea6 4a85 	vfma.f32	s8, s13, s10
 8002e38:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8002e3c:	eef0 6a64 	vmov.f32	s13, s9
 8002e40:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002e44:	eeb0 7a46 	vmov.f32	s14, s12
 8002e48:	eee1 3a05 	vfma.f32	s7, s2, s10
 8002e4c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8002e50:	ed42 3a04 	vstr	s7, [r2, #-16]
 8002e54:	ed02 4a03 	vstr	s8, [r2, #-12]
 8002e58:	edc3 6a04 	vstr	s13, [r3, #16]
 8002e5c:	ed83 7a03 	vstr	s14, [r3, #12]
 8002e60:	f47f af09 	bne.w	8002c76 <arm_cfft_f32+0x37a>
 8002e64:	9a07      	ldr	r2, [sp, #28]
 8002e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e68:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8002e6c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8002e6e:	4413      	add	r3, r2
 8002e70:	469c      	mov	ip, r3
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 8002e7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002e7e:	edd3 4a02 	vldr	s9, [r3, #8]
 8002e82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e86:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8002e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e8c:	ed97 4a02 	vldr	s8, [r7, #8]
 8002e90:	edd7 2a03 	vldr	s5, [r7, #12]
 8002e94:	eb02 06c0 	add.w	r6, r2, r0, lsl #3
 8002e98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002e9a:	ed96 7a02 	vldr	s14, [r6, #8]
 8002e9e:	edd6 6a03 	vldr	s13, [r6, #12]
 8002ea2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002ea6:	ed92 3a02 	vldr	s6, [r2, #8]
 8002eaa:	edd2 3a03 	vldr	s7, [r2, #12]
 8002eae:	ee74 5a84 	vadd.f32	s11, s9, s8
 8002eb2:	ee37 6a03 	vadd.f32	s12, s14, s6
 8002eb6:	ee37 7a43 	vsub.f32	s14, s14, s6
 8002eba:	ee75 5a86 	vadd.f32	s11, s11, s12
 8002ebe:	ee36 6a64 	vsub.f32	s12, s12, s9
 8002ec2:	edc6 5a02 	vstr	s11, [r6, #8]
 8002ec6:	ed97 2a03 	vldr	s4, [r7, #12]
 8002eca:	ed93 5a03 	vldr	s10, [r3, #12]
 8002ece:	ee76 5aa3 	vadd.f32	s11, s13, s7
 8002ed2:	ee35 5a02 	vadd.f32	s10, s10, s4
 8002ed6:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8002eda:	ee35 5a25 	vadd.f32	s10, s10, s11
 8002ede:	ee77 3a62 	vsub.f32	s7, s14, s5
 8002ee2:	ed86 5a03 	vstr	s10, [r6, #12]
 8002ee6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002ee8:	ee36 3ae4 	vsub.f32	s6, s13, s9
 8002eec:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 8002ef0:	ed90 5a05 	vldr	s10, [r0, #20]
 8002ef4:	edd0 1a04 	vldr	s3, [r0, #16]
 8002ef8:	ee33 3a04 	vadd.f32	s6, s6, s8
 8002efc:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8002f00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002f04:	ee25 2a63 	vnmul.f32	s4, s10, s7
 8002f08:	ee23 5a05 	vmul.f32	s10, s6, s10
 8002f0c:	eea3 2a21 	vfma.f32	s4, s6, s3
 8002f10:	4620      	mov	r0, r4
 8002f12:	eea3 5aa1 	vfma.f32	s10, s7, s3
 8002f16:	ed83 2a03 	vstr	s4, [r3, #12]
 8002f1a:	ed83 5a02 	vstr	s10, [r3, #8]
 8002f1e:	ed9c 5a01 	vldr	s10, [ip, #4]
 8002f22:	ed9c 3a00 	vldr	s6, [ip]
 8002f26:	9b03      	ldr	r3, [sp, #12]
 8002f28:	ee36 6a44 	vsub.f32	s12, s12, s8
 8002f2c:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8002f30:	ee65 3a46 	vnmul.f32	s7, s10, s12
 8002f34:	ee25 5a85 	vmul.f32	s10, s11, s10
 8002f38:	eee5 3a83 	vfma.f32	s7, s11, s6
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f42:	eea6 5a03 	vfma.f32	s10, s12, s6
 8002f46:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f4e:	ee36 7ac4 	vsub.f32	s14, s13, s8
 8002f52:	ed82 5a02 	vstr	s10, [r2, #8]
 8002f56:	edc2 3a03 	vstr	s7, [r2, #12]
 8002f5a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8002f5e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8002f62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f66:	edd3 5a00 	vldr	s11, [r3]
 8002f6a:	9103      	str	r1, [sp, #12]
 8002f6c:	ee26 6ae7 	vnmul.f32	s12, s13, s15
 8002f70:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002f74:	eea7 6a25 	vfma.f32	s12, s14, s11
 8002f78:	4632      	mov	r2, r6
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8002f80:	ed87 6a03 	vstr	s12, [r7, #12]
 8002f84:	edc7 6a02 	vstr	s13, [r7, #8]
 8002f88:	f000 fa50 	bl	800342c <arm_radix8_butterfly_f32>
 8002f8c:	9808      	ldr	r0, [sp, #32]
 8002f8e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002f92:	9903      	ldr	r1, [sp, #12]
 8002f94:	2304      	movs	r3, #4
 8002f96:	f000 fa49 	bl	800342c <arm_radix8_butterfly_f32>
 8002f9a:	9804      	ldr	r0, [sp, #16]
 8002f9c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002fa0:	9903      	ldr	r1, [sp, #12]
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	f000 fa42 	bl	800342c <arm_radix8_butterfly_f32>
 8002fa8:	9903      	ldr	r1, [sp, #12]
 8002faa:	9805      	ldr	r0, [sp, #20]
 8002fac:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f000 fa3b 	bl	800342c <arm_radix8_butterfly_f32>
 8002fb6:	e4c3      	b.n	8002940 <arm_cfft_f32+0x44>
 8002fb8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8002fbc:	f43f acb9 	beq.w	8002932 <arm_cfft_f32+0x36>
 8002fc0:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8002fc4:	f43f accf 	beq.w	8002966 <arm_cfft_f32+0x6a>
 8002fc8:	e4ba      	b.n	8002940 <arm_cfft_f32+0x44>
 8002fca:	b175      	cbz	r5, 8002fea <arm_cfft_f32+0x6ee>
 8002fcc:	f101 030c 	add.w	r3, r1, #12
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002fd6:	3201      	adds	r2, #1
 8002fd8:	eef1 7a67 	vneg.f32	s15, s15
 8002fdc:	4295      	cmp	r5, r2
 8002fde:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002fe2:	f103 0308 	add.w	r3, r3, #8
 8002fe6:	d1f4      	bne.n	8002fd2 <arm_cfft_f32+0x6d6>
 8002fe8:	e495      	b.n	8002916 <arm_cfft_f32+0x1a>
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f43f acaf 	beq.w	8002950 <arm_cfft_f32+0x54>
 8002ff2:	e57d      	b.n	8002af0 <arm_cfft_f32+0x1f4>

08002ff4 <arm_cfft_init_2048_f32>:
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <arm_cfft_init_2048_f32+0x1c>)
 8002ff6:	8999      	ldrh	r1, [r3, #12]
 8002ff8:	8181      	strh	r1, [r0, #12]
 8002ffa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8002ffe:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
 8003002:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8003006:	f8a0 c000 	strh.w	ip, [r0]
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	08026634 	.word	0x08026634

08003014 <arm_cfft_init_1024_f32>:
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <arm_cfft_init_1024_f32+0x1c>)
 8003016:	8999      	ldrh	r1, [r3, #12]
 8003018:	8181      	strh	r1, [r0, #12]
 800301a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800301e:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8003022:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8003026:	f8a0 c000 	strh.w	ip, [r0]
 800302a:	2000      	movs	r0, #0
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	08026604 	.word	0x08026604

08003034 <arm_cfft_init_512_f32>:
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <arm_cfft_init_512_f32+0x1c>)
 8003036:	8999      	ldrh	r1, [r3, #12]
 8003038:	8181      	strh	r1, [r0, #12]
 800303a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800303e:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8003042:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8003046:	f8a0 c000 	strh.w	ip, [r0]
 800304a:	2000      	movs	r0, #0
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	08026674 	.word	0x08026674

08003054 <arm_cfft_init_256_f32>:
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <arm_cfft_init_256_f32+0x1c>)
 8003056:	8999      	ldrh	r1, [r3, #12]
 8003058:	8181      	strh	r1, [r0, #12]
 800305a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800305e:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 8003062:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8003066:	f8a0 c000 	strh.w	ip, [r0]
 800306a:	2000      	movs	r0, #0
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	08026644 	.word	0x08026644

08003074 <arm_cfft_init_128_f32>:
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <arm_cfft_init_128_f32+0x1c>)
 8003076:	8999      	ldrh	r1, [r3, #12]
 8003078:	8181      	strh	r1, [r0, #12]
 800307a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800307e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8003082:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8003086:	f8a0 c000 	strh.w	ip, [r0]
 800308a:	2000      	movs	r0, #0
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	08026614 	.word	0x08026614

08003094 <arm_cfft_init_64_f32>:
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <arm_cfft_init_64_f32+0x1c>)
 8003096:	8999      	ldrh	r1, [r3, #12]
 8003098:	8181      	strh	r1, [r0, #12]
 800309a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 800309e:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 80030a2:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80030a6:	f8a0 c000 	strh.w	ip, [r0]
 80030aa:	2000      	movs	r0, #0
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08026684 	.word	0x08026684

080030b4 <arm_cfft_init_32_f32>:
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <arm_cfft_init_32_f32+0x1c>)
 80030b6:	8999      	ldrh	r1, [r3, #12]
 80030b8:	8181      	strh	r1, [r0, #12]
 80030ba:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80030be:	f04f 0c20 	mov.w	ip, #32
 80030c2:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80030c6:	f8a0 c000 	strh.w	ip, [r0]
 80030ca:	2000      	movs	r0, #0
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	08026654 	.word	0x08026654

080030d4 <arm_cfft_init_16_f32>:
 80030d4:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <arm_cfft_init_16_f32+0x1c>)
 80030d6:	8999      	ldrh	r1, [r3, #12]
 80030d8:	8181      	strh	r1, [r0, #12]
 80030da:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80030de:	f04f 0c10 	mov.w	ip, #16
 80030e2:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80030e6:	f8a0 c000 	strh.w	ip, [r0]
 80030ea:	2000      	movs	r0, #0
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	08026624 	.word	0x08026624

080030f4 <arm_cfft_init_f32>:
 80030f4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80030f8:	d031      	beq.n	800315e <arm_cfft_init_f32+0x6a>
 80030fa:	d918      	bls.n	800312e <arm_cfft_init_f32+0x3a>
 80030fc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003100:	d025      	beq.n	800314e <arm_cfft_init_f32+0x5a>
 8003102:	d90c      	bls.n	800311e <arm_cfft_init_f32+0x2a>
 8003104:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003108:	d11e      	bne.n	8003148 <arm_cfft_init_f32+0x54>
 800310a:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <arm_cfft_init_f32+0x70>)
 800310c:	8001      	strh	r1, [r0, #0]
 800310e:	8999      	ldrh	r1, [r3, #12]
 8003110:	8181      	strh	r1, [r0, #12]
 8003112:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8003116:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800311a:	2000      	movs	r0, #0
 800311c:	4770      	bx	lr
 800311e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003122:	d016      	beq.n	8003152 <arm_cfft_init_f32+0x5e>
 8003124:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003128:	d10e      	bne.n	8003148 <arm_cfft_init_f32+0x54>
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <arm_cfft_init_f32+0x74>)
 800312c:	e7ee      	b.n	800310c <arm_cfft_init_f32+0x18>
 800312e:	2940      	cmp	r1, #64	@ 0x40
 8003130:	d011      	beq.n	8003156 <arm_cfft_init_f32+0x62>
 8003132:	d903      	bls.n	800313c <arm_cfft_init_f32+0x48>
 8003134:	2980      	cmp	r1, #128	@ 0x80
 8003136:	d107      	bne.n	8003148 <arm_cfft_init_f32+0x54>
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <arm_cfft_init_f32+0x78>)
 800313a:	e7e7      	b.n	800310c <arm_cfft_init_f32+0x18>
 800313c:	2910      	cmp	r1, #16
 800313e:	d00c      	beq.n	800315a <arm_cfft_init_f32+0x66>
 8003140:	2920      	cmp	r1, #32
 8003142:	d101      	bne.n	8003148 <arm_cfft_init_f32+0x54>
 8003144:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <arm_cfft_init_f32+0x7c>)
 8003146:	e7e1      	b.n	800310c <arm_cfft_init_f32+0x18>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	4770      	bx	lr
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <arm_cfft_init_f32+0x80>)
 8003150:	e7dc      	b.n	800310c <arm_cfft_init_f32+0x18>
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <arm_cfft_init_f32+0x84>)
 8003154:	e7da      	b.n	800310c <arm_cfft_init_f32+0x18>
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <arm_cfft_init_f32+0x88>)
 8003158:	e7d8      	b.n	800310c <arm_cfft_init_f32+0x18>
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <arm_cfft_init_f32+0x8c>)
 800315c:	e7d6      	b.n	800310c <arm_cfft_init_f32+0x18>
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <arm_cfft_init_f32+0x90>)
 8003160:	e7d4      	b.n	800310c <arm_cfft_init_f32+0x18>
 8003162:	bf00      	nop
 8003164:	08026664 	.word	0x08026664
 8003168:	08026604 	.word	0x08026604
 800316c:	08026614 	.word	0x08026614
 8003170:	08026654 	.word	0x08026654
 8003174:	08026634 	.word	0x08026634
 8003178:	08026674 	.word	0x08026674
 800317c:	08026684 	.word	0x08026684
 8003180:	08026624 	.word	0x08026624
 8003184:	08026644 	.word	0x08026644

08003188 <arm_rfft_fast_f32>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4615      	mov	r5, r2
 800318c:	4606      	mov	r6, r0
 800318e:	460c      	mov	r4, r1
 8003190:	461a      	mov	r2, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d055      	beq.n	8003242 <arm_rfft_fast_f32+0xba>
 8003196:	edd1 7a00 	vldr	s15, [r1]
 800319a:	edd1 6a01 	vldr	s13, [r1, #4]
 800319e:	8800      	ldrh	r0, [r0, #0]
 80031a0:	6971      	ldr	r1, [r6, #20]
 80031a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80031a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031aa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80031ae:	1e43      	subs	r3, r0, #1
 80031b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80031b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	ed85 7a00 	vstr	s14, [r5]
 80031be:	edc5 7a01 	vstr	s15, [r5, #4]
 80031c2:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 80031c6:	dd35      	ble.n	8003234 <arm_rfft_fast_f32+0xac>
 80031c8:	f101 0e10 	add.w	lr, r1, #16
 80031cc:	ebac 00c0 	sub.w	r0, ip, r0, lsl #3
 80031d0:	3410      	adds	r4, #16
 80031d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80031d6:	f105 0110 	add.w	r1, r5, #16
 80031da:	eddc 6a03 	vldr	s13, [ip, #12]
 80031de:	eddc 7a02 	vldr	s15, [ip, #8]
 80031e2:	ed14 7a02 	vldr	s14, [r4, #-8]
 80031e6:	ed14 5a01 	vldr	s10, [r4, #-4]
 80031ea:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80031ee:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80031f2:	ee77 4a67 	vsub.f32	s9, s14, s15
 80031f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031fa:	ee35 7a66 	vsub.f32	s14, s10, s13
 80031fe:	eee6 7a64 	vfms.f32	s15, s12, s9
 8003202:	f1ac 0c08 	sub.w	ip, ip, #8
 8003206:	3108      	adds	r1, #8
 8003208:	eea5 7aa4 	vfma.f32	s14, s11, s9
 800320c:	4560      	cmp	r0, ip
 800320e:	f10e 0e08 	add.w	lr, lr, #8
 8003212:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003216:	f104 0408 	add.w	r4, r4, #8
 800321a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800321e:	eea6 7a66 	vfms.f32	s14, s12, s13
 8003222:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003226:	ee27 7a04 	vmul.f32	s14, s14, s8
 800322a:	ed41 7a04 	vstr	s15, [r1, #-16]
 800322e:	ed01 7a03 	vstr	s14, [r1, #-12]
 8003232:	d1d2      	bne.n	80031da <arm_rfft_fast_f32+0x52>
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	2301      	movs	r3, #1
 800323a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800323e:	f7ff bb5d 	b.w	80028fc <arm_cfft_f32>
 8003242:	2301      	movs	r3, #1
 8003244:	f7ff fb5a 	bl	80028fc <arm_cfft_f32>
 8003248:	edd4 7a01 	vldr	s15, [r4, #4]
 800324c:	ed94 6a00 	vldr	s12, [r4]
 8003250:	8833      	ldrh	r3, [r6, #0]
 8003252:	6970      	ldr	r0, [r6, #20]
 8003254:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003258:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800325c:	eeb0 7a67 	vmov.f32	s14, s15
 8003260:	eea6 7a26 	vfma.f32	s14, s12, s13
 8003264:	1e5e      	subs	r6, r3, #1
 8003266:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800326a:	eed6 7a26 	vfnms.f32	s15, s12, s13
 800326e:	3010      	adds	r0, #16
 8003270:	f105 0210 	add.w	r2, r5, #16
 8003274:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8003278:	ee27 7a04 	vmul.f32	s14, s14, s8
 800327c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003280:	ed85 7a00 	vstr	s14, [r5]
 8003284:	edc5 7a01 	vstr	s15, [r5, #4]
 8003288:	f104 0310 	add.w	r3, r4, #16
 800328c:	3908      	subs	r1, #8
 800328e:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003292:	edd1 6a03 	vldr	s13, [r1, #12]
 8003296:	edd1 7a02 	vldr	s15, [r1, #8]
 800329a:	ed13 5a01 	vldr	s10, [r3, #-4]
 800329e:	ed10 6a02 	vldr	s12, [r0, #-8]
 80032a2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80032a6:	ee77 4ac7 	vsub.f32	s9, s15, s14
 80032aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ae:	ee35 7a66 	vsub.f32	s14, s10, s13
 80032b2:	eee6 7a24 	vfma.f32	s15, s12, s9
 80032b6:	3e01      	subs	r6, #1
 80032b8:	3208      	adds	r2, #8
 80032ba:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80032be:	2e00      	cmp	r6, #0
 80032c0:	f100 0008 	add.w	r0, r0, #8
 80032c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80032c8:	f103 0308 	add.w	r3, r3, #8
 80032cc:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80032d0:	f1a1 0108 	sub.w	r1, r1, #8
 80032d4:	eea6 7a66 	vfms.f32	s14, s12, s13
 80032d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80032dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80032e0:	ed42 7a04 	vstr	s15, [r2, #-16]
 80032e4:	ed02 7a03 	vstr	s14, [r2, #-12]
 80032e8:	dcd1      	bgt.n	800328e <arm_rfft_fast_f32+0x106>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}

080032ec <arm_rfft_fast_init_f32>:
 80032ec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	460c      	mov	r4, r1
 80032f4:	4605      	mov	r5, r0
 80032f6:	d04e      	beq.n	8003396 <arm_rfft_fast_init_f32+0xaa>
 80032f8:	d80e      	bhi.n	8003318 <arm_rfft_fast_init_f32+0x2c>
 80032fa:	2980      	cmp	r1, #128	@ 0x80
 80032fc:	d037      	beq.n	800336e <arm_rfft_fast_init_f32+0x82>
 80032fe:	d91a      	bls.n	8003336 <arm_rfft_fast_init_f32+0x4a>
 8003300:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003304:	d130      	bne.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 8003306:	2800      	cmp	r0, #0
 8003308:	d02e      	beq.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 800330a:	f7ff feb3 	bl	8003074 <arm_cfft_init_128_f32>
 800330e:	b910      	cbnz	r0, 8003316 <arm_rfft_fast_init_f32+0x2a>
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <arm_rfft_fast_init_f32+0xd4>)
 8003312:	822c      	strh	r4, [r5, #16]
 8003314:	616b      	str	r3, [r5, #20]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800331c:	d031      	beq.n	8003382 <arm_rfft_fast_init_f32+0x96>
 800331e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003322:	d115      	bne.n	8003350 <arm_rfft_fast_init_f32+0x64>
 8003324:	b300      	cbz	r0, 8003368 <arm_rfft_fast_init_f32+0x7c>
 8003326:	f7ff fe65 	bl	8002ff4 <arm_cfft_init_2048_f32>
 800332a:	2800      	cmp	r0, #0
 800332c:	d1f3      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 800332e:	4b25      	ldr	r3, [pc, #148]	@ (80033c4 <arm_rfft_fast_init_f32+0xd8>)
 8003330:	822c      	strh	r4, [r5, #16]
 8003332:	616b      	str	r3, [r5, #20]
 8003334:	bd38      	pop	{r3, r4, r5, pc}
 8003336:	2920      	cmp	r1, #32
 8003338:	d037      	beq.n	80033aa <arm_rfft_fast_init_f32+0xbe>
 800333a:	2940      	cmp	r1, #64	@ 0x40
 800333c:	d114      	bne.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 800333e:	b198      	cbz	r0, 8003368 <arm_rfft_fast_init_f32+0x7c>
 8003340:	f7ff feb8 	bl	80030b4 <arm_cfft_init_32_f32>
 8003344:	2800      	cmp	r0, #0
 8003346:	d1e6      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 8003348:	4b1f      	ldr	r3, [pc, #124]	@ (80033c8 <arm_rfft_fast_init_f32+0xdc>)
 800334a:	822c      	strh	r4, [r5, #16]
 800334c:	616b      	str	r3, [r5, #20]
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003354:	d108      	bne.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 8003356:	b138      	cbz	r0, 8003368 <arm_rfft_fast_init_f32+0x7c>
 8003358:	f7ff fe6c 	bl	8003034 <arm_cfft_init_512_f32>
 800335c:	2800      	cmp	r0, #0
 800335e:	d1da      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 8003360:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <arm_rfft_fast_init_f32+0xe0>)
 8003362:	822c      	strh	r4, [r5, #16]
 8003364:	616b      	str	r3, [r5, #20]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	bd38      	pop	{r3, r4, r5, pc}
 800336e:	2800      	cmp	r0, #0
 8003370:	d0fa      	beq.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 8003372:	f7ff fe8f 	bl	8003094 <arm_cfft_init_64_f32>
 8003376:	2800      	cmp	r0, #0
 8003378:	d1cd      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 800337a:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <arm_rfft_fast_init_f32+0xe4>)
 800337c:	822c      	strh	r4, [r5, #16]
 800337e:	616b      	str	r3, [r5, #20]
 8003380:	bd38      	pop	{r3, r4, r5, pc}
 8003382:	2800      	cmp	r0, #0
 8003384:	d0f0      	beq.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 8003386:	f7ff fe45 	bl	8003014 <arm_cfft_init_1024_f32>
 800338a:	2800      	cmp	r0, #0
 800338c:	d1c3      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 800338e:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <arm_rfft_fast_init_f32+0xe8>)
 8003390:	822c      	strh	r4, [r5, #16]
 8003392:	616b      	str	r3, [r5, #20]
 8003394:	bd38      	pop	{r3, r4, r5, pc}
 8003396:	2800      	cmp	r0, #0
 8003398:	d0e6      	beq.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 800339a:	f7ff fe5b 	bl	8003054 <arm_cfft_init_256_f32>
 800339e:	2800      	cmp	r0, #0
 80033a0:	d1b9      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <arm_rfft_fast_init_f32+0xec>)
 80033a4:	822c      	strh	r4, [r5, #16]
 80033a6:	616b      	str	r3, [r5, #20]
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d0dc      	beq.n	8003368 <arm_rfft_fast_init_f32+0x7c>
 80033ae:	f7ff fe91 	bl	80030d4 <arm_cfft_init_16_f32>
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d1af      	bne.n	8003316 <arm_rfft_fast_init_f32+0x2a>
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <arm_rfft_fast_init_f32+0xf0>)
 80033b8:	822c      	strh	r4, [r5, #16]
 80033ba:	616b      	str	r3, [r5, #20]
 80033bc:	bd38      	pop	{r3, r4, r5, pc}
 80033be:	bf00      	nop
 80033c0:	08021884 	.word	0x08021884
 80033c4:	08021d04 	.word	0x08021d04
 80033c8:	08026504 	.word	0x08026504
 80033cc:	0801e684 	.word	0x0801e684
 80033d0:	0801f684 	.word	0x0801f684
 80033d4:	0801f884 	.word	0x0801f884
 80033d8:	08025d04 	.word	0x08025d04
 80033dc:	08021c84 	.word	0x08021c84

080033e0 <arm_bitreversal_32>:
 80033e0:	b311      	cbz	r1, 8003428 <arm_bitreversal_32+0x48>
 80033e2:	b570      	push	{r4, r5, r6, lr}
 80033e4:	f04f 0e00 	mov.w	lr, #0
 80033e8:	1c95      	adds	r5, r2, #2
 80033ea:	f832 c01e 	ldrh.w	ip, [r2, lr, lsl #1]
 80033ee:	f835 301e 	ldrh.w	r3, [r5, lr, lsl #1]
 80033f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	f850 602c 	ldr.w	r6, [r0, ip, lsl #2]
 80033fc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8003400:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
 8003404:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8003408:	f10c 0c01 	add.w	ip, ip, #1
 800340c:	3301      	adds	r3, #1
 800340e:	f10e 0e02 	add.w	lr, lr, #2
 8003412:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 8003416:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800341a:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
 800341e:	458e      	cmp	lr, r1
 8003420:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8003424:	d3e1      	bcc.n	80033ea <arm_bitreversal_32+0xa>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <arm_radix8_butterfly_f32>:
 800342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	ed2d 8b10 	vpush	{d8-d15}
 8003434:	b08f      	sub	sp, #60	@ 0x3c
 8003436:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
 800343a:	4603      	mov	r3, r0
 800343c:	3304      	adds	r3, #4
 800343e:	eddf cabd 	vldr	s25, [pc, #756]	@ 8003734 <arm_radix8_butterfly_f32+0x308>
 8003442:	900c      	str	r0, [sp, #48]	@ 0x30
 8003444:	468a      	mov	sl, r1
 8003446:	468b      	mov	fp, r1
 8003448:	930d      	str	r3, [sp, #52]	@ 0x34
 800344a:	ea4f 07db 	mov.w	r7, fp, lsr #3
 800344e:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8003452:	ea4f 00cb 	mov.w	r0, fp, lsl #3
 8003456:	9000      	str	r0, [sp, #0]
 8003458:	00e4      	lsls	r4, r4, #3
 800345a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800345e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003460:	9402      	str	r4, [sp, #8]
 8003462:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8003466:	00c4      	lsls	r4, r0, #3
 8003468:	ea4f 1907 	mov.w	r9, r7, lsl #4
 800346c:	9405      	str	r4, [sp, #20]
 800346e:	f109 0004 	add.w	r0, r9, #4
 8003472:	f108 0404 	add.w	r4, r8, #4
 8003476:	eb03 1147 	add.w	r1, r3, r7, lsl #5
 800347a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800347e:	441c      	add	r4, r3
 8003480:	4418      	add	r0, r3
 8003482:	017b      	lsls	r3, r7, #5
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	0133      	lsls	r3, r6, #4
 8003488:	eb01 1507 	add.w	r5, r1, r7, lsl #4
 800348c:	eba7 0287 	sub.w	r2, r7, r7, lsl #2
 8003490:	9303      	str	r3, [sp, #12]
 8003492:	00f3      	lsls	r3, r6, #3
 8003494:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800349c:	9b00      	ldr	r3, [sp, #0]
 800349e:	9709      	str	r7, [sp, #36]	@ 0x24
 80034a0:	eb01 0cc7 	add.w	ip, r1, r7, lsl #3
 80034a4:	f04f 0e00 	mov.w	lr, #0
 80034a8:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 80034ac:	ed95 aa00 	vldr	s20, [r5]
 80034b0:	ed92 8a00 	vldr	s16, [r2]
 80034b4:	edd7 aa00 	vldr	s21, [r7]
 80034b8:	ed10 2a01 	vldr	s4, [r0, #-4]
 80034bc:	ed91 5a00 	vldr	s10, [r1]
 80034c0:	ed9c 4a00 	vldr	s8, [ip]
 80034c4:	ed56 3a01 	vldr	s7, [r6, #-4]
 80034c8:	ed14 6a01 	vldr	s12, [r4, #-4]
 80034cc:	ee78 0a2a 	vadd.f32	s1, s16, s21
 80034d0:	ee36 1a04 	vadd.f32	s2, s12, s8
 80034d4:	ee32 3a0a 	vadd.f32	s6, s4, s20
 80034d8:	ee33 7a85 	vadd.f32	s14, s7, s10
 80034dc:	ee71 4a20 	vadd.f32	s9, s2, s1
 80034e0:	ee77 6a03 	vadd.f32	s13, s14, s6
 80034e4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80034e8:	ee76 7aa4 	vadd.f32	s15, s13, s9
 80034ec:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80034f0:	ed46 7a01 	vstr	s15, [r6, #-4]
 80034f4:	edc1 6a00 	vstr	s13, [r1]
 80034f8:	ed9c ba01 	vldr	s22, [ip, #4]
 80034fc:	edd4 ba00 	vldr	s23, [r4]
 8003500:	edd2 9a01 	vldr	s19, [r2, #4]
 8003504:	ed96 4a00 	vldr	s8, [r6]
 8003508:	edd1 5a01 	vldr	s11, [r1, #4]
 800350c:	edd7 1a01 	vldr	s3, [r7, #4]
 8003510:	edd0 4a00 	vldr	s9, [r0]
 8003514:	ed95 ca01 	vldr	s24, [r5, #4]
 8003518:	ee7b 6acb 	vsub.f32	s13, s23, s22
 800351c:	ee36 9a48 	vsub.f32	s18, s12, s16
 8003520:	ee76 2ae9 	vsub.f32	s5, s13, s19
 8003524:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003528:	ee34 5a65 	vsub.f32	s10, s8, s11
 800352c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8003530:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8003534:	eef0 8a63 	vmov.f32	s17, s7
 8003538:	eeb0 0a45 	vmov.f32	s0, s10
 800353c:	eee9 8a6c 	vfms.f32	s17, s18, s25
 8003540:	44de      	add	lr, fp
 8003542:	45f2      	cmp	sl, lr
 8003544:	eea2 0aec 	vfms.f32	s0, s5, s25
 8003548:	ee36 6a6a 	vsub.f32	s12, s12, s21
 800354c:	ee76 6ae1 	vsub.f32	s13, s13, s3
 8003550:	ee76 7a08 	vadd.f32	s15, s12, s16
 8003554:	ee74 5a25 	vadd.f32	s11, s8, s11
 8003558:	ee32 8a4a 	vsub.f32	s16, s4, s20
 800355c:	ee34 4acc 	vsub.f32	s8, s9, s24
 8003560:	ee76 6aa9 	vadd.f32	s13, s13, s19
 8003564:	ee74 aa8c 	vadd.f32	s21, s9, s24
 8003568:	ee3a 2a42 	vsub.f32	s4, s20, s4
 800356c:	ee7c 4a64 	vsub.f32	s9, s24, s9
 8003570:	ee79 1aa1 	vadd.f32	s3, s19, s3
 8003574:	ee7b ba8b 	vadd.f32	s23, s23, s22
 8003578:	eee9 3a2c 	vfma.f32	s7, s18, s25
 800357c:	eeb0 aa44 	vmov.f32	s20, s8
 8003580:	eeb0 9a48 	vmov.f32	s18, s16
 8003584:	eef0 9a40 	vmov.f32	s19, s0
 8003588:	eeb0 ba68 	vmov.f32	s22, s17
 800358c:	ee35 6aea 	vsub.f32	s12, s11, s21
 8003590:	eea7 9aac 	vfma.f32	s18, s15, s25
 8003594:	eea2 5aac 	vfma.f32	s10, s5, s25
 8003598:	eea6 aaac 	vfma.f32	s20, s13, s25
 800359c:	ee37 7a43 	vsub.f32	s14, s14, s6
 80035a0:	eee7 9aec 	vfms.f32	s19, s15, s25
 80035a4:	eea6 baec 	vfms.f32	s22, s13, s25
 80035a8:	eee6 4aac 	vfma.f32	s9, s13, s25
 80035ac:	eea7 2aac 	vfma.f32	s4, s15, s25
 80035b0:	ee7b 2aa1 	vadd.f32	s5, s23, s3
 80035b4:	ee77 6a61 	vsub.f32	s13, s14, s3
 80035b8:	ee75 7aaa 	vadd.f32	s15, s11, s21
 80035bc:	ee37 7a6b 	vsub.f32	s14, s14, s23
 80035c0:	ee36 3a41 	vsub.f32	s6, s12, s2
 80035c4:	ee36 6a60 	vsub.f32	s12, s12, s1
 80035c8:	ee77 aaa2 	vadd.f32	s21, s15, s5
 80035cc:	ee76 baab 	vadd.f32	s23, s13, s23
 80035d0:	ee77 7ae2 	vsub.f32	s15, s15, s5
 80035d4:	ee37 7a21 	vadd.f32	s14, s14, s3
 80035d8:	ee75 2a49 	vsub.f32	s5, s10, s18
 80035dc:	ee73 1a8a 	vadd.f32	s3, s7, s20
 80035e0:	ee33 3a20 	vadd.f32	s6, s6, s1
 80035e4:	ee36 6a01 	vadd.f32	s12, s12, s2
 80035e8:	ee73 3aca 	vsub.f32	s7, s7, s20
 80035ec:	ee34 4a0b 	vadd.f32	s8, s8, s22
 80035f0:	ee78 4aa4 	vadd.f32	s9, s17, s9
 80035f4:	ee39 5a05 	vadd.f32	s10, s18, s10
 80035f8:	ee70 5a02 	vadd.f32	s11, s0, s4
 80035fc:	ee78 6a29 	vadd.f32	s13, s16, s19
 8003600:	edc6 aa00 	vstr	s21, [r6]
 8003604:	edc1 7a01 	vstr	s15, [r1, #4]
 8003608:	441e      	add	r6, r3
 800360a:	ed40 ba01 	vstr	s23, [r0, #-4]
 800360e:	4419      	add	r1, r3
 8003610:	ed85 7a00 	vstr	s14, [r5]
 8003614:	ed80 3a00 	vstr	s6, [r0]
 8003618:	ed85 6a01 	vstr	s12, [r5, #4]
 800361c:	4418      	add	r0, r3
 800361e:	ed44 1a01 	vstr	s3, [r4, #-4]
 8003622:	441d      	add	r5, r3
 8003624:	edc7 3a00 	vstr	s7, [r7]
 8003628:	ed8c 4a00 	vstr	s8, [ip]
 800362c:	edc2 4a00 	vstr	s9, [r2]
 8003630:	edc4 2a00 	vstr	s5, [r4]
 8003634:	ed87 5a01 	vstr	s10, [r7, #4]
 8003638:	441c      	add	r4, r3
 800363a:	edcc 5a01 	vstr	s11, [ip, #4]
 800363e:	441f      	add	r7, r3
 8003640:	edc2 6a01 	vstr	s13, [r2, #4]
 8003644:	449c      	add	ip, r3
 8003646:	441a      	add	r2, r3
 8003648:	f63f af30 	bhi.w	80034ac <arm_radix8_butterfly_f32+0x80>
 800364c:	461f      	mov	r7, r3
 800364e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003650:	2b07      	cmp	r3, #7
 8003652:	f240 81a3 	bls.w	800399c <arm_radix8_butterfly_f32+0x570>
 8003656:	9d01      	ldr	r5, [sp, #4]
 8003658:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800365a:	9c02      	ldr	r4, [sp, #8]
 800365c:	9803      	ldr	r0, [sp, #12]
 800365e:	9904      	ldr	r1, [sp, #16]
 8003660:	9a05      	ldr	r2, [sp, #20]
 8003662:	3508      	adds	r5, #8
 8003664:	f108 0808 	add.w	r8, r8, #8
 8003668:	1973      	adds	r3, r6, r5
 800366a:	3408      	adds	r4, #8
 800366c:	9308      	str	r3, [sp, #32]
 800366e:	eb06 0308 	add.w	r3, r6, r8
 8003672:	3008      	adds	r0, #8
 8003674:	9307      	str	r3, [sp, #28]
 8003676:	1933      	adds	r3, r6, r4
 8003678:	3108      	adds	r1, #8
 800367a:	9306      	str	r3, [sp, #24]
 800367c:	1833      	adds	r3, r6, r0
 800367e:	3208      	adds	r2, #8
 8003680:	9305      	str	r3, [sp, #20]
 8003682:	1873      	adds	r3, r6, r1
 8003684:	f109 090c 	add.w	r9, r9, #12
 8003688:	9304      	str	r3, [sp, #16]
 800368a:	18b3      	adds	r3, r6, r2
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	eb06 0309 	add.w	r3, r6, r9
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	f106 030c 	add.w	r3, r6, #12
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	f04f 0901 	mov.w	r9, #1
 800369e:	f04f 0800 	mov.w	r8, #0
 80036a2:	463b      	mov	r3, r7
 80036a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036a6:	4490      	add	r8, r2
 80036a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80036aa:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036ae:	ed92 fa00 	vldr	s30, [r2]
 80036b2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036b6:	edd2 ea00 	vldr	s29, [r2]
 80036ba:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036be:	ed92 ea00 	vldr	s28, [r2]
 80036c2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036c6:	edd2 da00 	vldr	s27, [r2]
 80036ca:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036ce:	ed92 da00 	vldr	s26, [r2]
 80036d2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036d6:	eba8 0188 	sub.w	r1, r8, r8, lsl #2
 80036da:	ed92 ca00 	vldr	s24, [r2]
 80036de:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036e2:	edd2 ba00 	vldr	s23, [r2]
 80036e6:	ed92 ba01 	vldr	s22, [r2, #4]
 80036ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80036ee:	edd2 aa01 	vldr	s21, [r2, #4]
 80036f2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036f6:	ed92 aa01 	vldr	s20, [r2, #4]
 80036fa:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80036fe:	edd2 9a01 	vldr	s19, [r2, #4]
 8003702:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8003706:	ed92 9a01 	vldr	s18, [r2, #4]
 800370a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800370e:	edd2 8a01 	vldr	s17, [r2, #4]
 8003712:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8003716:	edd2 7a01 	vldr	s15, [r2, #4]
 800371a:	e9dd c701 	ldrd	ip, r7, [sp, #4]
 800371e:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8003722:	e9dd 4005 	ldrd	r4, r0, [sp, #20]
 8003726:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800372a:	edcd 7a00 	vstr	s15, [sp]
 800372e:	46ce      	mov	lr, r9
 8003730:	e002      	b.n	8003738 <arm_radix8_butterfly_f32+0x30c>
 8003732:	bf00      	nop
 8003734:	3f3504f3 	.word	0x3f3504f3
 8003738:	edd5 4a00 	vldr	s9, [r5]
 800373c:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8003740:	edd4 6a00 	vldr	s13, [r4]
 8003744:	ed96 3a00 	vldr	s6, [r6]
 8003748:	ed57 3a01 	vldr	s7, [r7, #-4]
 800374c:	edd1 2a00 	vldr	s5, [r1]
 8003750:	edd2 5a00 	vldr	s11, [r2]
 8003754:	edd0 7a00 	vldr	s15, [r0]
 8003758:	ed97 8a00 	vldr	s16, [r7]
 800375c:	ee74 0a83 	vadd.f32	s1, s9, s6
 8003760:	ee32 0aa7 	vadd.f32	s0, s5, s15
 8003764:	ee33 5aa5 	vadd.f32	s10, s7, s11
 8003768:	ee37 6a26 	vadd.f32	s12, s14, s13
 800376c:	ee30 4a20 	vadd.f32	s8, s0, s1
 8003770:	ee35 2a06 	vadd.f32	s4, s10, s12
 8003774:	ee72 7ae7 	vsub.f32	s15, s5, s15
 8003778:	ee72 2a04 	vadd.f32	s5, s4, s8
 800377c:	ee73 5ae5 	vsub.f32	s11, s7, s11
 8003780:	ed47 2a01 	vstr	s5, [r7, #-4]
 8003784:	edd1 fa01 	vldr	s31, [r1, #4]
 8003788:	edd0 3a01 	vldr	s7, [r0, #4]
 800378c:	ed92 1a01 	vldr	s2, [r2, #4]
 8003790:	ee32 2a44 	vsub.f32	s4, s4, s8
 8003794:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003798:	ed95 4a01 	vldr	s8, [r5, #4]
 800379c:	ee3f 5ae3 	vsub.f32	s10, s31, s7
 80037a0:	ee7f 3aa3 	vadd.f32	s7, s31, s7
 80037a4:	ee77 fae4 	vsub.f32	s31, s15, s9
 80037a8:	ee77 1a66 	vsub.f32	s3, s14, s13
 80037ac:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80037b0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80037b4:	ee3f 3a83 	vadd.f32	s6, s31, s6
 80037b8:	ed96 7a01 	vldr	s14, [r6, #4]
 80037bc:	ee75 fa44 	vsub.f32	s31, s10, s8
 80037c0:	ee78 2a41 	vsub.f32	s5, s16, s2
 80037c4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80037c8:	ee7f fa87 	vadd.f32	s31, s31, s14
 80037cc:	eef0 4a65 	vmov.f32	s9, s11
 80037d0:	eee3 4a6c 	vfms.f32	s9, s6, s25
 80037d4:	44de      	add	lr, fp
 80037d6:	45f2      	cmp	sl, lr
 80037d8:	eee3 5a2c 	vfma.f32	s11, s6, s25
 80037dc:	eeb0 3a62 	vmov.f32	s6, s5
 80037e0:	eeaf 3aec 	vfms.f32	s6, s31, s25
 80037e4:	eee7 6aac 	vfma.f32	s13, s15, s25
 80037e8:	ee35 5a47 	vsub.f32	s10, s10, s14
 80037ec:	ee73 6a26 	vadd.f32	s13, s6, s13
 80037f0:	eea7 3aec 	vfms.f32	s6, s15, s25
 80037f4:	ee35 5a04 	vadd.f32	s10, s10, s8
 80037f8:	ee38 1a01 	vadd.f32	s2, s16, s2
 80037fc:	ee34 4a07 	vadd.f32	s8, s8, s14
 8003800:	ed9c 8a00 	vldr	s16, [ip]
 8003804:	ed94 7a01 	vldr	s14, [r4, #4]
 8003808:	eeef 2aac 	vfma.f32	s5, s31, s25
 800380c:	eef0 fa43 	vmov.f32	s31, s6
 8003810:	eeb0 3a61 	vmov.f32	s6, s3
 8003814:	eea7 3aac 	vfma.f32	s6, s15, s25
 8003818:	ee71 7aaf 	vadd.f32	s15, s3, s31
 800381c:	ee78 1a07 	vadd.f32	s3, s16, s14
 8003820:	ee78 fa47 	vsub.f32	s31, s16, s14
 8003824:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003828:	eeb0 8a6f 	vmov.f32	s16, s31
 800382c:	eea5 7a2c 	vfma.f32	s14, s10, s25
 8003830:	eea5 8a2c 	vfma.f32	s16, s10, s25
 8003834:	ee37 7a24 	vadd.f32	s14, s14, s9
 8003838:	eee5 4a6c 	vfms.f32	s9, s10, s25
 800383c:	ee31 5a61 	vsub.f32	s10, s2, s3
 8003840:	ee71 1a21 	vadd.f32	s3, s2, s3
 8003844:	ee35 1a60 	vsub.f32	s2, s10, s1
 8003848:	ee74 faaf 	vadd.f32	s31, s9, s31
 800384c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003850:	ee73 4a84 	vadd.f32	s9, s7, s8
 8003854:	ee30 0a01 	vadd.f32	s0, s0, s2
 8003858:	ee36 1a44 	vsub.f32	s2, s12, s8
 800385c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8003860:	ee35 5a20 	vadd.f32	s10, s10, s1
 8003864:	ee34 4a06 	vadd.f32	s8, s8, s12
 8003868:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800386c:	ee22 6a49 	vnmul.f32	s12, s4, s18
 8003870:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8003874:	ee71 3a23 	vadd.f32	s7, s2, s7
 8003878:	eead 6aa1 	vfma.f32	s12, s27, s3
 800387c:	ee69 4a21 	vmul.f32	s9, s18, s3
 8003880:	ee6a 1a05 	vmul.f32	s3, s20, s10
 8003884:	eeed 4a82 	vfma.f32	s9, s27, s4
 8003888:	eeb0 2a61 	vmov.f32	s4, s3
 800388c:	eeae 2aa3 	vfma.f32	s4, s29, s7
 8003890:	ee63 3aca 	vnmul.f32	s7, s7, s20
 8003894:	edc7 0a00 	vstr	s1, [r7]
 8003898:	eeee 3a85 	vfma.f32	s7, s29, s10
 800389c:	441f      	add	r7, r3
 800389e:	ed9d 5a00 	vldr	s10, [sp]
 80038a2:	ed82 6a01 	vstr	s12, [r2, #4]
 80038a6:	ee65 1a00 	vmul.f32	s3, s10, s0
 80038aa:	ee24 5a45 	vnmul.f32	s10, s8, s10
 80038ae:	ee35 6a88 	vadd.f32	s12, s11, s16
 80038b2:	eeac 5a00 	vfma.f32	s10, s24, s0
 80038b6:	ee32 0ac3 	vsub.f32	s0, s5, s6
 80038ba:	ee33 3a22 	vadd.f32	s6, s6, s5
 80038be:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80038c2:	ee6a 0a80 	vmul.f32	s1, s21, s0
 80038c6:	ee2b 1a03 	vmul.f32	s2, s22, s6
 80038ca:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 80038ce:	edc2 4a00 	vstr	s9, [r2]
 80038d2:	eeef 0a06 	vfma.f32	s1, s30, s12
 80038d6:	441a      	add	r2, r3
 80038d8:	eeab 1aa5 	vfma.f32	s2, s23, s11
 80038dc:	ee65 4acb 	vnmul.f32	s9, s11, s22
 80038e0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80038e4:	ee67 5a69 	vnmul.f32	s11, s14, s19
 80038e8:	eeec 1a04 	vfma.f32	s3, s24, s8
 80038ec:	eeef 2a00 	vfma.f32	s5, s30, s0
 80038f0:	eeb0 4a45 	vmov.f32	s8, s10
 80038f4:	ee2f 0ae8 	vnmul.f32	s0, s31, s17
 80038f8:	ee28 5aa6 	vmul.f32	s10, s17, s13
 80038fc:	eeae 6a07 	vfma.f32	s12, s28, s14
 8003900:	eeb0 7a65 	vmov.f32	s14, s11
 8003904:	eeeb 4a83 	vfma.f32	s9, s23, s6
 8003908:	eead 5a2f 	vfma.f32	s10, s26, s31
 800390c:	eead 0a26 	vfma.f32	s0, s26, s13
 8003910:	eeae 7a27 	vfma.f32	s14, s28, s15
 8003914:	ed0c 2a01 	vstr	s4, [ip, #-4]
 8003918:	edcc 3a00 	vstr	s7, [ip]
 800391c:	edc4 1a00 	vstr	s3, [r4]
 8003920:	ed84 4a01 	vstr	s8, [r4, #4]
 8003924:	449c      	add	ip, r3
 8003926:	edc1 0a00 	vstr	s1, [r1]
 800392a:	edc1 2a01 	vstr	s5, [r1, #4]
 800392e:	441c      	add	r4, r3
 8003930:	ed86 1a00 	vstr	s2, [r6]
 8003934:	edc6 4a01 	vstr	s9, [r6, #4]
 8003938:	4419      	add	r1, r3
 800393a:	ed80 5a00 	vstr	s10, [r0]
 800393e:	ed80 0a01 	vstr	s0, [r0, #4]
 8003942:	441e      	add	r6, r3
 8003944:	ed85 6a00 	vstr	s12, [r5]
 8003948:	4418      	add	r0, r3
 800394a:	ed85 7a01 	vstr	s14, [r5, #4]
 800394e:	441d      	add	r5, r3
 8003950:	f63f aef2 	bhi.w	8003738 <arm_radix8_butterfly_f32+0x30c>
 8003954:	9a08      	ldr	r2, [sp, #32]
 8003956:	3208      	adds	r2, #8
 8003958:	9208      	str	r2, [sp, #32]
 800395a:	9a07      	ldr	r2, [sp, #28]
 800395c:	3208      	adds	r2, #8
 800395e:	9207      	str	r2, [sp, #28]
 8003960:	9a06      	ldr	r2, [sp, #24]
 8003962:	3208      	adds	r2, #8
 8003964:	9206      	str	r2, [sp, #24]
 8003966:	9a05      	ldr	r2, [sp, #20]
 8003968:	3208      	adds	r2, #8
 800396a:	9205      	str	r2, [sp, #20]
 800396c:	9a04      	ldr	r2, [sp, #16]
 800396e:	3208      	adds	r2, #8
 8003970:	9204      	str	r2, [sp, #16]
 8003972:	9a03      	ldr	r2, [sp, #12]
 8003974:	3208      	adds	r2, #8
 8003976:	9203      	str	r2, [sp, #12]
 8003978:	9a02      	ldr	r2, [sp, #8]
 800397a:	3208      	adds	r2, #8
 800397c:	9202      	str	r2, [sp, #8]
 800397e:	9a01      	ldr	r2, [sp, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	9201      	str	r2, [sp, #4]
 8003984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003986:	f109 0901 	add.w	r9, r9, #1
 800398a:	454a      	cmp	r2, r9
 800398c:	f47f ae8a 	bne.w	80036a4 <arm_radix8_butterfly_f32+0x278>
 8003990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	b29b      	uxth	r3, r3
 8003996:	930a      	str	r3, [sp, #40]	@ 0x28
 8003998:	4693      	mov	fp, r2
 800399a:	e556      	b.n	800344a <arm_radix8_butterfly_f32+0x1e>
 800399c:	b00f      	add	sp, #60	@ 0x3c
 800399e:	ecbd 8b10 	vpop	{d8-d15}
 80039a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a6:	bf00      	nop

080039a8 <aligned_alloc>:
 80039a8:	4b02      	ldr	r3, [pc, #8]	@ (80039b4 <aligned_alloc+0xc>)
 80039aa:	460a      	mov	r2, r1
 80039ac:	4601      	mov	r1, r0
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	f000 b8de 	b.w	8003b70 <_memalign_r>
 80039b4:	2000000c 	.word	0x2000000c

080039b8 <__assert_func>:
 80039b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039ba:	4614      	mov	r4, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <__assert_func+0x2c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4605      	mov	r5, r0
 80039c4:	68d8      	ldr	r0, [r3, #12]
 80039c6:	b954      	cbnz	r4, 80039de <__assert_func+0x26>
 80039c8:	4b07      	ldr	r3, [pc, #28]	@ (80039e8 <__assert_func+0x30>)
 80039ca:	461c      	mov	r4, r3
 80039cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80039d0:	9100      	str	r1, [sp, #0]
 80039d2:	462b      	mov	r3, r5
 80039d4:	4905      	ldr	r1, [pc, #20]	@ (80039ec <__assert_func+0x34>)
 80039d6:	f001 f829 	bl	8004a2c <fiprintf>
 80039da:	f001 fa55 	bl	8004e88 <abort>
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <__assert_func+0x38>)
 80039e0:	e7f4      	b.n	80039cc <__assert_func+0x14>
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	080266cf 	.word	0x080266cf
 80039ec:	080266a1 	.word	0x080266a1
 80039f0:	08026694 	.word	0x08026694

080039f4 <malloc>:
 80039f4:	4b02      	ldr	r3, [pc, #8]	@ (8003a00 <malloc+0xc>)
 80039f6:	4601      	mov	r1, r0
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f000 b82d 	b.w	8003a58 <_malloc_r>
 80039fe:	bf00      	nop
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <free>:
 8003a04:	4b02      	ldr	r3, [pc, #8]	@ (8003a10 <free+0xc>)
 8003a06:	4601      	mov	r1, r0
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	f002 b891 	b.w	8005b30 <_free_r>
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <sbrk_aligned>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4e0f      	ldr	r6, [pc, #60]	@ (8003a54 <sbrk_aligned+0x40>)
 8003a18:	460c      	mov	r4, r1
 8003a1a:	6831      	ldr	r1, [r6, #0]
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	b911      	cbnz	r1, 8003a26 <sbrk_aligned+0x12>
 8003a20:	f001 f9dc 	bl	8004ddc <_sbrk_r>
 8003a24:	6030      	str	r0, [r6, #0]
 8003a26:	4621      	mov	r1, r4
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f001 f9d7 	bl	8004ddc <_sbrk_r>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	d103      	bne.n	8003a3a <sbrk_aligned+0x26>
 8003a32:	f04f 34ff 	mov.w	r4, #4294967295
 8003a36:	4620      	mov	r0, r4
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	1cc4      	adds	r4, r0, #3
 8003a3c:	f024 0403 	bic.w	r4, r4, #3
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d0f8      	beq.n	8003a36 <sbrk_aligned+0x22>
 8003a44:	1a21      	subs	r1, r4, r0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f001 f9c8 	bl	8004ddc <_sbrk_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d1f2      	bne.n	8003a36 <sbrk_aligned+0x22>
 8003a50:	e7ef      	b.n	8003a32 <sbrk_aligned+0x1e>
 8003a52:	bf00      	nop
 8003a54:	200001ec 	.word	0x200001ec

08003a58 <_malloc_r>:
 8003a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a5c:	1ccd      	adds	r5, r1, #3
 8003a5e:	f025 0503 	bic.w	r5, r5, #3
 8003a62:	3508      	adds	r5, #8
 8003a64:	2d0c      	cmp	r5, #12
 8003a66:	bf38      	it	cc
 8003a68:	250c      	movcc	r5, #12
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	db01      	blt.n	8003a74 <_malloc_r+0x1c>
 8003a70:	42a9      	cmp	r1, r5
 8003a72:	d904      	bls.n	8003a7e <_malloc_r+0x26>
 8003a74:	230c      	movs	r3, #12
 8003a76:	6033      	str	r3, [r6, #0]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b54 <_malloc_r+0xfc>
 8003a82:	f000 f869 	bl	8003b58 <__malloc_lock>
 8003a86:	f8d8 3000 	ldr.w	r3, [r8]
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	bb44      	cbnz	r4, 8003ae0 <_malloc_r+0x88>
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	f7ff ffbf 	bl	8003a14 <sbrk_aligned>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	4604      	mov	r4, r0
 8003a9a:	d158      	bne.n	8003b4e <_malloc_r+0xf6>
 8003a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003aa0:	4627      	mov	r7, r4
 8003aa2:	2f00      	cmp	r7, #0
 8003aa4:	d143      	bne.n	8003b2e <_malloc_r+0xd6>
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	d04b      	beq.n	8003b42 <_malloc_r+0xea>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	4639      	mov	r1, r7
 8003aae:	4630      	mov	r0, r6
 8003ab0:	eb04 0903 	add.w	r9, r4, r3
 8003ab4:	f001 f992 	bl	8004ddc <_sbrk_r>
 8003ab8:	4581      	cmp	r9, r0
 8003aba:	d142      	bne.n	8003b42 <_malloc_r+0xea>
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	1a6d      	subs	r5, r5, r1
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7ff ffa6 	bl	8003a14 <sbrk_aligned>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d03a      	beq.n	8003b42 <_malloc_r+0xea>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	442b      	add	r3, r5
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	bb62      	cbnz	r2, 8003b34 <_malloc_r+0xdc>
 8003ada:	f8c8 7000 	str.w	r7, [r8]
 8003ade:	e00f      	b.n	8003b00 <_malloc_r+0xa8>
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	1b52      	subs	r2, r2, r5
 8003ae4:	d420      	bmi.n	8003b28 <_malloc_r+0xd0>
 8003ae6:	2a0b      	cmp	r2, #11
 8003ae8:	d917      	bls.n	8003b1a <_malloc_r+0xc2>
 8003aea:	1961      	adds	r1, r4, r5
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	6025      	str	r5, [r4, #0]
 8003af0:	bf18      	it	ne
 8003af2:	6059      	strne	r1, [r3, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	bf08      	it	eq
 8003af8:	f8c8 1000 	streq.w	r1, [r8]
 8003afc:	5162      	str	r2, [r4, r5]
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f82f 	bl	8003b64 <__malloc_unlock>
 8003b06:	f104 000b 	add.w	r0, r4, #11
 8003b0a:	1d23      	adds	r3, r4, #4
 8003b0c:	f020 0007 	bic.w	r0, r0, #7
 8003b10:	1ac2      	subs	r2, r0, r3
 8003b12:	bf1c      	itt	ne
 8003b14:	1a1b      	subne	r3, r3, r0
 8003b16:	50a3      	strne	r3, [r4, r2]
 8003b18:	e7af      	b.n	8003a7a <_malloc_r+0x22>
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	bf0c      	ite	eq
 8003b20:	f8c8 2000 	streq.w	r2, [r8]
 8003b24:	605a      	strne	r2, [r3, #4]
 8003b26:	e7eb      	b.n	8003b00 <_malloc_r+0xa8>
 8003b28:	4623      	mov	r3, r4
 8003b2a:	6864      	ldr	r4, [r4, #4]
 8003b2c:	e7ae      	b.n	8003a8c <_malloc_r+0x34>
 8003b2e:	463c      	mov	r4, r7
 8003b30:	687f      	ldr	r7, [r7, #4]
 8003b32:	e7b6      	b.n	8003aa2 <_malloc_r+0x4a>
 8003b34:	461a      	mov	r2, r3
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d1fb      	bne.n	8003b34 <_malloc_r+0xdc>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6053      	str	r3, [r2, #4]
 8003b40:	e7de      	b.n	8003b00 <_malloc_r+0xa8>
 8003b42:	230c      	movs	r3, #12
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f80c 	bl	8003b64 <__malloc_unlock>
 8003b4c:	e794      	b.n	8003a78 <_malloc_r+0x20>
 8003b4e:	6005      	str	r5, [r0, #0]
 8003b50:	e7d6      	b.n	8003b00 <_malloc_r+0xa8>
 8003b52:	bf00      	nop
 8003b54:	200001f0 	.word	0x200001f0

08003b58 <__malloc_lock>:
 8003b58:	4801      	ldr	r0, [pc, #4]	@ (8003b60 <__malloc_lock+0x8>)
 8003b5a:	f001 b98c 	b.w	8004e76 <__retarget_lock_acquire_recursive>
 8003b5e:	bf00      	nop
 8003b60:	20000334 	.word	0x20000334

08003b64 <__malloc_unlock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	@ (8003b6c <__malloc_unlock+0x8>)
 8003b66:	f001 b987 	b.w	8004e78 <__retarget_lock_release_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000334 	.word	0x20000334

08003b70 <_memalign_r>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	1e4b      	subs	r3, r1, #1
 8003b74:	420b      	tst	r3, r1
 8003b76:	4606      	mov	r6, r0
 8003b78:	460d      	mov	r5, r1
 8003b7a:	d106      	bne.n	8003b8a <_memalign_r+0x1a>
 8003b7c:	2908      	cmp	r1, #8
 8003b7e:	bf38      	it	cc
 8003b80:	2508      	movcc	r5, #8
 8003b82:	1d53      	adds	r3, r2, #5
 8003b84:	d904      	bls.n	8003b90 <_memalign_r+0x20>
 8003b86:	230c      	movs	r3, #12
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b90:	2a04      	cmp	r2, #4
 8003b92:	bf38      	it	cc
 8003b94:	2204      	movcc	r2, #4
 8003b96:	1cd4      	adds	r4, r2, #3
 8003b98:	f024 0403 	bic.w	r4, r4, #3
 8003b9c:	f1c5 0307 	rsb	r3, r5, #7
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	d3f0      	bcc.n	8003b86 <_memalign_r+0x16>
 8003ba4:	f1a5 0108 	sub.w	r1, r5, #8
 8003ba8:	4421      	add	r1, r4
 8003baa:	f7ff ff55 	bl	8003a58 <_malloc_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0eb      	beq.n	8003b8a <_memalign_r+0x1a>
 8003bb2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8003bb6:	1f03      	subs	r3, r0, #4
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	bfb8      	it	lt
 8003bbc:	189b      	addlt	r3, r3, r2
 8003bbe:	1cea      	adds	r2, r5, #3
 8003bc0:	441a      	add	r2, r3
 8003bc2:	426d      	negs	r5, r5
 8003bc4:	4015      	ands	r5, r2
 8003bc6:	1d19      	adds	r1, r3, #4
 8003bc8:	1a6a      	subs	r2, r5, r1
 8003bca:	d00b      	beq.n	8003be4 <_memalign_r+0x74>
 8003bcc:	2a0b      	cmp	r2, #11
 8003bce:	eb03 0702 	add.w	r7, r3, r2
 8003bd2:	d918      	bls.n	8003c06 <_memalign_r+0x96>
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	1a80      	subs	r0, r0, r2
 8003bd8:	5098      	str	r0, [r3, r2]
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f001 ffa7 	bl	8005b30 <_free_r>
 8003be2:	463b      	mov	r3, r7
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	f104 010c 	add.w	r1, r4, #12
 8003bea:	1898      	adds	r0, r3, r2
 8003bec:	4429      	add	r1, r5
 8003bee:	4288      	cmp	r0, r1
 8003bf0:	d9cc      	bls.n	8003b8c <_memalign_r+0x1c>
 8003bf2:	1929      	adds	r1, r5, r4
 8003bf4:	1ac8      	subs	r0, r1, r3
 8003bf6:	1a12      	subs	r2, r2, r0
 8003bf8:	6018      	str	r0, [r3, #0]
 8003bfa:	3104      	adds	r1, #4
 8003bfc:	512a      	str	r2, [r5, r4]
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f001 ff96 	bl	8005b30 <_free_r>
 8003c04:	e7c2      	b.n	8003b8c <_memalign_r+0x1c>
 8003c06:	4251      	negs	r1, r2
 8003c08:	5099      	str	r1, [r3, r2]
 8003c0a:	e7eb      	b.n	8003be4 <_memalign_r+0x74>

08003c0c <__cvt>:
 8003c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	ec57 6b10 	vmov	r6, r7, d0
 8003c14:	2f00      	cmp	r7, #0
 8003c16:	460c      	mov	r4, r1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	bfbb      	ittet	lt
 8003c1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c22:	461f      	movlt	r7, r3
 8003c24:	2300      	movge	r3, #0
 8003c26:	232d      	movlt	r3, #45	@ 0x2d
 8003c28:	700b      	strb	r3, [r1, #0]
 8003c2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c30:	4691      	mov	r9, r2
 8003c32:	f023 0820 	bic.w	r8, r3, #32
 8003c36:	bfbc      	itt	lt
 8003c38:	4632      	movlt	r2, r6
 8003c3a:	4616      	movlt	r6, r2
 8003c3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c40:	d005      	beq.n	8003c4e <__cvt+0x42>
 8003c42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c46:	d100      	bne.n	8003c4a <__cvt+0x3e>
 8003c48:	3401      	adds	r4, #1
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	e000      	b.n	8003c50 <__cvt+0x44>
 8003c4e:	2103      	movs	r1, #3
 8003c50:	ab03      	add	r3, sp, #12
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	ab02      	add	r3, sp, #8
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	ec47 6b10 	vmov	d0, r6, r7
 8003c5c:	4653      	mov	r3, sl
 8003c5e:	4622      	mov	r2, r4
 8003c60:	f001 f9a2 	bl	8004fa8 <_dtoa_r>
 8003c64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c68:	4605      	mov	r5, r0
 8003c6a:	d119      	bne.n	8003ca0 <__cvt+0x94>
 8003c6c:	f019 0f01 	tst.w	r9, #1
 8003c70:	d00e      	beq.n	8003c90 <__cvt+0x84>
 8003c72:	eb00 0904 	add.w	r9, r0, r4
 8003c76:	2200      	movs	r2, #0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	4639      	mov	r1, r7
 8003c7e:	f7fc ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c82:	b108      	cbz	r0, 8003c88 <__cvt+0x7c>
 8003c84:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c88:	2230      	movs	r2, #48	@ 0x30
 8003c8a:	9b03      	ldr	r3, [sp, #12]
 8003c8c:	454b      	cmp	r3, r9
 8003c8e:	d31e      	bcc.n	8003cce <__cvt+0xc2>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c94:	1b5b      	subs	r3, r3, r5
 8003c96:	4628      	mov	r0, r5
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	b004      	add	sp, #16
 8003c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ca4:	eb00 0904 	add.w	r9, r0, r4
 8003ca8:	d1e5      	bne.n	8003c76 <__cvt+0x6a>
 8003caa:	7803      	ldrb	r3, [r0, #0]
 8003cac:	2b30      	cmp	r3, #48	@ 0x30
 8003cae:	d10a      	bne.n	8003cc6 <__cvt+0xba>
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f7fc ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cbc:	b918      	cbnz	r0, 8003cc6 <__cvt+0xba>
 8003cbe:	f1c4 0401 	rsb	r4, r4, #1
 8003cc2:	f8ca 4000 	str.w	r4, [sl]
 8003cc6:	f8da 3000 	ldr.w	r3, [sl]
 8003cca:	4499      	add	r9, r3
 8003ccc:	e7d3      	b.n	8003c76 <__cvt+0x6a>
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	9103      	str	r1, [sp, #12]
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e7d9      	b.n	8003c8a <__cvt+0x7e>

08003cd6 <__exponent>:
 8003cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	bfba      	itte	lt
 8003cdc:	4249      	neglt	r1, r1
 8003cde:	232d      	movlt	r3, #45	@ 0x2d
 8003ce0:	232b      	movge	r3, #43	@ 0x2b
 8003ce2:	2909      	cmp	r1, #9
 8003ce4:	7002      	strb	r2, [r0, #0]
 8003ce6:	7043      	strb	r3, [r0, #1]
 8003ce8:	dd29      	ble.n	8003d3e <__exponent+0x68>
 8003cea:	f10d 0307 	add.w	r3, sp, #7
 8003cee:	461d      	mov	r5, r3
 8003cf0:	270a      	movs	r7, #10
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cf8:	fb07 1416 	mls	r4, r7, r6, r1
 8003cfc:	3430      	adds	r4, #48	@ 0x30
 8003cfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d02:	460c      	mov	r4, r1
 8003d04:	2c63      	cmp	r4, #99	@ 0x63
 8003d06:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	dcf1      	bgt.n	8003cf2 <__exponent+0x1c>
 8003d0e:	3130      	adds	r1, #48	@ 0x30
 8003d10:	1e94      	subs	r4, r2, #2
 8003d12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d16:	1c41      	adds	r1, r0, #1
 8003d18:	4623      	mov	r3, r4
 8003d1a:	42ab      	cmp	r3, r5
 8003d1c:	d30a      	bcc.n	8003d34 <__exponent+0x5e>
 8003d1e:	f10d 0309 	add.w	r3, sp, #9
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	42ac      	cmp	r4, r5
 8003d26:	bf88      	it	hi
 8003d28:	2300      	movhi	r3, #0
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	4403      	add	r3, r0
 8003d2e:	1a18      	subs	r0, r3, r0
 8003d30:	b003      	add	sp, #12
 8003d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d3c:	e7ed      	b.n	8003d1a <__exponent+0x44>
 8003d3e:	2330      	movs	r3, #48	@ 0x30
 8003d40:	3130      	adds	r1, #48	@ 0x30
 8003d42:	7083      	strb	r3, [r0, #2]
 8003d44:	70c1      	strb	r1, [r0, #3]
 8003d46:	1d03      	adds	r3, r0, #4
 8003d48:	e7f1      	b.n	8003d2e <__exponent+0x58>
	...

08003d4c <_printf_float>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b08d      	sub	sp, #52	@ 0x34
 8003d52:	460c      	mov	r4, r1
 8003d54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d58:	4616      	mov	r6, r2
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	f001 f805 	bl	8004d6c <_localeconv_r>
 8003d62:	6803      	ldr	r3, [r0, #0]
 8003d64:	9304      	str	r3, [sp, #16]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fa82 	bl	8000270 <strlen>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d70:	f8d8 3000 	ldr.w	r3, [r8]
 8003d74:	9005      	str	r0, [sp, #20]
 8003d76:	3307      	adds	r3, #7
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	f103 0208 	add.w	r2, r3, #8
 8003d80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d84:	f8d4 b000 	ldr.w	fp, [r4]
 8003d88:	f8c8 2000 	str.w	r2, [r8]
 8003d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d94:	9307      	str	r3, [sp, #28]
 8003d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003da2:	4b9c      	ldr	r3, [pc, #624]	@ (8004014 <_printf_float+0x2c8>)
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
 8003da8:	f7fc fec0 	bl	8000b2c <__aeabi_dcmpun>
 8003dac:	bb70      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db2:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <_printf_float+0x2c8>)
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	f7fc fe9a 	bl	8000af0 <__aeabi_dcmple>
 8003dbc:	bb30      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fe89 	bl	8000adc <__aeabi_dcmplt>
 8003dca:	b110      	cbz	r0, 8003dd2 <_printf_float+0x86>
 8003dcc:	232d      	movs	r3, #45	@ 0x2d
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd2:	4a91      	ldr	r2, [pc, #580]	@ (8004018 <_printf_float+0x2cc>)
 8003dd4:	4b91      	ldr	r3, [pc, #580]	@ (800401c <_printf_float+0x2d0>)
 8003dd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dda:	bf94      	ite	ls
 8003ddc:	4690      	movls	r8, r2
 8003dde:	4698      	movhi	r8, r3
 8003de0:	2303      	movs	r3, #3
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	f02b 0304 	bic.w	r3, fp, #4
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	f04f 0900 	mov.w	r9, #0
 8003dee:	9700      	str	r7, [sp, #0]
 8003df0:	4633      	mov	r3, r6
 8003df2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f9d2 	bl	80041a0 <_printf_common>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f040 808d 	bne.w	8003f1c <_printf_float+0x1d0>
 8003e02:	f04f 30ff 	mov.w	r0, #4294967295
 8003e06:	b00d      	add	sp, #52	@ 0x34
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	4649      	mov	r1, r9
 8003e14:	f7fc fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8003e18:	b140      	cbz	r0, 8003e2c <_printf_float+0xe0>
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfbc      	itt	lt
 8003e20:	232d      	movlt	r3, #45	@ 0x2d
 8003e22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e26:	4a7e      	ldr	r2, [pc, #504]	@ (8004020 <_printf_float+0x2d4>)
 8003e28:	4b7e      	ldr	r3, [pc, #504]	@ (8004024 <_printf_float+0x2d8>)
 8003e2a:	e7d4      	b.n	8003dd6 <_printf_float+0x8a>
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e32:	9206      	str	r2, [sp, #24]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	d13b      	bne.n	8003eb0 <_printf_float+0x164>
 8003e38:	2306      	movs	r3, #6
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e40:	2300      	movs	r3, #0
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e4c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	6861      	ldr	r1, [r4, #4]
 8003e52:	ec49 8b10 	vmov	d0, r8, r9
 8003e56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f7ff fed6 	bl	8003c0c <__cvt>
 8003e60:	9b06      	ldr	r3, [sp, #24]
 8003e62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e64:	2b47      	cmp	r3, #71	@ 0x47
 8003e66:	4680      	mov	r8, r0
 8003e68:	d129      	bne.n	8003ebe <_printf_float+0x172>
 8003e6a:	1cc8      	adds	r0, r1, #3
 8003e6c:	db02      	blt.n	8003e74 <_printf_float+0x128>
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	4299      	cmp	r1, r3
 8003e72:	dd41      	ble.n	8003ef8 <_printf_float+0x1ac>
 8003e74:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e78:	fa5f fa8a 	uxtb.w	sl, sl
 8003e7c:	3901      	subs	r1, #1
 8003e7e:	4652      	mov	r2, sl
 8003e80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e84:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e86:	f7ff ff26 	bl	8003cd6 <__exponent>
 8003e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e8c:	1813      	adds	r3, r2, r0
 8003e8e:	2a01      	cmp	r2, #1
 8003e90:	4681      	mov	r9, r0
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	dc02      	bgt.n	8003e9c <_printf_float+0x150>
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	07d2      	lsls	r2, r2, #31
 8003e9a:	d501      	bpl.n	8003ea0 <_printf_float+0x154>
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0a2      	beq.n	8003dee <_printf_float+0xa2>
 8003ea8:	232d      	movs	r3, #45	@ 0x2d
 8003eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eae:	e79e      	b.n	8003dee <_printf_float+0xa2>
 8003eb0:	9a06      	ldr	r2, [sp, #24]
 8003eb2:	2a47      	cmp	r2, #71	@ 0x47
 8003eb4:	d1c2      	bne.n	8003e3c <_printf_float+0xf0>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1c0      	bne.n	8003e3c <_printf_float+0xf0>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e7bd      	b.n	8003e3a <_printf_float+0xee>
 8003ebe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ec2:	d9db      	bls.n	8003e7c <_printf_float+0x130>
 8003ec4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ec8:	d118      	bne.n	8003efc <_printf_float+0x1b0>
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	dd0b      	ble.n	8003ee8 <_printf_float+0x19c>
 8003ed0:	6121      	str	r1, [r4, #16]
 8003ed2:	b913      	cbnz	r3, 8003eda <_printf_float+0x18e>
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	07d0      	lsls	r0, r2, #31
 8003ed8:	d502      	bpl.n	8003ee0 <_printf_float+0x194>
 8003eda:	3301      	adds	r3, #1
 8003edc:	440b      	add	r3, r1
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ee2:	f04f 0900 	mov.w	r9, #0
 8003ee6:	e7db      	b.n	8003ea0 <_printf_float+0x154>
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_printf_float+0x1a4>
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	07d2      	lsls	r2, r2, #31
 8003eee:	d501      	bpl.n	8003ef4 <_printf_float+0x1a8>
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	e7f4      	b.n	8003ede <_printf_float+0x192>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e7f2      	b.n	8003ede <_printf_float+0x192>
 8003ef8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003efe:	4299      	cmp	r1, r3
 8003f00:	db05      	blt.n	8003f0e <_printf_float+0x1c2>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	6121      	str	r1, [r4, #16]
 8003f06:	07d8      	lsls	r0, r3, #31
 8003f08:	d5ea      	bpl.n	8003ee0 <_printf_float+0x194>
 8003f0a:	1c4b      	adds	r3, r1, #1
 8003f0c:	e7e7      	b.n	8003ede <_printf_float+0x192>
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	bfd4      	ite	le
 8003f12:	f1c1 0202 	rsble	r2, r1, #2
 8003f16:	2201      	movgt	r2, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	e7e0      	b.n	8003ede <_printf_float+0x192>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	055a      	lsls	r2, r3, #21
 8003f20:	d407      	bmi.n	8003f32 <_printf_float+0x1e6>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	4642      	mov	r2, r8
 8003f26:	4631      	mov	r1, r6
 8003f28:	4628      	mov	r0, r5
 8003f2a:	47b8      	blx	r7
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d12b      	bne.n	8003f88 <_printf_float+0x23c>
 8003f30:	e767      	b.n	8003e02 <_printf_float+0xb6>
 8003f32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f36:	f240 80dd 	bls.w	80040f4 <_printf_float+0x3a8>
 8003f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2300      	movs	r3, #0
 8003f42:	f7fc fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d033      	beq.n	8003fb2 <_printf_float+0x266>
 8003f4a:	4a37      	ldr	r2, [pc, #220]	@ (8004028 <_printf_float+0x2dc>)
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	f43f af54 	beq.w	8003e02 <_printf_float+0xb6>
 8003f5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f5e:	4543      	cmp	r3, r8
 8003f60:	db02      	blt.n	8003f68 <_printf_float+0x21c>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	07d8      	lsls	r0, r3, #31
 8003f66:	d50f      	bpl.n	8003f88 <_printf_float+0x23c>
 8003f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	4628      	mov	r0, r5
 8003f70:	47b8      	blx	r7
 8003f72:	3001      	adds	r0, #1
 8003f74:	f43f af45 	beq.w	8003e02 <_printf_float+0xb6>
 8003f78:	f04f 0900 	mov.w	r9, #0
 8003f7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f80:	f104 0a1a 	add.w	sl, r4, #26
 8003f84:	45c8      	cmp	r8, r9
 8003f86:	dc09      	bgt.n	8003f9c <_printf_float+0x250>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	079b      	lsls	r3, r3, #30
 8003f8c:	f100 8103 	bmi.w	8004196 <_printf_float+0x44a>
 8003f90:	68e0      	ldr	r0, [r4, #12]
 8003f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f94:	4298      	cmp	r0, r3
 8003f96:	bfb8      	it	lt
 8003f98:	4618      	movlt	r0, r3
 8003f9a:	e734      	b.n	8003e06 <_printf_float+0xba>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	47b8      	blx	r7
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	f43f af2b 	beq.w	8003e02 <_printf_float+0xb6>
 8003fac:	f109 0901 	add.w	r9, r9, #1
 8003fb0:	e7e8      	b.n	8003f84 <_printf_float+0x238>
 8003fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dc39      	bgt.n	800402c <_printf_float+0x2e0>
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <_printf_float+0x2dc>)
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	47b8      	blx	r7
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f43f af1d 	beq.w	8003e02 <_printf_float+0xb6>
 8003fc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003fcc:	ea59 0303 	orrs.w	r3, r9, r3
 8003fd0:	d102      	bne.n	8003fd8 <_printf_float+0x28c>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	07d9      	lsls	r1, r3, #31
 8003fd6:	d5d7      	bpl.n	8003f88 <_printf_float+0x23c>
 8003fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4628      	mov	r0, r5
 8003fe0:	47b8      	blx	r7
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f43f af0d 	beq.w	8003e02 <_printf_float+0xb6>
 8003fe8:	f04f 0a00 	mov.w	sl, #0
 8003fec:	f104 0b1a 	add.w	fp, r4, #26
 8003ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ff2:	425b      	negs	r3, r3
 8003ff4:	4553      	cmp	r3, sl
 8003ff6:	dc01      	bgt.n	8003ffc <_printf_float+0x2b0>
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	e793      	b.n	8003f24 <_printf_float+0x1d8>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	465a      	mov	r2, fp
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	f43f aefb 	beq.w	8003e02 <_printf_float+0xb6>
 800400c:	f10a 0a01 	add.w	sl, sl, #1
 8004010:	e7ee      	b.n	8003ff0 <_printf_float+0x2a4>
 8004012:	bf00      	nop
 8004014:	7fefffff 	.word	0x7fefffff
 8004018:	080266d0 	.word	0x080266d0
 800401c:	080266d4 	.word	0x080266d4
 8004020:	080266d8 	.word	0x080266d8
 8004024:	080266dc 	.word	0x080266dc
 8004028:	080266e0 	.word	0x080266e0
 800402c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800402e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004032:	4553      	cmp	r3, sl
 8004034:	bfa8      	it	ge
 8004036:	4653      	movge	r3, sl
 8004038:	2b00      	cmp	r3, #0
 800403a:	4699      	mov	r9, r3
 800403c:	dc36      	bgt.n	80040ac <_printf_float+0x360>
 800403e:	f04f 0b00 	mov.w	fp, #0
 8004042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004046:	f104 021a 	add.w	r2, r4, #26
 800404a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800404c:	9306      	str	r3, [sp, #24]
 800404e:	eba3 0309 	sub.w	r3, r3, r9
 8004052:	455b      	cmp	r3, fp
 8004054:	dc31      	bgt.n	80040ba <_printf_float+0x36e>
 8004056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004058:	459a      	cmp	sl, r3
 800405a:	dc3a      	bgt.n	80040d2 <_printf_float+0x386>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	07da      	lsls	r2, r3, #31
 8004060:	d437      	bmi.n	80040d2 <_printf_float+0x386>
 8004062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004064:	ebaa 0903 	sub.w	r9, sl, r3
 8004068:	9b06      	ldr	r3, [sp, #24]
 800406a:	ebaa 0303 	sub.w	r3, sl, r3
 800406e:	4599      	cmp	r9, r3
 8004070:	bfa8      	it	ge
 8004072:	4699      	movge	r9, r3
 8004074:	f1b9 0f00 	cmp.w	r9, #0
 8004078:	dc33      	bgt.n	80040e2 <_printf_float+0x396>
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004082:	f104 0b1a 	add.w	fp, r4, #26
 8004086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004088:	ebaa 0303 	sub.w	r3, sl, r3
 800408c:	eba3 0309 	sub.w	r3, r3, r9
 8004090:	4543      	cmp	r3, r8
 8004092:	f77f af79 	ble.w	8003f88 <_printf_float+0x23c>
 8004096:	2301      	movs	r3, #1
 8004098:	465a      	mov	r2, fp
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	f43f aeae 	beq.w	8003e02 <_printf_float+0xb6>
 80040a6:	f108 0801 	add.w	r8, r8, #1
 80040aa:	e7ec      	b.n	8004086 <_printf_float+0x33a>
 80040ac:	4642      	mov	r2, r8
 80040ae:	4631      	mov	r1, r6
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b8      	blx	r7
 80040b4:	3001      	adds	r0, #1
 80040b6:	d1c2      	bne.n	800403e <_printf_float+0x2f2>
 80040b8:	e6a3      	b.n	8003e02 <_printf_float+0xb6>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4631      	mov	r1, r6
 80040be:	4628      	mov	r0, r5
 80040c0:	9206      	str	r2, [sp, #24]
 80040c2:	47b8      	blx	r7
 80040c4:	3001      	adds	r0, #1
 80040c6:	f43f ae9c 	beq.w	8003e02 <_printf_float+0xb6>
 80040ca:	9a06      	ldr	r2, [sp, #24]
 80040cc:	f10b 0b01 	add.w	fp, fp, #1
 80040d0:	e7bb      	b.n	800404a <_printf_float+0x2fe>
 80040d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	d1c0      	bne.n	8004062 <_printf_float+0x316>
 80040e0:	e68f      	b.n	8003e02 <_printf_float+0xb6>
 80040e2:	9a06      	ldr	r2, [sp, #24]
 80040e4:	464b      	mov	r3, r9
 80040e6:	4442      	add	r2, r8
 80040e8:	4631      	mov	r1, r6
 80040ea:	4628      	mov	r0, r5
 80040ec:	47b8      	blx	r7
 80040ee:	3001      	adds	r0, #1
 80040f0:	d1c3      	bne.n	800407a <_printf_float+0x32e>
 80040f2:	e686      	b.n	8003e02 <_printf_float+0xb6>
 80040f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80040f8:	f1ba 0f01 	cmp.w	sl, #1
 80040fc:	dc01      	bgt.n	8004102 <_printf_float+0x3b6>
 80040fe:	07db      	lsls	r3, r3, #31
 8004100:	d536      	bpl.n	8004170 <_printf_float+0x424>
 8004102:	2301      	movs	r3, #1
 8004104:	4642      	mov	r2, r8
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f ae78 	beq.w	8003e02 <_printf_float+0xb6>
 8004112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	47b8      	blx	r7
 800411c:	3001      	adds	r0, #1
 800411e:	f43f ae70 	beq.w	8003e02 <_printf_float+0xb6>
 8004122:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004126:	2200      	movs	r2, #0
 8004128:	2300      	movs	r3, #0
 800412a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800412e:	f7fc fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004132:	b9c0      	cbnz	r0, 8004166 <_printf_float+0x41a>
 8004134:	4653      	mov	r3, sl
 8004136:	f108 0201 	add.w	r2, r8, #1
 800413a:	4631      	mov	r1, r6
 800413c:	4628      	mov	r0, r5
 800413e:	47b8      	blx	r7
 8004140:	3001      	adds	r0, #1
 8004142:	d10c      	bne.n	800415e <_printf_float+0x412>
 8004144:	e65d      	b.n	8003e02 <_printf_float+0xb6>
 8004146:	2301      	movs	r3, #1
 8004148:	465a      	mov	r2, fp
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	f43f ae56 	beq.w	8003e02 <_printf_float+0xb6>
 8004156:	f108 0801 	add.w	r8, r8, #1
 800415a:	45d0      	cmp	r8, sl
 800415c:	dbf3      	blt.n	8004146 <_printf_float+0x3fa>
 800415e:	464b      	mov	r3, r9
 8004160:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004164:	e6df      	b.n	8003f26 <_printf_float+0x1da>
 8004166:	f04f 0800 	mov.w	r8, #0
 800416a:	f104 0b1a 	add.w	fp, r4, #26
 800416e:	e7f4      	b.n	800415a <_printf_float+0x40e>
 8004170:	2301      	movs	r3, #1
 8004172:	4642      	mov	r2, r8
 8004174:	e7e1      	b.n	800413a <_printf_float+0x3ee>
 8004176:	2301      	movs	r3, #1
 8004178:	464a      	mov	r2, r9
 800417a:	4631      	mov	r1, r6
 800417c:	4628      	mov	r0, r5
 800417e:	47b8      	blx	r7
 8004180:	3001      	adds	r0, #1
 8004182:	f43f ae3e 	beq.w	8003e02 <_printf_float+0xb6>
 8004186:	f108 0801 	add.w	r8, r8, #1
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800418e:	1a5b      	subs	r3, r3, r1
 8004190:	4543      	cmp	r3, r8
 8004192:	dcf0      	bgt.n	8004176 <_printf_float+0x42a>
 8004194:	e6fc      	b.n	8003f90 <_printf_float+0x244>
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	f104 0919 	add.w	r9, r4, #25
 800419e:	e7f4      	b.n	800418a <_printf_float+0x43e>

080041a0 <_printf_common>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	4616      	mov	r6, r2
 80041a6:	4698      	mov	r8, r3
 80041a8:	688a      	ldr	r2, [r1, #8]
 80041aa:	690b      	ldr	r3, [r1, #16]
 80041ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bfb8      	it	lt
 80041b4:	4613      	movlt	r3, r2
 80041b6:	6033      	str	r3, [r6, #0]
 80041b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041bc:	4607      	mov	r7, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	b10a      	cbz	r2, 80041c6 <_printf_common+0x26>
 80041c2:	3301      	adds	r3, #1
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	0699      	lsls	r1, r3, #26
 80041ca:	bf42      	ittt	mi
 80041cc:	6833      	ldrmi	r3, [r6, #0]
 80041ce:	3302      	addmi	r3, #2
 80041d0:	6033      	strmi	r3, [r6, #0]
 80041d2:	6825      	ldr	r5, [r4, #0]
 80041d4:	f015 0506 	ands.w	r5, r5, #6
 80041d8:	d106      	bne.n	80041e8 <_printf_common+0x48>
 80041da:	f104 0a19 	add.w	sl, r4, #25
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	6832      	ldr	r2, [r6, #0]
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	dc26      	bgt.n	8004236 <_printf_common+0x96>
 80041e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	3b00      	subs	r3, #0
 80041f0:	bf18      	it	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	0692      	lsls	r2, r2, #26
 80041f6:	d42b      	bmi.n	8004250 <_printf_common+0xb0>
 80041f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041fc:	4641      	mov	r1, r8
 80041fe:	4638      	mov	r0, r7
 8004200:	47c8      	blx	r9
 8004202:	3001      	adds	r0, #1
 8004204:	d01e      	beq.n	8004244 <_printf_common+0xa4>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	f003 0306 	and.w	r3, r3, #6
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf02      	ittt	eq
 8004212:	68e5      	ldreq	r5, [r4, #12]
 8004214:	6833      	ldreq	r3, [r6, #0]
 8004216:	1aed      	subeq	r5, r5, r3
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	bf0c      	ite	eq
 800421c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004220:	2500      	movne	r5, #0
 8004222:	4293      	cmp	r3, r2
 8004224:	bfc4      	itt	gt
 8004226:	1a9b      	subgt	r3, r3, r2
 8004228:	18ed      	addgt	r5, r5, r3
 800422a:	2600      	movs	r6, #0
 800422c:	341a      	adds	r4, #26
 800422e:	42b5      	cmp	r5, r6
 8004230:	d11a      	bne.n	8004268 <_printf_common+0xc8>
 8004232:	2000      	movs	r0, #0
 8004234:	e008      	b.n	8004248 <_printf_common+0xa8>
 8004236:	2301      	movs	r3, #1
 8004238:	4652      	mov	r2, sl
 800423a:	4641      	mov	r1, r8
 800423c:	4638      	mov	r0, r7
 800423e:	47c8      	blx	r9
 8004240:	3001      	adds	r0, #1
 8004242:	d103      	bne.n	800424c <_printf_common+0xac>
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424c:	3501      	adds	r5, #1
 800424e:	e7c6      	b.n	80041de <_printf_common+0x3e>
 8004250:	18e1      	adds	r1, r4, r3
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	2030      	movs	r0, #48	@ 0x30
 8004256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800425a:	4422      	add	r2, r4
 800425c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004264:	3302      	adds	r3, #2
 8004266:	e7c7      	b.n	80041f8 <_printf_common+0x58>
 8004268:	2301      	movs	r3, #1
 800426a:	4622      	mov	r2, r4
 800426c:	4641      	mov	r1, r8
 800426e:	4638      	mov	r0, r7
 8004270:	47c8      	blx	r9
 8004272:	3001      	adds	r0, #1
 8004274:	d0e6      	beq.n	8004244 <_printf_common+0xa4>
 8004276:	3601      	adds	r6, #1
 8004278:	e7d9      	b.n	800422e <_printf_common+0x8e>
	...

0800427c <_printf_i>:
 800427c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	7e0f      	ldrb	r7, [r1, #24]
 8004282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004284:	2f78      	cmp	r7, #120	@ 0x78
 8004286:	4691      	mov	r9, r2
 8004288:	4680      	mov	r8, r0
 800428a:	460c      	mov	r4, r1
 800428c:	469a      	mov	sl, r3
 800428e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004292:	d807      	bhi.n	80042a4 <_printf_i+0x28>
 8004294:	2f62      	cmp	r7, #98	@ 0x62
 8004296:	d80a      	bhi.n	80042ae <_printf_i+0x32>
 8004298:	2f00      	cmp	r7, #0
 800429a:	f000 80d2 	beq.w	8004442 <_printf_i+0x1c6>
 800429e:	2f58      	cmp	r7, #88	@ 0x58
 80042a0:	f000 80b9 	beq.w	8004416 <_printf_i+0x19a>
 80042a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042ac:	e03a      	b.n	8004324 <_printf_i+0xa8>
 80042ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042b2:	2b15      	cmp	r3, #21
 80042b4:	d8f6      	bhi.n	80042a4 <_printf_i+0x28>
 80042b6:	a101      	add	r1, pc, #4	@ (adr r1, 80042bc <_printf_i+0x40>)
 80042b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004329 	.word	0x08004329
 80042c4:	080042a5 	.word	0x080042a5
 80042c8:	080042a5 	.word	0x080042a5
 80042cc:	080042a5 	.word	0x080042a5
 80042d0:	080042a5 	.word	0x080042a5
 80042d4:	08004329 	.word	0x08004329
 80042d8:	080042a5 	.word	0x080042a5
 80042dc:	080042a5 	.word	0x080042a5
 80042e0:	080042a5 	.word	0x080042a5
 80042e4:	080042a5 	.word	0x080042a5
 80042e8:	08004429 	.word	0x08004429
 80042ec:	08004353 	.word	0x08004353
 80042f0:	080043e3 	.word	0x080043e3
 80042f4:	080042a5 	.word	0x080042a5
 80042f8:	080042a5 	.word	0x080042a5
 80042fc:	0800444b 	.word	0x0800444b
 8004300:	080042a5 	.word	0x080042a5
 8004304:	08004353 	.word	0x08004353
 8004308:	080042a5 	.word	0x080042a5
 800430c:	080042a5 	.word	0x080042a5
 8004310:	080043eb 	.word	0x080043eb
 8004314:	6833      	ldr	r3, [r6, #0]
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6032      	str	r2, [r6, #0]
 800431c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004324:	2301      	movs	r3, #1
 8004326:	e09d      	b.n	8004464 <_printf_i+0x1e8>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	1d19      	adds	r1, r3, #4
 800432e:	6031      	str	r1, [r6, #0]
 8004330:	0606      	lsls	r6, r0, #24
 8004332:	d501      	bpl.n	8004338 <_printf_i+0xbc>
 8004334:	681d      	ldr	r5, [r3, #0]
 8004336:	e003      	b.n	8004340 <_printf_i+0xc4>
 8004338:	0645      	lsls	r5, r0, #25
 800433a:	d5fb      	bpl.n	8004334 <_printf_i+0xb8>
 800433c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004340:	2d00      	cmp	r5, #0
 8004342:	da03      	bge.n	800434c <_printf_i+0xd0>
 8004344:	232d      	movs	r3, #45	@ 0x2d
 8004346:	426d      	negs	r5, r5
 8004348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800434c:	4859      	ldr	r0, [pc, #356]	@ (80044b4 <_printf_i+0x238>)
 800434e:	230a      	movs	r3, #10
 8004350:	e011      	b.n	8004376 <_printf_i+0xfa>
 8004352:	6821      	ldr	r1, [r4, #0]
 8004354:	6833      	ldr	r3, [r6, #0]
 8004356:	0608      	lsls	r0, r1, #24
 8004358:	f853 5b04 	ldr.w	r5, [r3], #4
 800435c:	d402      	bmi.n	8004364 <_printf_i+0xe8>
 800435e:	0649      	lsls	r1, r1, #25
 8004360:	bf48      	it	mi
 8004362:	b2ad      	uxthmi	r5, r5
 8004364:	2f6f      	cmp	r7, #111	@ 0x6f
 8004366:	4853      	ldr	r0, [pc, #332]	@ (80044b4 <_printf_i+0x238>)
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	bf14      	ite	ne
 800436c:	230a      	movne	r3, #10
 800436e:	2308      	moveq	r3, #8
 8004370:	2100      	movs	r1, #0
 8004372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004376:	6866      	ldr	r6, [r4, #4]
 8004378:	60a6      	str	r6, [r4, #8]
 800437a:	2e00      	cmp	r6, #0
 800437c:	bfa2      	ittt	ge
 800437e:	6821      	ldrge	r1, [r4, #0]
 8004380:	f021 0104 	bicge.w	r1, r1, #4
 8004384:	6021      	strge	r1, [r4, #0]
 8004386:	b90d      	cbnz	r5, 800438c <_printf_i+0x110>
 8004388:	2e00      	cmp	r6, #0
 800438a:	d04b      	beq.n	8004424 <_printf_i+0x1a8>
 800438c:	4616      	mov	r6, r2
 800438e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004392:	fb03 5711 	mls	r7, r3, r1, r5
 8004396:	5dc7      	ldrb	r7, [r0, r7]
 8004398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800439c:	462f      	mov	r7, r5
 800439e:	42bb      	cmp	r3, r7
 80043a0:	460d      	mov	r5, r1
 80043a2:	d9f4      	bls.n	800438e <_printf_i+0x112>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d10b      	bne.n	80043c0 <_printf_i+0x144>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	07df      	lsls	r7, r3, #31
 80043ac:	d508      	bpl.n	80043c0 <_printf_i+0x144>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	6861      	ldr	r1, [r4, #4]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	bfde      	ittt	le
 80043b6:	2330      	movle	r3, #48	@ 0x30
 80043b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043c0:	1b92      	subs	r2, r2, r6
 80043c2:	6122      	str	r2, [r4, #16]
 80043c4:	f8cd a000 	str.w	sl, [sp]
 80043c8:	464b      	mov	r3, r9
 80043ca:	aa03      	add	r2, sp, #12
 80043cc:	4621      	mov	r1, r4
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fee6 	bl	80041a0 <_printf_common>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d14a      	bne.n	800446e <_printf_i+0x1f2>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	b004      	add	sp, #16
 80043de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	f043 0320 	orr.w	r3, r3, #32
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	4833      	ldr	r0, [pc, #204]	@ (80044b8 <_printf_i+0x23c>)
 80043ec:	2778      	movs	r7, #120	@ 0x78
 80043ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	6831      	ldr	r1, [r6, #0]
 80043f6:	061f      	lsls	r7, r3, #24
 80043f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80043fc:	d402      	bmi.n	8004404 <_printf_i+0x188>
 80043fe:	065f      	lsls	r7, r3, #25
 8004400:	bf48      	it	mi
 8004402:	b2ad      	uxthmi	r5, r5
 8004404:	6031      	str	r1, [r6, #0]
 8004406:	07d9      	lsls	r1, r3, #31
 8004408:	bf44      	itt	mi
 800440a:	f043 0320 	orrmi.w	r3, r3, #32
 800440e:	6023      	strmi	r3, [r4, #0]
 8004410:	b11d      	cbz	r5, 800441a <_printf_i+0x19e>
 8004412:	2310      	movs	r3, #16
 8004414:	e7ac      	b.n	8004370 <_printf_i+0xf4>
 8004416:	4827      	ldr	r0, [pc, #156]	@ (80044b4 <_printf_i+0x238>)
 8004418:	e7e9      	b.n	80043ee <_printf_i+0x172>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f023 0320 	bic.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	e7f6      	b.n	8004412 <_printf_i+0x196>
 8004424:	4616      	mov	r6, r2
 8004426:	e7bd      	b.n	80043a4 <_printf_i+0x128>
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	6961      	ldr	r1, [r4, #20]
 800442e:	1d18      	adds	r0, r3, #4
 8004430:	6030      	str	r0, [r6, #0]
 8004432:	062e      	lsls	r6, r5, #24
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	d501      	bpl.n	800443c <_printf_i+0x1c0>
 8004438:	6019      	str	r1, [r3, #0]
 800443a:	e002      	b.n	8004442 <_printf_i+0x1c6>
 800443c:	0668      	lsls	r0, r5, #25
 800443e:	d5fb      	bpl.n	8004438 <_printf_i+0x1bc>
 8004440:	8019      	strh	r1, [r3, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	4616      	mov	r6, r2
 8004448:	e7bc      	b.n	80043c4 <_printf_i+0x148>
 800444a:	6833      	ldr	r3, [r6, #0]
 800444c:	1d1a      	adds	r2, r3, #4
 800444e:	6032      	str	r2, [r6, #0]
 8004450:	681e      	ldr	r6, [r3, #0]
 8004452:	6862      	ldr	r2, [r4, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	4630      	mov	r0, r6
 8004458:	f7fb feba 	bl	80001d0 <memchr>
 800445c:	b108      	cbz	r0, 8004462 <_printf_i+0x1e6>
 800445e:	1b80      	subs	r0, r0, r6
 8004460:	6060      	str	r0, [r4, #4]
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	2300      	movs	r3, #0
 8004468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800446c:	e7aa      	b.n	80043c4 <_printf_i+0x148>
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	4632      	mov	r2, r6
 8004472:	4649      	mov	r1, r9
 8004474:	4640      	mov	r0, r8
 8004476:	47d0      	blx	sl
 8004478:	3001      	adds	r0, #1
 800447a:	d0ad      	beq.n	80043d8 <_printf_i+0x15c>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	079b      	lsls	r3, r3, #30
 8004480:	d413      	bmi.n	80044aa <_printf_i+0x22e>
 8004482:	68e0      	ldr	r0, [r4, #12]
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	4298      	cmp	r0, r3
 8004488:	bfb8      	it	lt
 800448a:	4618      	movlt	r0, r3
 800448c:	e7a6      	b.n	80043dc <_printf_i+0x160>
 800448e:	2301      	movs	r3, #1
 8004490:	4632      	mov	r2, r6
 8004492:	4649      	mov	r1, r9
 8004494:	4640      	mov	r0, r8
 8004496:	47d0      	blx	sl
 8004498:	3001      	adds	r0, #1
 800449a:	d09d      	beq.n	80043d8 <_printf_i+0x15c>
 800449c:	3501      	adds	r5, #1
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	9903      	ldr	r1, [sp, #12]
 80044a2:	1a5b      	subs	r3, r3, r1
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dcf2      	bgt.n	800448e <_printf_i+0x212>
 80044a8:	e7eb      	b.n	8004482 <_printf_i+0x206>
 80044aa:	2500      	movs	r5, #0
 80044ac:	f104 0619 	add.w	r6, r4, #25
 80044b0:	e7f5      	b.n	800449e <_printf_i+0x222>
 80044b2:	bf00      	nop
 80044b4:	080266e2 	.word	0x080266e2
 80044b8:	080266f3 	.word	0x080266f3

080044bc <_scanf_float>:
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	b087      	sub	sp, #28
 80044c2:	4617      	mov	r7, r2
 80044c4:	9303      	str	r3, [sp, #12]
 80044c6:	688b      	ldr	r3, [r1, #8]
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80044ce:	bf81      	itttt	hi
 80044d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80044d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80044d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80044dc:	608b      	strhi	r3, [r1, #8]
 80044de:	680b      	ldr	r3, [r1, #0]
 80044e0:	460a      	mov	r2, r1
 80044e2:	f04f 0500 	mov.w	r5, #0
 80044e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80044ea:	f842 3b1c 	str.w	r3, [r2], #28
 80044ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80044f2:	4680      	mov	r8, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	bf98      	it	ls
 80044f8:	f04f 0b00 	movls.w	fp, #0
 80044fc:	9201      	str	r2, [sp, #4]
 80044fe:	4616      	mov	r6, r2
 8004500:	46aa      	mov	sl, r5
 8004502:	46a9      	mov	r9, r5
 8004504:	9502      	str	r5, [sp, #8]
 8004506:	68a2      	ldr	r2, [r4, #8]
 8004508:	b152      	cbz	r2, 8004520 <_scanf_float+0x64>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004510:	d864      	bhi.n	80045dc <_scanf_float+0x120>
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d83c      	bhi.n	8004590 <_scanf_float+0xd4>
 8004516:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800451a:	b2c8      	uxtb	r0, r1
 800451c:	280e      	cmp	r0, #14
 800451e:	d93a      	bls.n	8004596 <_scanf_float+0xda>
 8004520:	f1b9 0f00 	cmp.w	r9, #0
 8004524:	d003      	beq.n	800452e <_scanf_float+0x72>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004532:	f1ba 0f01 	cmp.w	sl, #1
 8004536:	f200 8117 	bhi.w	8004768 <_scanf_float+0x2ac>
 800453a:	9b01      	ldr	r3, [sp, #4]
 800453c:	429e      	cmp	r6, r3
 800453e:	f200 8108 	bhi.w	8004752 <_scanf_float+0x296>
 8004542:	2001      	movs	r0, #1
 8004544:	b007      	add	sp, #28
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800454e:	2a0d      	cmp	r2, #13
 8004550:	d8e6      	bhi.n	8004520 <_scanf_float+0x64>
 8004552:	a101      	add	r1, pc, #4	@ (adr r1, 8004558 <_scanf_float+0x9c>)
 8004554:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004558:	0800469f 	.word	0x0800469f
 800455c:	08004521 	.word	0x08004521
 8004560:	08004521 	.word	0x08004521
 8004564:	08004521 	.word	0x08004521
 8004568:	080046ff 	.word	0x080046ff
 800456c:	080046d7 	.word	0x080046d7
 8004570:	08004521 	.word	0x08004521
 8004574:	08004521 	.word	0x08004521
 8004578:	080046ad 	.word	0x080046ad
 800457c:	08004521 	.word	0x08004521
 8004580:	08004521 	.word	0x08004521
 8004584:	08004521 	.word	0x08004521
 8004588:	08004521 	.word	0x08004521
 800458c:	08004665 	.word	0x08004665
 8004590:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004594:	e7db      	b.n	800454e <_scanf_float+0x92>
 8004596:	290e      	cmp	r1, #14
 8004598:	d8c2      	bhi.n	8004520 <_scanf_float+0x64>
 800459a:	a001      	add	r0, pc, #4	@ (adr r0, 80045a0 <_scanf_float+0xe4>)
 800459c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045a0:	08004655 	.word	0x08004655
 80045a4:	08004521 	.word	0x08004521
 80045a8:	08004655 	.word	0x08004655
 80045ac:	080046eb 	.word	0x080046eb
 80045b0:	08004521 	.word	0x08004521
 80045b4:	080045fd 	.word	0x080045fd
 80045b8:	0800463b 	.word	0x0800463b
 80045bc:	0800463b 	.word	0x0800463b
 80045c0:	0800463b 	.word	0x0800463b
 80045c4:	0800463b 	.word	0x0800463b
 80045c8:	0800463b 	.word	0x0800463b
 80045cc:	0800463b 	.word	0x0800463b
 80045d0:	0800463b 	.word	0x0800463b
 80045d4:	0800463b 	.word	0x0800463b
 80045d8:	0800463b 	.word	0x0800463b
 80045dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80045de:	d809      	bhi.n	80045f4 <_scanf_float+0x138>
 80045e0:	2b60      	cmp	r3, #96	@ 0x60
 80045e2:	d8b2      	bhi.n	800454a <_scanf_float+0x8e>
 80045e4:	2b54      	cmp	r3, #84	@ 0x54
 80045e6:	d07b      	beq.n	80046e0 <_scanf_float+0x224>
 80045e8:	2b59      	cmp	r3, #89	@ 0x59
 80045ea:	d199      	bne.n	8004520 <_scanf_float+0x64>
 80045ec:	2d07      	cmp	r5, #7
 80045ee:	d197      	bne.n	8004520 <_scanf_float+0x64>
 80045f0:	2508      	movs	r5, #8
 80045f2:	e02c      	b.n	800464e <_scanf_float+0x192>
 80045f4:	2b74      	cmp	r3, #116	@ 0x74
 80045f6:	d073      	beq.n	80046e0 <_scanf_float+0x224>
 80045f8:	2b79      	cmp	r3, #121	@ 0x79
 80045fa:	e7f6      	b.n	80045ea <_scanf_float+0x12e>
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	05c8      	lsls	r0, r1, #23
 8004600:	d51b      	bpl.n	800463a <_scanf_float+0x17e>
 8004602:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004606:	6021      	str	r1, [r4, #0]
 8004608:	f109 0901 	add.w	r9, r9, #1
 800460c:	f1bb 0f00 	cmp.w	fp, #0
 8004610:	d003      	beq.n	800461a <_scanf_float+0x15e>
 8004612:	3201      	adds	r2, #1
 8004614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004618:	60a2      	str	r2, [r4, #8]
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	3b01      	subs	r3, #1
 800461e:	60a3      	str	r3, [r4, #8]
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	3301      	adds	r3, #1
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	f340 8087 	ble.w	8004740 <_scanf_float+0x284>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	e765      	b.n	8004506 <_scanf_float+0x4a>
 800463a:	eb1a 0105 	adds.w	r1, sl, r5
 800463e:	f47f af6f 	bne.w	8004520 <_scanf_float+0x64>
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004648:	6022      	str	r2, [r4, #0]
 800464a:	460d      	mov	r5, r1
 800464c:	468a      	mov	sl, r1
 800464e:	f806 3b01 	strb.w	r3, [r6], #1
 8004652:	e7e2      	b.n	800461a <_scanf_float+0x15e>
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	0610      	lsls	r0, r2, #24
 8004658:	f57f af62 	bpl.w	8004520 <_scanf_float+0x64>
 800465c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004660:	6022      	str	r2, [r4, #0]
 8004662:	e7f4      	b.n	800464e <_scanf_float+0x192>
 8004664:	f1ba 0f00 	cmp.w	sl, #0
 8004668:	d10e      	bne.n	8004688 <_scanf_float+0x1cc>
 800466a:	f1b9 0f00 	cmp.w	r9, #0
 800466e:	d10e      	bne.n	800468e <_scanf_float+0x1d2>
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004676:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800467a:	d108      	bne.n	800468e <_scanf_float+0x1d2>
 800467c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	f04f 0a01 	mov.w	sl, #1
 8004686:	e7e2      	b.n	800464e <_scanf_float+0x192>
 8004688:	f1ba 0f02 	cmp.w	sl, #2
 800468c:	d055      	beq.n	800473a <_scanf_float+0x27e>
 800468e:	2d01      	cmp	r5, #1
 8004690:	d002      	beq.n	8004698 <_scanf_float+0x1dc>
 8004692:	2d04      	cmp	r5, #4
 8004694:	f47f af44 	bne.w	8004520 <_scanf_float+0x64>
 8004698:	3501      	adds	r5, #1
 800469a:	b2ed      	uxtb	r5, r5
 800469c:	e7d7      	b.n	800464e <_scanf_float+0x192>
 800469e:	f1ba 0f01 	cmp.w	sl, #1
 80046a2:	f47f af3d 	bne.w	8004520 <_scanf_float+0x64>
 80046a6:	f04f 0a02 	mov.w	sl, #2
 80046aa:	e7d0      	b.n	800464e <_scanf_float+0x192>
 80046ac:	b97d      	cbnz	r5, 80046ce <_scanf_float+0x212>
 80046ae:	f1b9 0f00 	cmp.w	r9, #0
 80046b2:	f47f af38 	bne.w	8004526 <_scanf_float+0x6a>
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046c0:	f040 8108 	bne.w	80048d4 <_scanf_float+0x418>
 80046c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	2501      	movs	r5, #1
 80046cc:	e7bf      	b.n	800464e <_scanf_float+0x192>
 80046ce:	2d03      	cmp	r5, #3
 80046d0:	d0e2      	beq.n	8004698 <_scanf_float+0x1dc>
 80046d2:	2d05      	cmp	r5, #5
 80046d4:	e7de      	b.n	8004694 <_scanf_float+0x1d8>
 80046d6:	2d02      	cmp	r5, #2
 80046d8:	f47f af22 	bne.w	8004520 <_scanf_float+0x64>
 80046dc:	2503      	movs	r5, #3
 80046de:	e7b6      	b.n	800464e <_scanf_float+0x192>
 80046e0:	2d06      	cmp	r5, #6
 80046e2:	f47f af1d 	bne.w	8004520 <_scanf_float+0x64>
 80046e6:	2507      	movs	r5, #7
 80046e8:	e7b1      	b.n	800464e <_scanf_float+0x192>
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	0591      	lsls	r1, r2, #22
 80046ee:	f57f af17 	bpl.w	8004520 <_scanf_float+0x64>
 80046f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80046fc:	e7a7      	b.n	800464e <_scanf_float+0x192>
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004704:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004708:	d006      	beq.n	8004718 <_scanf_float+0x25c>
 800470a:	0550      	lsls	r0, r2, #21
 800470c:	f57f af08 	bpl.w	8004520 <_scanf_float+0x64>
 8004710:	f1b9 0f00 	cmp.w	r9, #0
 8004714:	f000 80de 	beq.w	80048d4 <_scanf_float+0x418>
 8004718:	0591      	lsls	r1, r2, #22
 800471a:	bf58      	it	pl
 800471c:	9902      	ldrpl	r1, [sp, #8]
 800471e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004722:	bf58      	it	pl
 8004724:	eba9 0101 	subpl.w	r1, r9, r1
 8004728:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800472c:	bf58      	it	pl
 800472e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004732:	6022      	str	r2, [r4, #0]
 8004734:	f04f 0900 	mov.w	r9, #0
 8004738:	e789      	b.n	800464e <_scanf_float+0x192>
 800473a:	f04f 0a03 	mov.w	sl, #3
 800473e:	e786      	b.n	800464e <_scanf_float+0x192>
 8004740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004744:	4639      	mov	r1, r7
 8004746:	4640      	mov	r0, r8
 8004748:	4798      	blx	r3
 800474a:	2800      	cmp	r0, #0
 800474c:	f43f aedb 	beq.w	8004506 <_scanf_float+0x4a>
 8004750:	e6e6      	b.n	8004520 <_scanf_float+0x64>
 8004752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800475a:	463a      	mov	r2, r7
 800475c:	4640      	mov	r0, r8
 800475e:	4798      	blx	r3
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	3b01      	subs	r3, #1
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	e6e8      	b.n	800453a <_scanf_float+0x7e>
 8004768:	1e6b      	subs	r3, r5, #1
 800476a:	2b06      	cmp	r3, #6
 800476c:	d824      	bhi.n	80047b8 <_scanf_float+0x2fc>
 800476e:	2d02      	cmp	r5, #2
 8004770:	d836      	bhi.n	80047e0 <_scanf_float+0x324>
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	429e      	cmp	r6, r3
 8004776:	f67f aee4 	bls.w	8004542 <_scanf_float+0x86>
 800477a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800477e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004782:	463a      	mov	r2, r7
 8004784:	4640      	mov	r0, r8
 8004786:	4798      	blx	r3
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	3b01      	subs	r3, #1
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	e7f0      	b.n	8004772 <_scanf_float+0x2b6>
 8004790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004794:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004798:	463a      	mov	r2, r7
 800479a:	4640      	mov	r0, r8
 800479c:	4798      	blx	r3
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047a8:	fa5f fa8a 	uxtb.w	sl, sl
 80047ac:	f1ba 0f02 	cmp.w	sl, #2
 80047b0:	d1ee      	bne.n	8004790 <_scanf_float+0x2d4>
 80047b2:	3d03      	subs	r5, #3
 80047b4:	b2ed      	uxtb	r5, r5
 80047b6:	1b76      	subs	r6, r6, r5
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	05da      	lsls	r2, r3, #23
 80047bc:	d530      	bpl.n	8004820 <_scanf_float+0x364>
 80047be:	055b      	lsls	r3, r3, #21
 80047c0:	d511      	bpl.n	80047e6 <_scanf_float+0x32a>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	429e      	cmp	r6, r3
 80047c6:	f67f aebc 	bls.w	8004542 <_scanf_float+0x86>
 80047ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047d2:	463a      	mov	r2, r7
 80047d4:	4640      	mov	r0, r8
 80047d6:	4798      	blx	r3
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	3b01      	subs	r3, #1
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	e7f0      	b.n	80047c2 <_scanf_float+0x306>
 80047e0:	46aa      	mov	sl, r5
 80047e2:	46b3      	mov	fp, r6
 80047e4:	e7de      	b.n	80047a4 <_scanf_float+0x2e8>
 80047e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	2965      	cmp	r1, #101	@ 0x65
 80047ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80047f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80047f6:	6123      	str	r3, [r4, #16]
 80047f8:	d00c      	beq.n	8004814 <_scanf_float+0x358>
 80047fa:	2945      	cmp	r1, #69	@ 0x45
 80047fc:	d00a      	beq.n	8004814 <_scanf_float+0x358>
 80047fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004802:	463a      	mov	r2, r7
 8004804:	4640      	mov	r0, r8
 8004806:	4798      	blx	r3
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800480e:	3b01      	subs	r3, #1
 8004810:	1eb5      	subs	r5, r6, #2
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004818:	463a      	mov	r2, r7
 800481a:	4640      	mov	r0, r8
 800481c:	4798      	blx	r3
 800481e:	462e      	mov	r6, r5
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	f012 0210 	ands.w	r2, r2, #16
 8004826:	d001      	beq.n	800482c <_scanf_float+0x370>
 8004828:	2000      	movs	r0, #0
 800482a:	e68b      	b.n	8004544 <_scanf_float+0x88>
 800482c:	7032      	strb	r2, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004838:	d11c      	bne.n	8004874 <_scanf_float+0x3b8>
 800483a:	9b02      	ldr	r3, [sp, #8]
 800483c:	454b      	cmp	r3, r9
 800483e:	eba3 0209 	sub.w	r2, r3, r9
 8004842:	d123      	bne.n	800488c <_scanf_float+0x3d0>
 8004844:	9901      	ldr	r1, [sp, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	4640      	mov	r0, r8
 800484a:	f002 fc71 	bl	8007130 <_strtod_r>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	6821      	ldr	r1, [r4, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f011 0f02 	tst.w	r1, #2
 8004858:	ec57 6b10 	vmov	r6, r7, d0
 800485c:	f103 0204 	add.w	r2, r3, #4
 8004860:	d01f      	beq.n	80048a2 <_scanf_float+0x3e6>
 8004862:	9903      	ldr	r1, [sp, #12]
 8004864:	600a      	str	r2, [r1, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	e9c3 6700 	strd	r6, r7, [r3]
 800486c:	68e3      	ldr	r3, [r4, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60e3      	str	r3, [r4, #12]
 8004872:	e7d9      	b.n	8004828 <_scanf_float+0x36c>
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0e4      	beq.n	8004844 <_scanf_float+0x388>
 800487a:	9905      	ldr	r1, [sp, #20]
 800487c:	230a      	movs	r3, #10
 800487e:	3101      	adds	r1, #1
 8004880:	4640      	mov	r0, r8
 8004882:	f002 fcd5 	bl	8007230 <_strtol_r>
 8004886:	9b04      	ldr	r3, [sp, #16]
 8004888:	9e05      	ldr	r6, [sp, #20]
 800488a:	1ac2      	subs	r2, r0, r3
 800488c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004890:	429e      	cmp	r6, r3
 8004892:	bf28      	it	cs
 8004894:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004898:	4910      	ldr	r1, [pc, #64]	@ (80048dc <_scanf_float+0x420>)
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f966 	bl	8004b6c <siprintf>
 80048a0:	e7d0      	b.n	8004844 <_scanf_float+0x388>
 80048a2:	f011 0f04 	tst.w	r1, #4
 80048a6:	9903      	ldr	r1, [sp, #12]
 80048a8:	600a      	str	r2, [r1, #0]
 80048aa:	d1dc      	bne.n	8004866 <_scanf_float+0x3aa>
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	4632      	mov	r2, r6
 80048b0:	463b      	mov	r3, r7
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fc f939 	bl	8000b2c <__aeabi_dcmpun>
 80048ba:	b128      	cbz	r0, 80048c8 <_scanf_float+0x40c>
 80048bc:	4808      	ldr	r0, [pc, #32]	@ (80048e0 <_scanf_float+0x424>)
 80048be:	f000 fadd 	bl	8004e7c <nanf>
 80048c2:	ed85 0a00 	vstr	s0, [r5]
 80048c6:	e7d1      	b.n	800486c <_scanf_float+0x3b0>
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fc f98c 	bl	8000be8 <__aeabi_d2f>
 80048d0:	6028      	str	r0, [r5, #0]
 80048d2:	e7cb      	b.n	800486c <_scanf_float+0x3b0>
 80048d4:	f04f 0900 	mov.w	r9, #0
 80048d8:	e629      	b.n	800452e <_scanf_float+0x72>
 80048da:	bf00      	nop
 80048dc:	08026704 	.word	0x08026704
 80048e0:	080266cf 	.word	0x080266cf

080048e4 <std>:
 80048e4:	2300      	movs	r3, #0
 80048e6:	b510      	push	{r4, lr}
 80048e8:	4604      	mov	r4, r0
 80048ea:	e9c0 3300 	strd	r3, r3, [r0]
 80048ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048f2:	6083      	str	r3, [r0, #8]
 80048f4:	8181      	strh	r1, [r0, #12]
 80048f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048f8:	81c2      	strh	r2, [r0, #14]
 80048fa:	6183      	str	r3, [r0, #24]
 80048fc:	4619      	mov	r1, r3
 80048fe:	2208      	movs	r2, #8
 8004900:	305c      	adds	r0, #92	@ 0x5c
 8004902:	f000 fa2b 	bl	8004d5c <memset>
 8004906:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <std+0x58>)
 8004908:	6263      	str	r3, [r4, #36]	@ 0x24
 800490a:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <std+0x5c>)
 800490c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <std+0x60>)
 8004910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <std+0x64>)
 8004914:	6323      	str	r3, [r4, #48]	@ 0x30
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <std+0x68>)
 8004918:	6224      	str	r4, [r4, #32]
 800491a:	429c      	cmp	r4, r3
 800491c:	d006      	beq.n	800492c <std+0x48>
 800491e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004922:	4294      	cmp	r4, r2
 8004924:	d002      	beq.n	800492c <std+0x48>
 8004926:	33d0      	adds	r3, #208	@ 0xd0
 8004928:	429c      	cmp	r4, r3
 800492a:	d105      	bne.n	8004938 <std+0x54>
 800492c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004934:	f000 ba9e 	b.w	8004e74 <__retarget_lock_init_recursive>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop
 800493c:	08004bad 	.word	0x08004bad
 8004940:	08004bcf 	.word	0x08004bcf
 8004944:	08004c07 	.word	0x08004c07
 8004948:	08004c2b 	.word	0x08004c2b
 800494c:	200001f4 	.word	0x200001f4

08004950 <stdio_exit_handler>:
 8004950:	4a02      	ldr	r2, [pc, #8]	@ (800495c <stdio_exit_handler+0xc>)
 8004952:	4903      	ldr	r1, [pc, #12]	@ (8004960 <stdio_exit_handler+0x10>)
 8004954:	4803      	ldr	r0, [pc, #12]	@ (8004964 <stdio_exit_handler+0x14>)
 8004956:	f000 b87b 	b.w	8004a50 <_fwalk_sglue>
 800495a:	bf00      	nop
 800495c:	20000000 	.word	0x20000000
 8004960:	08007871 	.word	0x08007871
 8004964:	20000010 	.word	0x20000010

08004968 <cleanup_stdio>:
 8004968:	6841      	ldr	r1, [r0, #4]
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <cleanup_stdio+0x34>)
 800496c:	4299      	cmp	r1, r3
 800496e:	b510      	push	{r4, lr}
 8004970:	4604      	mov	r4, r0
 8004972:	d001      	beq.n	8004978 <cleanup_stdio+0x10>
 8004974:	f002 ff7c 	bl	8007870 <_fflush_r>
 8004978:	68a1      	ldr	r1, [r4, #8]
 800497a:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <cleanup_stdio+0x38>)
 800497c:	4299      	cmp	r1, r3
 800497e:	d002      	beq.n	8004986 <cleanup_stdio+0x1e>
 8004980:	4620      	mov	r0, r4
 8004982:	f002 ff75 	bl	8007870 <_fflush_r>
 8004986:	68e1      	ldr	r1, [r4, #12]
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <cleanup_stdio+0x3c>)
 800498a:	4299      	cmp	r1, r3
 800498c:	d004      	beq.n	8004998 <cleanup_stdio+0x30>
 800498e:	4620      	mov	r0, r4
 8004990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004994:	f002 bf6c 	b.w	8007870 <_fflush_r>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	bf00      	nop
 800499c:	200001f4 	.word	0x200001f4
 80049a0:	2000025c 	.word	0x2000025c
 80049a4:	200002c4 	.word	0x200002c4

080049a8 <global_stdio_init.part.0>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <global_stdio_init.part.0+0x30>)
 80049ac:	4c0b      	ldr	r4, [pc, #44]	@ (80049dc <global_stdio_init.part.0+0x34>)
 80049ae:	4a0c      	ldr	r2, [pc, #48]	@ (80049e0 <global_stdio_init.part.0+0x38>)
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	4620      	mov	r0, r4
 80049b4:	2200      	movs	r2, #0
 80049b6:	2104      	movs	r1, #4
 80049b8:	f7ff ff94 	bl	80048e4 <std>
 80049bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049c0:	2201      	movs	r2, #1
 80049c2:	2109      	movs	r1, #9
 80049c4:	f7ff ff8e 	bl	80048e4 <std>
 80049c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049cc:	2202      	movs	r2, #2
 80049ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d2:	2112      	movs	r1, #18
 80049d4:	f7ff bf86 	b.w	80048e4 <std>
 80049d8:	2000032c 	.word	0x2000032c
 80049dc:	200001f4 	.word	0x200001f4
 80049e0:	08004951 	.word	0x08004951

080049e4 <__sfp_lock_acquire>:
 80049e4:	4801      	ldr	r0, [pc, #4]	@ (80049ec <__sfp_lock_acquire+0x8>)
 80049e6:	f000 ba46 	b.w	8004e76 <__retarget_lock_acquire_recursive>
 80049ea:	bf00      	nop
 80049ec:	20000335 	.word	0x20000335

080049f0 <__sfp_lock_release>:
 80049f0:	4801      	ldr	r0, [pc, #4]	@ (80049f8 <__sfp_lock_release+0x8>)
 80049f2:	f000 ba41 	b.w	8004e78 <__retarget_lock_release_recursive>
 80049f6:	bf00      	nop
 80049f8:	20000335 	.word	0x20000335

080049fc <__sinit>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	f7ff fff0 	bl	80049e4 <__sfp_lock_acquire>
 8004a04:	6a23      	ldr	r3, [r4, #32]
 8004a06:	b11b      	cbz	r3, 8004a10 <__sinit+0x14>
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	f7ff bff0 	b.w	80049f0 <__sfp_lock_release>
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__sinit+0x28>)
 8004a12:	6223      	str	r3, [r4, #32]
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <__sinit+0x2c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f5      	bne.n	8004a08 <__sinit+0xc>
 8004a1c:	f7ff ffc4 	bl	80049a8 <global_stdio_init.part.0>
 8004a20:	e7f2      	b.n	8004a08 <__sinit+0xc>
 8004a22:	bf00      	nop
 8004a24:	08004969 	.word	0x08004969
 8004a28:	2000032c 	.word	0x2000032c

08004a2c <fiprintf>:
 8004a2c:	b40e      	push	{r1, r2, r3}
 8004a2e:	b503      	push	{r0, r1, lr}
 8004a30:	4601      	mov	r1, r0
 8004a32:	ab03      	add	r3, sp, #12
 8004a34:	4805      	ldr	r0, [pc, #20]	@ (8004a4c <fiprintf+0x20>)
 8004a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	9301      	str	r3, [sp, #4]
 8004a3e:	f002 fd7b 	bl	8007538 <_vfiprintf_r>
 8004a42:	b002      	add	sp, #8
 8004a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a48:	b003      	add	sp, #12
 8004a4a:	4770      	bx	lr
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <_fwalk_sglue>:
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	4607      	mov	r7, r0
 8004a56:	4688      	mov	r8, r1
 8004a58:	4614      	mov	r4, r2
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a60:	f1b9 0901 	subs.w	r9, r9, #1
 8004a64:	d505      	bpl.n	8004a72 <_fwalk_sglue+0x22>
 8004a66:	6824      	ldr	r4, [r4, #0]
 8004a68:	2c00      	cmp	r4, #0
 8004a6a:	d1f7      	bne.n	8004a5c <_fwalk_sglue+0xc>
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a72:	89ab      	ldrh	r3, [r5, #12]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d907      	bls.n	8004a88 <_fwalk_sglue+0x38>
 8004a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	d003      	beq.n	8004a88 <_fwalk_sglue+0x38>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	47c0      	blx	r8
 8004a86:	4306      	orrs	r6, r0
 8004a88:	3568      	adds	r5, #104	@ 0x68
 8004a8a:	e7e9      	b.n	8004a60 <_fwalk_sglue+0x10>

08004a8c <iprintf>:
 8004a8c:	b40f      	push	{r0, r1, r2, r3}
 8004a8e:	b507      	push	{r0, r1, r2, lr}
 8004a90:	4906      	ldr	r1, [pc, #24]	@ (8004aac <iprintf+0x20>)
 8004a92:	ab04      	add	r3, sp, #16
 8004a94:	6808      	ldr	r0, [r1, #0]
 8004a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a9a:	6881      	ldr	r1, [r0, #8]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	f002 fd4b 	bl	8007538 <_vfiprintf_r>
 8004aa2:	b003      	add	sp, #12
 8004aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa8:	b004      	add	sp, #16
 8004aaa:	4770      	bx	lr
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <_puts_r>:
 8004ab0:	6a03      	ldr	r3, [r0, #32]
 8004ab2:	b570      	push	{r4, r5, r6, lr}
 8004ab4:	6884      	ldr	r4, [r0, #8]
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	460e      	mov	r6, r1
 8004aba:	b90b      	cbnz	r3, 8004ac0 <_puts_r+0x10>
 8004abc:	f7ff ff9e 	bl	80049fc <__sinit>
 8004ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ac2:	07db      	lsls	r3, r3, #31
 8004ac4:	d405      	bmi.n	8004ad2 <_puts_r+0x22>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	0598      	lsls	r0, r3, #22
 8004aca:	d402      	bmi.n	8004ad2 <_puts_r+0x22>
 8004acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ace:	f000 f9d2 	bl	8004e76 <__retarget_lock_acquire_recursive>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	0719      	lsls	r1, r3, #28
 8004ad6:	d502      	bpl.n	8004ade <_puts_r+0x2e>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d135      	bne.n	8004b4a <_puts_r+0x9a>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f8e5 	bl	8004cb0 <__swsetup_r>
 8004ae6:	b380      	cbz	r0, 8004b4a <_puts_r+0x9a>
 8004ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8004aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004aee:	07da      	lsls	r2, r3, #31
 8004af0:	d405      	bmi.n	8004afe <_puts_r+0x4e>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	d402      	bmi.n	8004afe <_puts_r+0x4e>
 8004af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004afa:	f000 f9bd 	bl	8004e78 <__retarget_lock_release_recursive>
 8004afe:	4628      	mov	r0, r5
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	da04      	bge.n	8004b10 <_puts_r+0x60>
 8004b06:	69a2      	ldr	r2, [r4, #24]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	dc17      	bgt.n	8004b3c <_puts_r+0x8c>
 8004b0c:	290a      	cmp	r1, #10
 8004b0e:	d015      	beq.n	8004b3c <_puts_r+0x8c>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	6022      	str	r2, [r4, #0]
 8004b16:	7019      	strb	r1, [r3, #0]
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	60a3      	str	r3, [r4, #8]
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d1ed      	bne.n	8004b02 <_puts_r+0x52>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da11      	bge.n	8004b4e <_puts_r+0x9e>
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	210a      	movs	r1, #10
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f87f 	bl	8004c32 <__swbuf_r>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0d7      	beq.n	8004ae8 <_puts_r+0x38>
 8004b38:	250a      	movs	r5, #10
 8004b3a:	e7d7      	b.n	8004aec <_puts_r+0x3c>
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f000 f877 	bl	8004c32 <__swbuf_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d1e7      	bne.n	8004b18 <_puts_r+0x68>
 8004b48:	e7ce      	b.n	8004ae8 <_puts_r+0x38>
 8004b4a:	3e01      	subs	r6, #1
 8004b4c:	e7e4      	b.n	8004b18 <_puts_r+0x68>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	220a      	movs	r2, #10
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e7ee      	b.n	8004b38 <_puts_r+0x88>
	...

08004b5c <puts>:
 8004b5c:	4b02      	ldr	r3, [pc, #8]	@ (8004b68 <puts+0xc>)
 8004b5e:	4601      	mov	r1, r0
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f7ff bfa5 	b.w	8004ab0 <_puts_r>
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <siprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	b500      	push	{lr}
 8004b70:	b09c      	sub	sp, #112	@ 0x70
 8004b72:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b74:	9002      	str	r0, [sp, #8]
 8004b76:	9006      	str	r0, [sp, #24]
 8004b78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b7c:	4809      	ldr	r0, [pc, #36]	@ (8004ba4 <siprintf+0x38>)
 8004b7e:	9107      	str	r1, [sp, #28]
 8004b80:	9104      	str	r1, [sp, #16]
 8004b82:	4909      	ldr	r1, [pc, #36]	@ (8004ba8 <siprintf+0x3c>)
 8004b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	a902      	add	r1, sp, #8
 8004b90:	f002 fbac 	bl	80072ec <_svfiprintf_r>
 8004b94:	9b02      	ldr	r3, [sp, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	b01c      	add	sp, #112	@ 0x70
 8004b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	4770      	bx	lr
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	ffff0208 	.word	0xffff0208

08004bac <__sread>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	f000 f900 	bl	8004db8 <_read_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	bfab      	itete	ge
 8004bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004bc0:	181b      	addge	r3, r3, r0
 8004bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bc6:	bfac      	ite	ge
 8004bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bca:	81a3      	strhlt	r3, [r4, #12]
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <__swrite>:
 8004bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	461f      	mov	r7, r3
 8004bd4:	898b      	ldrh	r3, [r1, #12]
 8004bd6:	05db      	lsls	r3, r3, #23
 8004bd8:	4605      	mov	r5, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4616      	mov	r6, r2
 8004bde:	d505      	bpl.n	8004bec <__swrite+0x1e>
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	2302      	movs	r3, #2
 8004be6:	2200      	movs	r2, #0
 8004be8:	f000 f8d4 	bl	8004d94 <_lseek_r>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	f000 b8fb 	b.w	8004dfc <_write_r>

08004c06 <__sseek>:
 8004c06:	b510      	push	{r4, lr}
 8004c08:	460c      	mov	r4, r1
 8004c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0e:	f000 f8c1 	bl	8004d94 <_lseek_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	bf15      	itete	ne
 8004c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c22:	81a3      	strheq	r3, [r4, #12]
 8004c24:	bf18      	it	ne
 8004c26:	81a3      	strhne	r3, [r4, #12]
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <__sclose>:
 8004c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2e:	f000 b8a1 	b.w	8004d74 <_close_r>

08004c32 <__swbuf_r>:
 8004c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c34:	460e      	mov	r6, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	4605      	mov	r5, r0
 8004c3a:	b118      	cbz	r0, 8004c44 <__swbuf_r+0x12>
 8004c3c:	6a03      	ldr	r3, [r0, #32]
 8004c3e:	b90b      	cbnz	r3, 8004c44 <__swbuf_r+0x12>
 8004c40:	f7ff fedc 	bl	80049fc <__sinit>
 8004c44:	69a3      	ldr	r3, [r4, #24]
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	071a      	lsls	r2, r3, #28
 8004c4c:	d501      	bpl.n	8004c52 <__swbuf_r+0x20>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	b943      	cbnz	r3, 8004c64 <__swbuf_r+0x32>
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 f82b 	bl	8004cb0 <__swsetup_r>
 8004c5a:	b118      	cbz	r0, 8004c64 <__swbuf_r+0x32>
 8004c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8004c60:	4638      	mov	r0, r7
 8004c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	6922      	ldr	r2, [r4, #16]
 8004c68:	1a98      	subs	r0, r3, r2
 8004c6a:	6963      	ldr	r3, [r4, #20]
 8004c6c:	b2f6      	uxtb	r6, r6
 8004c6e:	4283      	cmp	r3, r0
 8004c70:	4637      	mov	r7, r6
 8004c72:	dc05      	bgt.n	8004c80 <__swbuf_r+0x4e>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	f002 fdfa 	bl	8007870 <_fflush_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d1ed      	bne.n	8004c5c <__swbuf_r+0x2a>
 8004c80:	68a3      	ldr	r3, [r4, #8]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	6022      	str	r2, [r4, #0]
 8004c8c:	701e      	strb	r6, [r3, #0]
 8004c8e:	6962      	ldr	r2, [r4, #20]
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d004      	beq.n	8004ca0 <__swbuf_r+0x6e>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	07db      	lsls	r3, r3, #31
 8004c9a:	d5e1      	bpl.n	8004c60 <__swbuf_r+0x2e>
 8004c9c:	2e0a      	cmp	r6, #10
 8004c9e:	d1df      	bne.n	8004c60 <__swbuf_r+0x2e>
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f002 fde4 	bl	8007870 <_fflush_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0d9      	beq.n	8004c60 <__swbuf_r+0x2e>
 8004cac:	e7d6      	b.n	8004c5c <__swbuf_r+0x2a>
	...

08004cb0 <__swsetup_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <__swsetup_r+0xa8>)
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	460c      	mov	r4, r1
 8004cba:	b118      	cbz	r0, 8004cc4 <__swsetup_r+0x14>
 8004cbc:	6a03      	ldr	r3, [r0, #32]
 8004cbe:	b90b      	cbnz	r3, 8004cc4 <__swsetup_r+0x14>
 8004cc0:	f7ff fe9c 	bl	80049fc <__sinit>
 8004cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d422      	bmi.n	8004d12 <__swsetup_r+0x62>
 8004ccc:	06da      	lsls	r2, r3, #27
 8004cce:	d407      	bmi.n	8004ce0 <__swsetup_r+0x30>
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e033      	b.n	8004d48 <__swsetup_r+0x98>
 8004ce0:	0758      	lsls	r0, r3, #29
 8004ce2:	d512      	bpl.n	8004d0a <__swsetup_r+0x5a>
 8004ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ce6:	b141      	cbz	r1, 8004cfa <__swsetup_r+0x4a>
 8004ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cec:	4299      	cmp	r1, r3
 8004cee:	d002      	beq.n	8004cf6 <__swsetup_r+0x46>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 ff1d 	bl	8005b30 <_free_r>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	f043 0308 	orr.w	r3, r3, #8
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	b94b      	cbnz	r3, 8004d2a <__swsetup_r+0x7a>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d20:	d003      	beq.n	8004d2a <__swsetup_r+0x7a>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f002 fdf1 	bl	800790c <__smakebuf_r>
 8004d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2e:	f013 0201 	ands.w	r2, r3, #1
 8004d32:	d00a      	beq.n	8004d4a <__swsetup_r+0x9a>
 8004d34:	2200      	movs	r2, #0
 8004d36:	60a2      	str	r2, [r4, #8]
 8004d38:	6962      	ldr	r2, [r4, #20]
 8004d3a:	4252      	negs	r2, r2
 8004d3c:	61a2      	str	r2, [r4, #24]
 8004d3e:	6922      	ldr	r2, [r4, #16]
 8004d40:	b942      	cbnz	r2, 8004d54 <__swsetup_r+0xa4>
 8004d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d46:	d1c5      	bne.n	8004cd4 <__swsetup_r+0x24>
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	0799      	lsls	r1, r3, #30
 8004d4c:	bf58      	it	pl
 8004d4e:	6962      	ldrpl	r2, [r4, #20]
 8004d50:	60a2      	str	r2, [r4, #8]
 8004d52:	e7f4      	b.n	8004d3e <__swsetup_r+0x8e>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7f7      	b.n	8004d48 <__swsetup_r+0x98>
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <memset>:
 8004d5c:	4402      	add	r2, r0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d100      	bne.n	8004d66 <memset+0xa>
 8004d64:	4770      	bx	lr
 8004d66:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6a:	e7f9      	b.n	8004d60 <memset+0x4>

08004d6c <_localeconv_r>:
 8004d6c:	4800      	ldr	r0, [pc, #0]	@ (8004d70 <_localeconv_r+0x4>)
 8004d6e:	4770      	bx	lr
 8004d70:	2000014c 	.word	0x2000014c

08004d74 <_close_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4d06      	ldr	r5, [pc, #24]	@ (8004d90 <_close_r+0x1c>)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	f7fc ffa5 	bl	8001cce <_close>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_close_r+0x1a>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_close_r+0x1a>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	20000330 	.word	0x20000330

08004d94 <_lseek_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4d07      	ldr	r5, [pc, #28]	@ (8004db4 <_lseek_r+0x20>)
 8004d98:	4604      	mov	r4, r0
 8004d9a:	4608      	mov	r0, r1
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	602a      	str	r2, [r5, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f7fc ffba 	bl	8001d1c <_lseek>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_lseek_r+0x1e>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_lseek_r+0x1e>
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	20000330 	.word	0x20000330

08004db8 <_read_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4d07      	ldr	r5, [pc, #28]	@ (8004dd8 <_read_r+0x20>)
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	602a      	str	r2, [r5, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f7fc ff64 	bl	8001c94 <_read>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_read_r+0x1e>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_read_r+0x1e>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	20000330 	.word	0x20000330

08004ddc <_sbrk_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d06      	ldr	r5, [pc, #24]	@ (8004df8 <_sbrk_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fc ffa6 	bl	8001d38 <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_sbrk_r+0x1a>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_sbrk_r+0x1a>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20000330 	.word	0x20000330

08004dfc <_write_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	@ (8004e1c <_write_r+0x20>)
 8004e00:	4604      	mov	r4, r0
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fc ff03 	bl	8001c16 <_write>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_write_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_write_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000330 	.word	0x20000330

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	@ (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000000c 	.word	0x2000000c

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f003 fd18 	bl	8008874 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08026ae4 	.word	0x08026ae4
 8004e68:	08026ae4 	.word	0x08026ae4
 8004e6c:	08026ae4 	.word	0x08026ae4
 8004e70:	08026ae8 	.word	0x08026ae8

08004e74 <__retarget_lock_init_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <__retarget_lock_acquire_recursive>:
 8004e76:	4770      	bx	lr

08004e78 <__retarget_lock_release_recursive>:
 8004e78:	4770      	bx	lr
	...

08004e7c <nanf>:
 8004e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004e84 <nanf+0x8>
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	7fc00000 	.word	0x7fc00000

08004e88 <abort>:
 8004e88:	b508      	push	{r3, lr}
 8004e8a:	2006      	movs	r0, #6
 8004e8c:	f002 fdce 	bl	8007a2c <raise>
 8004e90:	2001      	movs	r0, #1
 8004e92:	f7fc fef4 	bl	8001c7e <_exit>

08004e96 <quorem>:
 8004e96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	6903      	ldr	r3, [r0, #16]
 8004e9c:	690c      	ldr	r4, [r1, #16]
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	db7e      	blt.n	8004fa2 <quorem+0x10c>
 8004ea4:	3c01      	subs	r4, #1
 8004ea6:	f101 0814 	add.w	r8, r1, #20
 8004eaa:	00a3      	lsls	r3, r4, #2
 8004eac:	f100 0514 	add.w	r5, r0, #20
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ecc:	d32e      	bcc.n	8004f2c <quorem+0x96>
 8004ece:	f04f 0a00 	mov.w	sl, #0
 8004ed2:	46c4      	mov	ip, r8
 8004ed4:	46ae      	mov	lr, r5
 8004ed6:	46d3      	mov	fp, sl
 8004ed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004edc:	b298      	uxth	r0, r3
 8004ede:	fb06 a000 	mla	r0, r6, r0, sl
 8004ee2:	0c02      	lsrs	r2, r0, #16
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	fb06 2303 	mla	r3, r6, r3, r2
 8004eea:	f8de 2000 	ldr.w	r2, [lr]
 8004eee:	b280      	uxth	r0, r0
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	1a12      	subs	r2, r2, r0
 8004ef4:	445a      	add	r2, fp
 8004ef6:	f8de 0000 	ldr.w	r0, [lr]
 8004efa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f0e:	45e1      	cmp	r9, ip
 8004f10:	f84e 2b04 	str.w	r2, [lr], #4
 8004f14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f18:	d2de      	bcs.n	8004ed8 <quorem+0x42>
 8004f1a:	9b00      	ldr	r3, [sp, #0]
 8004f1c:	58eb      	ldr	r3, [r5, r3]
 8004f1e:	b92b      	cbnz	r3, 8004f2c <quorem+0x96>
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	3b04      	subs	r3, #4
 8004f24:	429d      	cmp	r5, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	d32f      	bcc.n	8004f8a <quorem+0xf4>
 8004f2a:	613c      	str	r4, [r7, #16]
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f001 f90d 	bl	800614c <__mcmp>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	db25      	blt.n	8004f82 <quorem+0xec>
 8004f36:	4629      	mov	r1, r5
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f3e:	f8d1 c000 	ldr.w	ip, [r1]
 8004f42:	fa1f fe82 	uxth.w	lr, r2
 8004f46:	fa1f f38c 	uxth.w	r3, ip
 8004f4a:	eba3 030e 	sub.w	r3, r3, lr
 8004f4e:	4403      	add	r3, r0
 8004f50:	0c12      	lsrs	r2, r2, #16
 8004f52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f60:	45c1      	cmp	r9, r8
 8004f62:	f841 3b04 	str.w	r3, [r1], #4
 8004f66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f6a:	d2e6      	bcs.n	8004f3a <quorem+0xa4>
 8004f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f74:	b922      	cbnz	r2, 8004f80 <quorem+0xea>
 8004f76:	3b04      	subs	r3, #4
 8004f78:	429d      	cmp	r5, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	d30b      	bcc.n	8004f96 <quorem+0x100>
 8004f7e:	613c      	str	r4, [r7, #16]
 8004f80:	3601      	adds	r6, #1
 8004f82:	4630      	mov	r0, r6
 8004f84:	b003      	add	sp, #12
 8004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d1cb      	bne.n	8004f2a <quorem+0x94>
 8004f92:	3c01      	subs	r4, #1
 8004f94:	e7c6      	b.n	8004f24 <quorem+0x8e>
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d1ef      	bne.n	8004f7e <quorem+0xe8>
 8004f9e:	3c01      	subs	r4, #1
 8004fa0:	e7ea      	b.n	8004f78 <quorem+0xe2>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	e7ee      	b.n	8004f84 <quorem+0xee>
	...

08004fa8 <_dtoa_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	69c7      	ldr	r7, [r0, #28]
 8004fae:	b099      	sub	sp, #100	@ 0x64
 8004fb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004fb4:	ec55 4b10 	vmov	r4, r5, d0
 8004fb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004fba:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fbc:	4683      	mov	fp, r0
 8004fbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004fc2:	b97f      	cbnz	r7, 8004fe4 <_dtoa_r+0x3c>
 8004fc4:	2010      	movs	r0, #16
 8004fc6:	f7fe fd15 	bl	80039f4 <malloc>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8004fd0:	b920      	cbnz	r0, 8004fdc <_dtoa_r+0x34>
 8004fd2:	4ba7      	ldr	r3, [pc, #668]	@ (8005270 <_dtoa_r+0x2c8>)
 8004fd4:	21ef      	movs	r1, #239	@ 0xef
 8004fd6:	48a7      	ldr	r0, [pc, #668]	@ (8005274 <_dtoa_r+0x2cc>)
 8004fd8:	f7fe fcee 	bl	80039b8 <__assert_func>
 8004fdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004fe0:	6007      	str	r7, [r0, #0]
 8004fe2:	60c7      	str	r7, [r0, #12]
 8004fe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	b159      	cbz	r1, 8005004 <_dtoa_r+0x5c>
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	604a      	str	r2, [r1, #4]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4093      	lsls	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	f000 fe24 	bl	8005c44 <_Bfree>
 8004ffc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	1e2b      	subs	r3, r5, #0
 8005006:	bfb9      	ittee	lt
 8005008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800500c:	9303      	strlt	r3, [sp, #12]
 800500e:	2300      	movge	r3, #0
 8005010:	6033      	strge	r3, [r6, #0]
 8005012:	9f03      	ldr	r7, [sp, #12]
 8005014:	4b98      	ldr	r3, [pc, #608]	@ (8005278 <_dtoa_r+0x2d0>)
 8005016:	bfbc      	itt	lt
 8005018:	2201      	movlt	r2, #1
 800501a:	6032      	strlt	r2, [r6, #0]
 800501c:	43bb      	bics	r3, r7
 800501e:	d112      	bne.n	8005046 <_dtoa_r+0x9e>
 8005020:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005022:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800502c:	4323      	orrs	r3, r4
 800502e:	f000 854d 	beq.w	8005acc <_dtoa_r+0xb24>
 8005032:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005034:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800528c <_dtoa_r+0x2e4>
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 854f 	beq.w	8005adc <_dtoa_r+0xb34>
 800503e:	f10a 0303 	add.w	r3, sl, #3
 8005042:	f000 bd49 	b.w	8005ad8 <_dtoa_r+0xb30>
 8005046:	ed9d 7b02 	vldr	d7, [sp, #8]
 800504a:	2200      	movs	r2, #0
 800504c:	ec51 0b17 	vmov	r0, r1, d7
 8005050:	2300      	movs	r3, #0
 8005052:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005056:	f7fb fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800505a:	4680      	mov	r8, r0
 800505c:	b158      	cbz	r0, 8005076 <_dtoa_r+0xce>
 800505e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005060:	2301      	movs	r3, #1
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005066:	b113      	cbz	r3, 800506e <_dtoa_r+0xc6>
 8005068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800506a:	4b84      	ldr	r3, [pc, #528]	@ (800527c <_dtoa_r+0x2d4>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005290 <_dtoa_r+0x2e8>
 8005072:	f000 bd33 	b.w	8005adc <_dtoa_r+0xb34>
 8005076:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800507a:	aa16      	add	r2, sp, #88	@ 0x58
 800507c:	a917      	add	r1, sp, #92	@ 0x5c
 800507e:	4658      	mov	r0, fp
 8005080:	f001 f984 	bl	800638c <__d2b>
 8005084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005088:	4681      	mov	r9, r0
 800508a:	2e00      	cmp	r6, #0
 800508c:	d077      	beq.n	800517e <_dtoa_r+0x1d6>
 800508e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005090:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800509c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050a8:	4619      	mov	r1, r3
 80050aa:	2200      	movs	r2, #0
 80050ac:	4b74      	ldr	r3, [pc, #464]	@ (8005280 <_dtoa_r+0x2d8>)
 80050ae:	f7fb f8eb 	bl	8000288 <__aeabi_dsub>
 80050b2:	a369      	add	r3, pc, #420	@ (adr r3, 8005258 <_dtoa_r+0x2b0>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb fa9e 	bl	80005f8 <__aeabi_dmul>
 80050bc:	a368      	add	r3, pc, #416	@ (adr r3, 8005260 <_dtoa_r+0x2b8>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb f8e3 	bl	800028c <__adddf3>
 80050c6:	4604      	mov	r4, r0
 80050c8:	4630      	mov	r0, r6
 80050ca:	460d      	mov	r5, r1
 80050cc:	f7fb fa2a 	bl	8000524 <__aeabi_i2d>
 80050d0:	a365      	add	r3, pc, #404	@ (adr r3, 8005268 <_dtoa_r+0x2c0>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fa8f 	bl	80005f8 <__aeabi_dmul>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb f8d3 	bl	800028c <__adddf3>
 80050e6:	4604      	mov	r4, r0
 80050e8:	460d      	mov	r5, r1
 80050ea:	f7fb fd35 	bl	8000b58 <__aeabi_d2iz>
 80050ee:	2200      	movs	r2, #0
 80050f0:	4607      	mov	r7, r0
 80050f2:	2300      	movs	r3, #0
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb fcf0 	bl	8000adc <__aeabi_dcmplt>
 80050fc:	b140      	cbz	r0, 8005110 <_dtoa_r+0x168>
 80050fe:	4638      	mov	r0, r7
 8005100:	f7fb fa10 	bl	8000524 <__aeabi_i2d>
 8005104:	4622      	mov	r2, r4
 8005106:	462b      	mov	r3, r5
 8005108:	f7fb fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800510c:	b900      	cbnz	r0, 8005110 <_dtoa_r+0x168>
 800510e:	3f01      	subs	r7, #1
 8005110:	2f16      	cmp	r7, #22
 8005112:	d851      	bhi.n	80051b8 <_dtoa_r+0x210>
 8005114:	4b5b      	ldr	r3, [pc, #364]	@ (8005284 <_dtoa_r+0x2dc>)
 8005116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005122:	f7fb fcdb 	bl	8000adc <__aeabi_dcmplt>
 8005126:	2800      	cmp	r0, #0
 8005128:	d048      	beq.n	80051bc <_dtoa_r+0x214>
 800512a:	3f01      	subs	r7, #1
 800512c:	2300      	movs	r3, #0
 800512e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005130:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005132:	1b9b      	subs	r3, r3, r6
 8005134:	1e5a      	subs	r2, r3, #1
 8005136:	bf44      	itt	mi
 8005138:	f1c3 0801 	rsbmi	r8, r3, #1
 800513c:	2300      	movmi	r3, #0
 800513e:	9208      	str	r2, [sp, #32]
 8005140:	bf54      	ite	pl
 8005142:	f04f 0800 	movpl.w	r8, #0
 8005146:	9308      	strmi	r3, [sp, #32]
 8005148:	2f00      	cmp	r7, #0
 800514a:	db39      	blt.n	80051c0 <_dtoa_r+0x218>
 800514c:	9b08      	ldr	r3, [sp, #32]
 800514e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005150:	443b      	add	r3, r7
 8005152:	9308      	str	r3, [sp, #32]
 8005154:	2300      	movs	r3, #0
 8005156:	930a      	str	r3, [sp, #40]	@ 0x28
 8005158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515a:	2b09      	cmp	r3, #9
 800515c:	d864      	bhi.n	8005228 <_dtoa_r+0x280>
 800515e:	2b05      	cmp	r3, #5
 8005160:	bfc4      	itt	gt
 8005162:	3b04      	subgt	r3, #4
 8005164:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005168:	f1a3 0302 	sub.w	r3, r3, #2
 800516c:	bfcc      	ite	gt
 800516e:	2400      	movgt	r4, #0
 8005170:	2401      	movle	r4, #1
 8005172:	2b03      	cmp	r3, #3
 8005174:	d863      	bhi.n	800523e <_dtoa_r+0x296>
 8005176:	e8df f003 	tbb	[pc, r3]
 800517a:	372a      	.short	0x372a
 800517c:	5535      	.short	0x5535
 800517e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005182:	441e      	add	r6, r3
 8005184:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005188:	2b20      	cmp	r3, #32
 800518a:	bfc1      	itttt	gt
 800518c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005190:	409f      	lslgt	r7, r3
 8005192:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005196:	fa24 f303 	lsrgt.w	r3, r4, r3
 800519a:	bfd6      	itet	le
 800519c:	f1c3 0320 	rsble	r3, r3, #32
 80051a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80051a4:	fa04 f003 	lslle.w	r0, r4, r3
 80051a8:	f7fb f9ac 	bl	8000504 <__aeabi_ui2d>
 80051ac:	2201      	movs	r2, #1
 80051ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051b2:	3e01      	subs	r6, #1
 80051b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80051b6:	e777      	b.n	80050a8 <_dtoa_r+0x100>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7b8      	b.n	800512e <_dtoa_r+0x186>
 80051bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80051be:	e7b7      	b.n	8005130 <_dtoa_r+0x188>
 80051c0:	427b      	negs	r3, r7
 80051c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c4:	2300      	movs	r3, #0
 80051c6:	eba8 0807 	sub.w	r8, r8, r7
 80051ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80051cc:	e7c4      	b.n	8005158 <_dtoa_r+0x1b0>
 80051ce:	2300      	movs	r3, #0
 80051d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dc35      	bgt.n	8005244 <_dtoa_r+0x29c>
 80051d8:	2301      	movs	r3, #1
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	9307      	str	r3, [sp, #28]
 80051de:	461a      	mov	r2, r3
 80051e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80051e2:	e00b      	b.n	80051fc <_dtoa_r+0x254>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e7f3      	b.n	80051d0 <_dtoa_r+0x228>
 80051e8:	2300      	movs	r3, #0
 80051ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	9307      	str	r3, [sp, #28]
 80051f8:	bfb8      	it	lt
 80051fa:	2301      	movlt	r3, #1
 80051fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005200:	2100      	movs	r1, #0
 8005202:	2204      	movs	r2, #4
 8005204:	f102 0514 	add.w	r5, r2, #20
 8005208:	429d      	cmp	r5, r3
 800520a:	d91f      	bls.n	800524c <_dtoa_r+0x2a4>
 800520c:	6041      	str	r1, [r0, #4]
 800520e:	4658      	mov	r0, fp
 8005210:	f000 fcd8 	bl	8005bc4 <_Balloc>
 8005214:	4682      	mov	sl, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d13c      	bne.n	8005294 <_dtoa_r+0x2ec>
 800521a:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <_dtoa_r+0x2e0>)
 800521c:	4602      	mov	r2, r0
 800521e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005222:	e6d8      	b.n	8004fd6 <_dtoa_r+0x2e>
 8005224:	2301      	movs	r3, #1
 8005226:	e7e0      	b.n	80051ea <_dtoa_r+0x242>
 8005228:	2401      	movs	r4, #1
 800522a:	2300      	movs	r3, #0
 800522c:	9309      	str	r3, [sp, #36]	@ 0x24
 800522e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	9307      	str	r3, [sp, #28]
 8005238:	2200      	movs	r2, #0
 800523a:	2312      	movs	r3, #18
 800523c:	e7d0      	b.n	80051e0 <_dtoa_r+0x238>
 800523e:	2301      	movs	r3, #1
 8005240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005242:	e7f5      	b.n	8005230 <_dtoa_r+0x288>
 8005244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	9307      	str	r3, [sp, #28]
 800524a:	e7d7      	b.n	80051fc <_dtoa_r+0x254>
 800524c:	3101      	adds	r1, #1
 800524e:	0052      	lsls	r2, r2, #1
 8005250:	e7d8      	b.n	8005204 <_dtoa_r+0x25c>
 8005252:	bf00      	nop
 8005254:	f3af 8000 	nop.w
 8005258:	636f4361 	.word	0x636f4361
 800525c:	3fd287a7 	.word	0x3fd287a7
 8005260:	8b60c8b3 	.word	0x8b60c8b3
 8005264:	3fc68a28 	.word	0x3fc68a28
 8005268:	509f79fb 	.word	0x509f79fb
 800526c:	3fd34413 	.word	0x3fd34413
 8005270:	08026716 	.word	0x08026716
 8005274:	0802672d 	.word	0x0802672d
 8005278:	7ff00000 	.word	0x7ff00000
 800527c:	080266e1 	.word	0x080266e1
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	08026828 	.word	0x08026828
 8005288:	08026785 	.word	0x08026785
 800528c:	08026712 	.word	0x08026712
 8005290:	080266e0 	.word	0x080266e0
 8005294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005298:	6018      	str	r0, [r3, #0]
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	2b0e      	cmp	r3, #14
 800529e:	f200 80a4 	bhi.w	80053ea <_dtoa_r+0x442>
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	f000 80a1 	beq.w	80053ea <_dtoa_r+0x442>
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	dd33      	ble.n	8005314 <_dtoa_r+0x36c>
 80052ac:	4bad      	ldr	r3, [pc, #692]	@ (8005564 <_dtoa_r+0x5bc>)
 80052ae:	f007 020f 	and.w	r2, r7, #15
 80052b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b6:	ed93 7b00 	vldr	d7, [r3]
 80052ba:	05f8      	lsls	r0, r7, #23
 80052bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80052c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052c4:	d516      	bpl.n	80052f4 <_dtoa_r+0x34c>
 80052c6:	4ba8      	ldr	r3, [pc, #672]	@ (8005568 <_dtoa_r+0x5c0>)
 80052c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052d0:	f7fb fabc 	bl	800084c <__aeabi_ddiv>
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	f004 040f 	and.w	r4, r4, #15
 80052dc:	2603      	movs	r6, #3
 80052de:	4da2      	ldr	r5, [pc, #648]	@ (8005568 <_dtoa_r+0x5c0>)
 80052e0:	b954      	cbnz	r4, 80052f8 <_dtoa_r+0x350>
 80052e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ea:	f7fb faaf 	bl	800084c <__aeabi_ddiv>
 80052ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f2:	e028      	b.n	8005346 <_dtoa_r+0x39e>
 80052f4:	2602      	movs	r6, #2
 80052f6:	e7f2      	b.n	80052de <_dtoa_r+0x336>
 80052f8:	07e1      	lsls	r1, r4, #31
 80052fa:	d508      	bpl.n	800530e <_dtoa_r+0x366>
 80052fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005300:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005304:	f7fb f978 	bl	80005f8 <__aeabi_dmul>
 8005308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800530c:	3601      	adds	r6, #1
 800530e:	1064      	asrs	r4, r4, #1
 8005310:	3508      	adds	r5, #8
 8005312:	e7e5      	b.n	80052e0 <_dtoa_r+0x338>
 8005314:	f000 80d2 	beq.w	80054bc <_dtoa_r+0x514>
 8005318:	427c      	negs	r4, r7
 800531a:	4b92      	ldr	r3, [pc, #584]	@ (8005564 <_dtoa_r+0x5bc>)
 800531c:	4d92      	ldr	r5, [pc, #584]	@ (8005568 <_dtoa_r+0x5c0>)
 800531e:	f004 020f 	and.w	r2, r4, #15
 8005322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800532e:	f7fb f963 	bl	80005f8 <__aeabi_dmul>
 8005332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005336:	1124      	asrs	r4, r4, #4
 8005338:	2300      	movs	r3, #0
 800533a:	2602      	movs	r6, #2
 800533c:	2c00      	cmp	r4, #0
 800533e:	f040 80b2 	bne.w	80054a6 <_dtoa_r+0x4fe>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d3      	bne.n	80052ee <_dtoa_r+0x346>
 8005346:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005348:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80b7 	beq.w	80054c0 <_dtoa_r+0x518>
 8005352:	4b86      	ldr	r3, [pc, #536]	@ (800556c <_dtoa_r+0x5c4>)
 8005354:	2200      	movs	r2, #0
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb fbbf 	bl	8000adc <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	f000 80ae 	beq.w	80054c0 <_dtoa_r+0x518>
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80aa 	beq.w	80054c0 <_dtoa_r+0x518>
 800536c:	9b00      	ldr	r3, [sp, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd37      	ble.n	80053e2 <_dtoa_r+0x43a>
 8005372:	1e7b      	subs	r3, r7, #1
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	4620      	mov	r0, r4
 8005378:	4b7d      	ldr	r3, [pc, #500]	@ (8005570 <_dtoa_r+0x5c8>)
 800537a:	2200      	movs	r2, #0
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb f93b 	bl	80005f8 <__aeabi_dmul>
 8005382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005386:	9c00      	ldr	r4, [sp, #0]
 8005388:	3601      	adds	r6, #1
 800538a:	4630      	mov	r0, r6
 800538c:	f7fb f8ca 	bl	8000524 <__aeabi_i2d>
 8005390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005394:	f7fb f930 	bl	80005f8 <__aeabi_dmul>
 8005398:	4b76      	ldr	r3, [pc, #472]	@ (8005574 <_dtoa_r+0x5cc>)
 800539a:	2200      	movs	r2, #0
 800539c:	f7fa ff76 	bl	800028c <__adddf3>
 80053a0:	4605      	mov	r5, r0
 80053a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	f040 808d 	bne.w	80054c6 <_dtoa_r+0x51e>
 80053ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b0:	4b71      	ldr	r3, [pc, #452]	@ (8005578 <_dtoa_r+0x5d0>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	f7fa ff68 	bl	8000288 <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053c0:	462a      	mov	r2, r5
 80053c2:	4633      	mov	r3, r6
 80053c4:	f7fb fba8 	bl	8000b18 <__aeabi_dcmpgt>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f040 828b 	bne.w	80058e4 <_dtoa_r+0x93c>
 80053ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d2:	462a      	mov	r2, r5
 80053d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053d8:	f7fb fb80 	bl	8000adc <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f040 8128 	bne.w	8005632 <_dtoa_r+0x68a>
 80053e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80053e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f2c0 815a 	blt.w	80056a6 <_dtoa_r+0x6fe>
 80053f2:	2f0e      	cmp	r7, #14
 80053f4:	f300 8157 	bgt.w	80056a6 <_dtoa_r+0x6fe>
 80053f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005564 <_dtoa_r+0x5bc>)
 80053fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053fe:	ed93 7b00 	vldr	d7, [r3]
 8005402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	ed8d 7b00 	vstr	d7, [sp]
 800540a:	da03      	bge.n	8005414 <_dtoa_r+0x46c>
 800540c:	9b07      	ldr	r3, [sp, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f340 8101 	ble.w	8005616 <_dtoa_r+0x66e>
 8005414:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005418:	4656      	mov	r6, sl
 800541a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb fa13 	bl	800084c <__aeabi_ddiv>
 8005426:	f7fb fb97 	bl	8000b58 <__aeabi_d2iz>
 800542a:	4680      	mov	r8, r0
 800542c:	f7fb f87a 	bl	8000524 <__aeabi_i2d>
 8005430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005434:	f7fb f8e0 	bl	80005f8 <__aeabi_dmul>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005444:	f7fa ff20 	bl	8000288 <__aeabi_dsub>
 8005448:	f806 4b01 	strb.w	r4, [r6], #1
 800544c:	9d07      	ldr	r5, [sp, #28]
 800544e:	eba6 040a 	sub.w	r4, r6, sl
 8005452:	42a5      	cmp	r5, r4
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	f040 8117 	bne.w	800568a <_dtoa_r+0x6e2>
 800545c:	f7fa ff16 	bl	800028c <__adddf3>
 8005460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005464:	4604      	mov	r4, r0
 8005466:	460d      	mov	r5, r1
 8005468:	f7fb fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800546c:	2800      	cmp	r0, #0
 800546e:	f040 80f9 	bne.w	8005664 <_dtoa_r+0x6bc>
 8005472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fb fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800547e:	b118      	cbz	r0, 8005488 <_dtoa_r+0x4e0>
 8005480:	f018 0f01 	tst.w	r8, #1
 8005484:	f040 80ee 	bne.w	8005664 <_dtoa_r+0x6bc>
 8005488:	4649      	mov	r1, r9
 800548a:	4658      	mov	r0, fp
 800548c:	f000 fbda 	bl	8005c44 <_Bfree>
 8005490:	2300      	movs	r3, #0
 8005492:	7033      	strb	r3, [r6, #0]
 8005494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005496:	3701      	adds	r7, #1
 8005498:	601f      	str	r7, [r3, #0]
 800549a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 831d 	beq.w	8005adc <_dtoa_r+0xb34>
 80054a2:	601e      	str	r6, [r3, #0]
 80054a4:	e31a      	b.n	8005adc <_dtoa_r+0xb34>
 80054a6:	07e2      	lsls	r2, r4, #31
 80054a8:	d505      	bpl.n	80054b6 <_dtoa_r+0x50e>
 80054aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_dmul>
 80054b2:	3601      	adds	r6, #1
 80054b4:	2301      	movs	r3, #1
 80054b6:	1064      	asrs	r4, r4, #1
 80054b8:	3508      	adds	r5, #8
 80054ba:	e73f      	b.n	800533c <_dtoa_r+0x394>
 80054bc:	2602      	movs	r6, #2
 80054be:	e742      	b.n	8005346 <_dtoa_r+0x39e>
 80054c0:	9c07      	ldr	r4, [sp, #28]
 80054c2:	9704      	str	r7, [sp, #16]
 80054c4:	e761      	b.n	800538a <_dtoa_r+0x3e2>
 80054c6:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <_dtoa_r+0x5bc>)
 80054c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054d2:	4454      	add	r4, sl
 80054d4:	2900      	cmp	r1, #0
 80054d6:	d053      	beq.n	8005580 <_dtoa_r+0x5d8>
 80054d8:	4928      	ldr	r1, [pc, #160]	@ (800557c <_dtoa_r+0x5d4>)
 80054da:	2000      	movs	r0, #0
 80054dc:	f7fb f9b6 	bl	800084c <__aeabi_ddiv>
 80054e0:	4633      	mov	r3, r6
 80054e2:	462a      	mov	r2, r5
 80054e4:	f7fa fed0 	bl	8000288 <__aeabi_dsub>
 80054e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054ec:	4656      	mov	r6, sl
 80054ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f2:	f7fb fb31 	bl	8000b58 <__aeabi_d2iz>
 80054f6:	4605      	mov	r5, r0
 80054f8:	f7fb f814 	bl	8000524 <__aeabi_i2d>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005504:	f7fa fec0 	bl	8000288 <__aeabi_dsub>
 8005508:	3530      	adds	r5, #48	@ 0x30
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005512:	f806 5b01 	strb.w	r5, [r6], #1
 8005516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800551a:	f7fb fadf 	bl	8000adc <__aeabi_dcmplt>
 800551e:	2800      	cmp	r0, #0
 8005520:	d171      	bne.n	8005606 <_dtoa_r+0x65e>
 8005522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005526:	4911      	ldr	r1, [pc, #68]	@ (800556c <_dtoa_r+0x5c4>)
 8005528:	2000      	movs	r0, #0
 800552a:	f7fa fead 	bl	8000288 <__aeabi_dsub>
 800552e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005532:	f7fb fad3 	bl	8000adc <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	f040 8095 	bne.w	8005666 <_dtoa_r+0x6be>
 800553c:	42a6      	cmp	r6, r4
 800553e:	f43f af50 	beq.w	80053e2 <_dtoa_r+0x43a>
 8005542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005546:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <_dtoa_r+0x5c8>)
 8005548:	2200      	movs	r2, #0
 800554a:	f7fb f855 	bl	80005f8 <__aeabi_dmul>
 800554e:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <_dtoa_r+0x5c8>)
 8005550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005554:	2200      	movs	r2, #0
 8005556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555a:	f7fb f84d 	bl	80005f8 <__aeabi_dmul>
 800555e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005562:	e7c4      	b.n	80054ee <_dtoa_r+0x546>
 8005564:	08026828 	.word	0x08026828
 8005568:	08026800 	.word	0x08026800
 800556c:	3ff00000 	.word	0x3ff00000
 8005570:	40240000 	.word	0x40240000
 8005574:	401c0000 	.word	0x401c0000
 8005578:	40140000 	.word	0x40140000
 800557c:	3fe00000 	.word	0x3fe00000
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	f7fb f838 	bl	80005f8 <__aeabi_dmul>
 8005588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800558c:	9415      	str	r4, [sp, #84]	@ 0x54
 800558e:	4656      	mov	r6, sl
 8005590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005594:	f7fb fae0 	bl	8000b58 <__aeabi_d2iz>
 8005598:	4605      	mov	r5, r0
 800559a:	f7fa ffc3 	bl	8000524 <__aeabi_i2d>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a6:	f7fa fe6f 	bl	8000288 <__aeabi_dsub>
 80055aa:	3530      	adds	r5, #48	@ 0x30
 80055ac:	f806 5b01 	strb.w	r5, [r6], #1
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	d124      	bne.n	800560a <_dtoa_r+0x662>
 80055c0:	4bac      	ldr	r3, [pc, #688]	@ (8005874 <_dtoa_r+0x8cc>)
 80055c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055c6:	f7fa fe61 	bl	800028c <__adddf3>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d2:	f7fb faa1 	bl	8000b18 <__aeabi_dcmpgt>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d145      	bne.n	8005666 <_dtoa_r+0x6be>
 80055da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055de:	49a5      	ldr	r1, [pc, #660]	@ (8005874 <_dtoa_r+0x8cc>)
 80055e0:	2000      	movs	r0, #0
 80055e2:	f7fa fe51 	bl	8000288 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ee:	f7fb fa75 	bl	8000adc <__aeabi_dcmplt>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f43f aef5 	beq.w	80053e2 <_dtoa_r+0x43a>
 80055f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80055fa:	1e73      	subs	r3, r6, #1
 80055fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80055fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005602:	2b30      	cmp	r3, #48	@ 0x30
 8005604:	d0f8      	beq.n	80055f8 <_dtoa_r+0x650>
 8005606:	9f04      	ldr	r7, [sp, #16]
 8005608:	e73e      	b.n	8005488 <_dtoa_r+0x4e0>
 800560a:	4b9b      	ldr	r3, [pc, #620]	@ (8005878 <_dtoa_r+0x8d0>)
 800560c:	f7fa fff4 	bl	80005f8 <__aeabi_dmul>
 8005610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005614:	e7bc      	b.n	8005590 <_dtoa_r+0x5e8>
 8005616:	d10c      	bne.n	8005632 <_dtoa_r+0x68a>
 8005618:	4b98      	ldr	r3, [pc, #608]	@ (800587c <_dtoa_r+0x8d4>)
 800561a:	2200      	movs	r2, #0
 800561c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005620:	f7fa ffea 	bl	80005f8 <__aeabi_dmul>
 8005624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005628:	f7fb fa6c 	bl	8000b04 <__aeabi_dcmpge>
 800562c:	2800      	cmp	r0, #0
 800562e:	f000 8157 	beq.w	80058e0 <_dtoa_r+0x938>
 8005632:	2400      	movs	r4, #0
 8005634:	4625      	mov	r5, r4
 8005636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005638:	43db      	mvns	r3, r3
 800563a:	9304      	str	r3, [sp, #16]
 800563c:	4656      	mov	r6, sl
 800563e:	2700      	movs	r7, #0
 8005640:	4621      	mov	r1, r4
 8005642:	4658      	mov	r0, fp
 8005644:	f000 fafe 	bl	8005c44 <_Bfree>
 8005648:	2d00      	cmp	r5, #0
 800564a:	d0dc      	beq.n	8005606 <_dtoa_r+0x65e>
 800564c:	b12f      	cbz	r7, 800565a <_dtoa_r+0x6b2>
 800564e:	42af      	cmp	r7, r5
 8005650:	d003      	beq.n	800565a <_dtoa_r+0x6b2>
 8005652:	4639      	mov	r1, r7
 8005654:	4658      	mov	r0, fp
 8005656:	f000 faf5 	bl	8005c44 <_Bfree>
 800565a:	4629      	mov	r1, r5
 800565c:	4658      	mov	r0, fp
 800565e:	f000 faf1 	bl	8005c44 <_Bfree>
 8005662:	e7d0      	b.n	8005606 <_dtoa_r+0x65e>
 8005664:	9704      	str	r7, [sp, #16]
 8005666:	4633      	mov	r3, r6
 8005668:	461e      	mov	r6, r3
 800566a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800566e:	2a39      	cmp	r2, #57	@ 0x39
 8005670:	d107      	bne.n	8005682 <_dtoa_r+0x6da>
 8005672:	459a      	cmp	sl, r3
 8005674:	d1f8      	bne.n	8005668 <_dtoa_r+0x6c0>
 8005676:	9a04      	ldr	r2, [sp, #16]
 8005678:	3201      	adds	r2, #1
 800567a:	9204      	str	r2, [sp, #16]
 800567c:	2230      	movs	r2, #48	@ 0x30
 800567e:	f88a 2000 	strb.w	r2, [sl]
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	3201      	adds	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e7bd      	b.n	8005606 <_dtoa_r+0x65e>
 800568a:	4b7b      	ldr	r3, [pc, #492]	@ (8005878 <_dtoa_r+0x8d0>)
 800568c:	2200      	movs	r2, #0
 800568e:	f7fa ffb3 	bl	80005f8 <__aeabi_dmul>
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	460d      	mov	r5, r1
 800569a:	f7fb fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800569e:	2800      	cmp	r0, #0
 80056a0:	f43f aebb 	beq.w	800541a <_dtoa_r+0x472>
 80056a4:	e6f0      	b.n	8005488 <_dtoa_r+0x4e0>
 80056a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	f000 80db 	beq.w	8005864 <_dtoa_r+0x8bc>
 80056ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056b0:	2a01      	cmp	r2, #1
 80056b2:	f300 80bf 	bgt.w	8005834 <_dtoa_r+0x88c>
 80056b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	f000 80b7 	beq.w	800582c <_dtoa_r+0x884>
 80056be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056c4:	4646      	mov	r6, r8
 80056c6:	9a08      	ldr	r2, [sp, #32]
 80056c8:	2101      	movs	r1, #1
 80056ca:	441a      	add	r2, r3
 80056cc:	4658      	mov	r0, fp
 80056ce:	4498      	add	r8, r3
 80056d0:	9208      	str	r2, [sp, #32]
 80056d2:	f000 fbb5 	bl	8005e40 <__i2b>
 80056d6:	4605      	mov	r5, r0
 80056d8:	b15e      	cbz	r6, 80056f2 <_dtoa_r+0x74a>
 80056da:	9b08      	ldr	r3, [sp, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dd08      	ble.n	80056f2 <_dtoa_r+0x74a>
 80056e0:	42b3      	cmp	r3, r6
 80056e2:	9a08      	ldr	r2, [sp, #32]
 80056e4:	bfa8      	it	ge
 80056e6:	4633      	movge	r3, r6
 80056e8:	eba8 0803 	sub.w	r8, r8, r3
 80056ec:	1af6      	subs	r6, r6, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	9308      	str	r3, [sp, #32]
 80056f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f4:	b1f3      	cbz	r3, 8005734 <_dtoa_r+0x78c>
 80056f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80b7 	beq.w	800586c <_dtoa_r+0x8c4>
 80056fe:	b18c      	cbz	r4, 8005724 <_dtoa_r+0x77c>
 8005700:	4629      	mov	r1, r5
 8005702:	4622      	mov	r2, r4
 8005704:	4658      	mov	r0, fp
 8005706:	f000 fc5b 	bl	8005fc0 <__pow5mult>
 800570a:	464a      	mov	r2, r9
 800570c:	4601      	mov	r1, r0
 800570e:	4605      	mov	r5, r0
 8005710:	4658      	mov	r0, fp
 8005712:	f000 fbab 	bl	8005e6c <__multiply>
 8005716:	4649      	mov	r1, r9
 8005718:	9004      	str	r0, [sp, #16]
 800571a:	4658      	mov	r0, fp
 800571c:	f000 fa92 	bl	8005c44 <_Bfree>
 8005720:	9b04      	ldr	r3, [sp, #16]
 8005722:	4699      	mov	r9, r3
 8005724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005726:	1b1a      	subs	r2, r3, r4
 8005728:	d004      	beq.n	8005734 <_dtoa_r+0x78c>
 800572a:	4649      	mov	r1, r9
 800572c:	4658      	mov	r0, fp
 800572e:	f000 fc47 	bl	8005fc0 <__pow5mult>
 8005732:	4681      	mov	r9, r0
 8005734:	2101      	movs	r1, #1
 8005736:	4658      	mov	r0, fp
 8005738:	f000 fb82 	bl	8005e40 <__i2b>
 800573c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800573e:	4604      	mov	r4, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 81cf 	beq.w	8005ae4 <_dtoa_r+0xb3c>
 8005746:	461a      	mov	r2, r3
 8005748:	4601      	mov	r1, r0
 800574a:	4658      	mov	r0, fp
 800574c:	f000 fc38 	bl	8005fc0 <__pow5mult>
 8005750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005752:	2b01      	cmp	r3, #1
 8005754:	4604      	mov	r4, r0
 8005756:	f300 8095 	bgt.w	8005884 <_dtoa_r+0x8dc>
 800575a:	9b02      	ldr	r3, [sp, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 8087 	bne.w	8005870 <_dtoa_r+0x8c8>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005768:	2b00      	cmp	r3, #0
 800576a:	f040 8089 	bne.w	8005880 <_dtoa_r+0x8d8>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005774:	0d1b      	lsrs	r3, r3, #20
 8005776:	051b      	lsls	r3, r3, #20
 8005778:	b12b      	cbz	r3, 8005786 <_dtoa_r+0x7de>
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	3301      	adds	r3, #1
 800577e:	9308      	str	r3, [sp, #32]
 8005780:	f108 0801 	add.w	r8, r8, #1
 8005784:	2301      	movs	r3, #1
 8005786:	930a      	str	r3, [sp, #40]	@ 0x28
 8005788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81b0 	beq.w	8005af0 <_dtoa_r+0xb48>
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005796:	6918      	ldr	r0, [r3, #16]
 8005798:	f000 fb06 	bl	8005da8 <__hi0bits>
 800579c:	f1c0 0020 	rsb	r0, r0, #32
 80057a0:	9b08      	ldr	r3, [sp, #32]
 80057a2:	4418      	add	r0, r3
 80057a4:	f010 001f 	ands.w	r0, r0, #31
 80057a8:	d077      	beq.n	800589a <_dtoa_r+0x8f2>
 80057aa:	f1c0 0320 	rsb	r3, r0, #32
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	dd6b      	ble.n	800588a <_dtoa_r+0x8e2>
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	f1c0 001c 	rsb	r0, r0, #28
 80057b8:	4403      	add	r3, r0
 80057ba:	4480      	add	r8, r0
 80057bc:	4406      	add	r6, r0
 80057be:	9308      	str	r3, [sp, #32]
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	dd05      	ble.n	80057d2 <_dtoa_r+0x82a>
 80057c6:	4649      	mov	r1, r9
 80057c8:	4642      	mov	r2, r8
 80057ca:	4658      	mov	r0, fp
 80057cc:	f000 fc52 	bl	8006074 <__lshift>
 80057d0:	4681      	mov	r9, r0
 80057d2:	9b08      	ldr	r3, [sp, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dd05      	ble.n	80057e4 <_dtoa_r+0x83c>
 80057d8:	4621      	mov	r1, r4
 80057da:	461a      	mov	r2, r3
 80057dc:	4658      	mov	r0, fp
 80057de:	f000 fc49 	bl	8006074 <__lshift>
 80057e2:	4604      	mov	r4, r0
 80057e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d059      	beq.n	800589e <_dtoa_r+0x8f6>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4648      	mov	r0, r9
 80057ee:	f000 fcad 	bl	800614c <__mcmp>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	da53      	bge.n	800589e <_dtoa_r+0x8f6>
 80057f6:	1e7b      	subs	r3, r7, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	4649      	mov	r1, r9
 80057fc:	2300      	movs	r3, #0
 80057fe:	220a      	movs	r2, #10
 8005800:	4658      	mov	r0, fp
 8005802:	f000 fa41 	bl	8005c88 <__multadd>
 8005806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005808:	4681      	mov	r9, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8172 	beq.w	8005af4 <_dtoa_r+0xb4c>
 8005810:	2300      	movs	r3, #0
 8005812:	4629      	mov	r1, r5
 8005814:	220a      	movs	r2, #10
 8005816:	4658      	mov	r0, fp
 8005818:	f000 fa36 	bl	8005c88 <__multadd>
 800581c:	9b00      	ldr	r3, [sp, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	4605      	mov	r5, r0
 8005822:	dc67      	bgt.n	80058f4 <_dtoa_r+0x94c>
 8005824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005826:	2b02      	cmp	r3, #2
 8005828:	dc41      	bgt.n	80058ae <_dtoa_r+0x906>
 800582a:	e063      	b.n	80058f4 <_dtoa_r+0x94c>
 800582c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800582e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005832:	e746      	b.n	80056c2 <_dtoa_r+0x71a>
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	1e5c      	subs	r4, r3, #1
 8005838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800583a:	42a3      	cmp	r3, r4
 800583c:	bfbf      	itttt	lt
 800583e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005840:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005842:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005844:	1ae3      	sublt	r3, r4, r3
 8005846:	bfb4      	ite	lt
 8005848:	18d2      	addlt	r2, r2, r3
 800584a:	1b1c      	subge	r4, r3, r4
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	bfbc      	itt	lt
 8005850:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005852:	2400      	movlt	r4, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	bfb5      	itete	lt
 8005858:	eba8 0603 	sublt.w	r6, r8, r3
 800585c:	9b07      	ldrge	r3, [sp, #28]
 800585e:	2300      	movlt	r3, #0
 8005860:	4646      	movge	r6, r8
 8005862:	e730      	b.n	80056c6 <_dtoa_r+0x71e>
 8005864:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005866:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005868:	4646      	mov	r6, r8
 800586a:	e735      	b.n	80056d8 <_dtoa_r+0x730>
 800586c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800586e:	e75c      	b.n	800572a <_dtoa_r+0x782>
 8005870:	2300      	movs	r3, #0
 8005872:	e788      	b.n	8005786 <_dtoa_r+0x7de>
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	40240000 	.word	0x40240000
 800587c:	40140000 	.word	0x40140000
 8005880:	9b02      	ldr	r3, [sp, #8]
 8005882:	e780      	b.n	8005786 <_dtoa_r+0x7de>
 8005884:	2300      	movs	r3, #0
 8005886:	930a      	str	r3, [sp, #40]	@ 0x28
 8005888:	e782      	b.n	8005790 <_dtoa_r+0x7e8>
 800588a:	d099      	beq.n	80057c0 <_dtoa_r+0x818>
 800588c:	9a08      	ldr	r2, [sp, #32]
 800588e:	331c      	adds	r3, #28
 8005890:	441a      	add	r2, r3
 8005892:	4498      	add	r8, r3
 8005894:	441e      	add	r6, r3
 8005896:	9208      	str	r2, [sp, #32]
 8005898:	e792      	b.n	80057c0 <_dtoa_r+0x818>
 800589a:	4603      	mov	r3, r0
 800589c:	e7f6      	b.n	800588c <_dtoa_r+0x8e4>
 800589e:	9b07      	ldr	r3, [sp, #28]
 80058a0:	9704      	str	r7, [sp, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dc20      	bgt.n	80058e8 <_dtoa_r+0x940>
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	dd1e      	ble.n	80058ec <_dtoa_r+0x944>
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f47f aec0 	bne.w	8005636 <_dtoa_r+0x68e>
 80058b6:	4621      	mov	r1, r4
 80058b8:	2205      	movs	r2, #5
 80058ba:	4658      	mov	r0, fp
 80058bc:	f000 f9e4 	bl	8005c88 <__multadd>
 80058c0:	4601      	mov	r1, r0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4648      	mov	r0, r9
 80058c6:	f000 fc41 	bl	800614c <__mcmp>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f77f aeb3 	ble.w	8005636 <_dtoa_r+0x68e>
 80058d0:	4656      	mov	r6, sl
 80058d2:	2331      	movs	r3, #49	@ 0x31
 80058d4:	f806 3b01 	strb.w	r3, [r6], #1
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	3301      	adds	r3, #1
 80058dc:	9304      	str	r3, [sp, #16]
 80058de:	e6ae      	b.n	800563e <_dtoa_r+0x696>
 80058e0:	9c07      	ldr	r4, [sp, #28]
 80058e2:	9704      	str	r7, [sp, #16]
 80058e4:	4625      	mov	r5, r4
 80058e6:	e7f3      	b.n	80058d0 <_dtoa_r+0x928>
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8104 	beq.w	8005afc <_dtoa_r+0xb54>
 80058f4:	2e00      	cmp	r6, #0
 80058f6:	dd05      	ble.n	8005904 <_dtoa_r+0x95c>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4632      	mov	r2, r6
 80058fc:	4658      	mov	r0, fp
 80058fe:	f000 fbb9 	bl	8006074 <__lshift>
 8005902:	4605      	mov	r5, r0
 8005904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d05a      	beq.n	80059c0 <_dtoa_r+0xa18>
 800590a:	6869      	ldr	r1, [r5, #4]
 800590c:	4658      	mov	r0, fp
 800590e:	f000 f959 	bl	8005bc4 <_Balloc>
 8005912:	4606      	mov	r6, r0
 8005914:	b928      	cbnz	r0, 8005922 <_dtoa_r+0x97a>
 8005916:	4b84      	ldr	r3, [pc, #528]	@ (8005b28 <_dtoa_r+0xb80>)
 8005918:	4602      	mov	r2, r0
 800591a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800591e:	f7ff bb5a 	b.w	8004fd6 <_dtoa_r+0x2e>
 8005922:	692a      	ldr	r2, [r5, #16]
 8005924:	3202      	adds	r2, #2
 8005926:	0092      	lsls	r2, r2, #2
 8005928:	f105 010c 	add.w	r1, r5, #12
 800592c:	300c      	adds	r0, #12
 800592e:	f002 f8bb 	bl	8007aa8 <memcpy>
 8005932:	2201      	movs	r2, #1
 8005934:	4631      	mov	r1, r6
 8005936:	4658      	mov	r0, fp
 8005938:	f000 fb9c 	bl	8006074 <__lshift>
 800593c:	f10a 0301 	add.w	r3, sl, #1
 8005940:	9307      	str	r3, [sp, #28]
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	4453      	add	r3, sl
 8005946:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	462f      	mov	r7, r5
 8005950:	930a      	str	r3, [sp, #40]	@ 0x28
 8005952:	4605      	mov	r5, r0
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	4621      	mov	r1, r4
 8005958:	3b01      	subs	r3, #1
 800595a:	4648      	mov	r0, r9
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	f7ff fa9a 	bl	8004e96 <quorem>
 8005962:	4639      	mov	r1, r7
 8005964:	9002      	str	r0, [sp, #8]
 8005966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800596a:	4648      	mov	r0, r9
 800596c:	f000 fbee 	bl	800614c <__mcmp>
 8005970:	462a      	mov	r2, r5
 8005972:	9008      	str	r0, [sp, #32]
 8005974:	4621      	mov	r1, r4
 8005976:	4658      	mov	r0, fp
 8005978:	f000 fc04 	bl	8006184 <__mdiff>
 800597c:	68c2      	ldr	r2, [r0, #12]
 800597e:	4606      	mov	r6, r0
 8005980:	bb02      	cbnz	r2, 80059c4 <_dtoa_r+0xa1c>
 8005982:	4601      	mov	r1, r0
 8005984:	4648      	mov	r0, r9
 8005986:	f000 fbe1 	bl	800614c <__mcmp>
 800598a:	4602      	mov	r2, r0
 800598c:	4631      	mov	r1, r6
 800598e:	4658      	mov	r0, fp
 8005990:	920e      	str	r2, [sp, #56]	@ 0x38
 8005992:	f000 f957 	bl	8005c44 <_Bfree>
 8005996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800599a:	9e07      	ldr	r6, [sp, #28]
 800599c:	ea43 0102 	orr.w	r1, r3, r2
 80059a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a2:	4319      	orrs	r1, r3
 80059a4:	d110      	bne.n	80059c8 <_dtoa_r+0xa20>
 80059a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059aa:	d029      	beq.n	8005a00 <_dtoa_r+0xa58>
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	dd02      	ble.n	80059b8 <_dtoa_r+0xa10>
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059b8:	9b00      	ldr	r3, [sp, #0]
 80059ba:	f883 8000 	strb.w	r8, [r3]
 80059be:	e63f      	b.n	8005640 <_dtoa_r+0x698>
 80059c0:	4628      	mov	r0, r5
 80059c2:	e7bb      	b.n	800593c <_dtoa_r+0x994>
 80059c4:	2201      	movs	r2, #1
 80059c6:	e7e1      	b.n	800598c <_dtoa_r+0x9e4>
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	db04      	blt.n	80059d8 <_dtoa_r+0xa30>
 80059ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059d0:	430b      	orrs	r3, r1
 80059d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d4:	430b      	orrs	r3, r1
 80059d6:	d120      	bne.n	8005a1a <_dtoa_r+0xa72>
 80059d8:	2a00      	cmp	r2, #0
 80059da:	dded      	ble.n	80059b8 <_dtoa_r+0xa10>
 80059dc:	4649      	mov	r1, r9
 80059de:	2201      	movs	r2, #1
 80059e0:	4658      	mov	r0, fp
 80059e2:	f000 fb47 	bl	8006074 <__lshift>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4681      	mov	r9, r0
 80059ea:	f000 fbaf 	bl	800614c <__mcmp>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	dc03      	bgt.n	80059fa <_dtoa_r+0xa52>
 80059f2:	d1e1      	bne.n	80059b8 <_dtoa_r+0xa10>
 80059f4:	f018 0f01 	tst.w	r8, #1
 80059f8:	d0de      	beq.n	80059b8 <_dtoa_r+0xa10>
 80059fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059fe:	d1d8      	bne.n	80059b2 <_dtoa_r+0xa0a>
 8005a00:	9a00      	ldr	r2, [sp, #0]
 8005a02:	2339      	movs	r3, #57	@ 0x39
 8005a04:	7013      	strb	r3, [r2, #0]
 8005a06:	4633      	mov	r3, r6
 8005a08:	461e      	mov	r6, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a10:	2a39      	cmp	r2, #57	@ 0x39
 8005a12:	d052      	beq.n	8005aba <_dtoa_r+0xb12>
 8005a14:	3201      	adds	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e612      	b.n	8005640 <_dtoa_r+0x698>
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	dd07      	ble.n	8005a2e <_dtoa_r+0xa86>
 8005a1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a22:	d0ed      	beq.n	8005a00 <_dtoa_r+0xa58>
 8005a24:	9a00      	ldr	r2, [sp, #0]
 8005a26:	f108 0301 	add.w	r3, r8, #1
 8005a2a:	7013      	strb	r3, [r2, #0]
 8005a2c:	e608      	b.n	8005640 <_dtoa_r+0x698>
 8005a2e:	9b07      	ldr	r3, [sp, #28]
 8005a30:	9a07      	ldr	r2, [sp, #28]
 8005a32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d028      	beq.n	8005a8e <_dtoa_r+0xae6>
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	2300      	movs	r3, #0
 8005a40:	220a      	movs	r2, #10
 8005a42:	4658      	mov	r0, fp
 8005a44:	f000 f920 	bl	8005c88 <__multadd>
 8005a48:	42af      	cmp	r7, r5
 8005a4a:	4681      	mov	r9, r0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	f04f 020a 	mov.w	r2, #10
 8005a54:	4639      	mov	r1, r7
 8005a56:	4658      	mov	r0, fp
 8005a58:	d107      	bne.n	8005a6a <_dtoa_r+0xac2>
 8005a5a:	f000 f915 	bl	8005c88 <__multadd>
 8005a5e:	4607      	mov	r7, r0
 8005a60:	4605      	mov	r5, r0
 8005a62:	9b07      	ldr	r3, [sp, #28]
 8005a64:	3301      	adds	r3, #1
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	e774      	b.n	8005954 <_dtoa_r+0x9ac>
 8005a6a:	f000 f90d 	bl	8005c88 <__multadd>
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4607      	mov	r7, r0
 8005a72:	2300      	movs	r3, #0
 8005a74:	220a      	movs	r2, #10
 8005a76:	4658      	mov	r0, fp
 8005a78:	f000 f906 	bl	8005c88 <__multadd>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	e7f0      	b.n	8005a62 <_dtoa_r+0xaba>
 8005a80:	9b00      	ldr	r3, [sp, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfcc      	ite	gt
 8005a86:	461e      	movgt	r6, r3
 8005a88:	2601      	movle	r6, #1
 8005a8a:	4456      	add	r6, sl
 8005a8c:	2700      	movs	r7, #0
 8005a8e:	4649      	mov	r1, r9
 8005a90:	2201      	movs	r2, #1
 8005a92:	4658      	mov	r0, fp
 8005a94:	f000 faee 	bl	8006074 <__lshift>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4681      	mov	r9, r0
 8005a9c:	f000 fb56 	bl	800614c <__mcmp>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	dcb0      	bgt.n	8005a06 <_dtoa_r+0xa5e>
 8005aa4:	d102      	bne.n	8005aac <_dtoa_r+0xb04>
 8005aa6:	f018 0f01 	tst.w	r8, #1
 8005aaa:	d1ac      	bne.n	8005a06 <_dtoa_r+0xa5e>
 8005aac:	4633      	mov	r3, r6
 8005aae:	461e      	mov	r6, r3
 8005ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ab4:	2a30      	cmp	r2, #48	@ 0x30
 8005ab6:	d0fa      	beq.n	8005aae <_dtoa_r+0xb06>
 8005ab8:	e5c2      	b.n	8005640 <_dtoa_r+0x698>
 8005aba:	459a      	cmp	sl, r3
 8005abc:	d1a4      	bne.n	8005a08 <_dtoa_r+0xa60>
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	2331      	movs	r3, #49	@ 0x31
 8005ac6:	f88a 3000 	strb.w	r3, [sl]
 8005aca:	e5b9      	b.n	8005640 <_dtoa_r+0x698>
 8005acc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ace:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b2c <_dtoa_r+0xb84>
 8005ad2:	b11b      	cbz	r3, 8005adc <_dtoa_r+0xb34>
 8005ad4:	f10a 0308 	add.w	r3, sl, #8
 8005ad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	4650      	mov	r0, sl
 8005ade:	b019      	add	sp, #100	@ 0x64
 8005ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	f77f ae37 	ble.w	800575a <_dtoa_r+0x7b2>
 8005aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af0:	2001      	movs	r0, #1
 8005af2:	e655      	b.n	80057a0 <_dtoa_r+0x7f8>
 8005af4:	9b00      	ldr	r3, [sp, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f77f aed6 	ble.w	80058a8 <_dtoa_r+0x900>
 8005afc:	4656      	mov	r6, sl
 8005afe:	4621      	mov	r1, r4
 8005b00:	4648      	mov	r0, r9
 8005b02:	f7ff f9c8 	bl	8004e96 <quorem>
 8005b06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b0a:	f806 8b01 	strb.w	r8, [r6], #1
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	eba6 020a 	sub.w	r2, r6, sl
 8005b14:	4293      	cmp	r3, r2
 8005b16:	ddb3      	ble.n	8005a80 <_dtoa_r+0xad8>
 8005b18:	4649      	mov	r1, r9
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	220a      	movs	r2, #10
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f000 f8b2 	bl	8005c88 <__multadd>
 8005b24:	4681      	mov	r9, r0
 8005b26:	e7ea      	b.n	8005afe <_dtoa_r+0xb56>
 8005b28:	08026785 	.word	0x08026785
 8005b2c:	08026709 	.word	0x08026709

08005b30 <_free_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4605      	mov	r5, r0
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d041      	beq.n	8005bbc <_free_r+0x8c>
 8005b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3c:	1f0c      	subs	r4, r1, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfb8      	it	lt
 8005b42:	18e4      	addlt	r4, r4, r3
 8005b44:	f7fe f808 	bl	8003b58 <__malloc_lock>
 8005b48:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <_free_r+0x90>)
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x2c>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	4628      	mov	r0, r5
 8005b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b58:	f7fe b804 	b.w	8003b64 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x42>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	1821      	adds	r1, r4, r0
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x1e>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x4c>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x42>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1850      	adds	r0, r2, r1
 8005b80:	42a0      	cmp	r0, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x6c>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	4401      	add	r1, r0
 8005b88:	1850      	adds	r0, r2, r1
 8005b8a:	4283      	cmp	r3, r0
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x22>
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	4408      	add	r0, r1
 8005b98:	6010      	str	r0, [r2, #0]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x22>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x74>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x22>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf04      	itt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	bf04      	itt	eq
 8005bb4:	1809      	addeq	r1, r1, r0
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	6054      	str	r4, [r2, #4]
 8005bba:	e7ca      	b.n	8005b52 <_free_r+0x22>
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200001f0 	.word	0x200001f0

08005bc4 <_Balloc>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	69c6      	ldr	r6, [r0, #28]
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	b976      	cbnz	r6, 8005bec <_Balloc+0x28>
 8005bce:	2010      	movs	r0, #16
 8005bd0:	f7fd ff10 	bl	80039f4 <malloc>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	61e0      	str	r0, [r4, #28]
 8005bd8:	b920      	cbnz	r0, 8005be4 <_Balloc+0x20>
 8005bda:	4b18      	ldr	r3, [pc, #96]	@ (8005c3c <_Balloc+0x78>)
 8005bdc:	4818      	ldr	r0, [pc, #96]	@ (8005c40 <_Balloc+0x7c>)
 8005bde:	216b      	movs	r1, #107	@ 0x6b
 8005be0:	f7fd feea 	bl	80039b8 <__assert_func>
 8005be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005be8:	6006      	str	r6, [r0, #0]
 8005bea:	60c6      	str	r6, [r0, #12]
 8005bec:	69e6      	ldr	r6, [r4, #28]
 8005bee:	68f3      	ldr	r3, [r6, #12]
 8005bf0:	b183      	cbz	r3, 8005c14 <_Balloc+0x50>
 8005bf2:	69e3      	ldr	r3, [r4, #28]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bfa:	b9b8      	cbnz	r0, 8005c2c <_Balloc+0x68>
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f605 	lsl.w	r6, r1, r5
 8005c02:	1d72      	adds	r2, r6, #5
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	4620      	mov	r0, r4
 8005c08:	f001 ff66 	bl	8007ad8 <_calloc_r>
 8005c0c:	b160      	cbz	r0, 8005c28 <_Balloc+0x64>
 8005c0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c12:	e00e      	b.n	8005c32 <_Balloc+0x6e>
 8005c14:	2221      	movs	r2, #33	@ 0x21
 8005c16:	2104      	movs	r1, #4
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f001 ff5d 	bl	8007ad8 <_calloc_r>
 8005c1e:	69e3      	ldr	r3, [r4, #28]
 8005c20:	60f0      	str	r0, [r6, #12]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e4      	bne.n	8005bf2 <_Balloc+0x2e>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	6802      	ldr	r2, [r0, #0]
 8005c2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c32:	2300      	movs	r3, #0
 8005c34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c38:	e7f7      	b.n	8005c2a <_Balloc+0x66>
 8005c3a:	bf00      	nop
 8005c3c:	08026716 	.word	0x08026716
 8005c40:	08026796 	.word	0x08026796

08005c44 <_Bfree>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	69c6      	ldr	r6, [r0, #28]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b976      	cbnz	r6, 8005c6c <_Bfree+0x28>
 8005c4e:	2010      	movs	r0, #16
 8005c50:	f7fd fed0 	bl	80039f4 <malloc>
 8005c54:	4602      	mov	r2, r0
 8005c56:	61e8      	str	r0, [r5, #28]
 8005c58:	b920      	cbnz	r0, 8005c64 <_Bfree+0x20>
 8005c5a:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <_Bfree+0x3c>)
 8005c5c:	4809      	ldr	r0, [pc, #36]	@ (8005c84 <_Bfree+0x40>)
 8005c5e:	218f      	movs	r1, #143	@ 0x8f
 8005c60:	f7fd feaa 	bl	80039b8 <__assert_func>
 8005c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c68:	6006      	str	r6, [r0, #0]
 8005c6a:	60c6      	str	r6, [r0, #12]
 8005c6c:	b13c      	cbz	r4, 8005c7e <_Bfree+0x3a>
 8005c6e:	69eb      	ldr	r3, [r5, #28]
 8005c70:	6862      	ldr	r2, [r4, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c78:	6021      	str	r1, [r4, #0]
 8005c7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	08026716 	.word	0x08026716
 8005c84:	08026796 	.word	0x08026796

08005c88 <__multadd>:
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	690d      	ldr	r5, [r1, #16]
 8005c8e:	4607      	mov	r7, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	461e      	mov	r6, r3
 8005c94:	f101 0c14 	add.w	ip, r1, #20
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	fb02 6101 	mla	r1, r2, r1, r6
 8005ca4:	0c1e      	lsrs	r6, r3, #16
 8005ca6:	0c0b      	lsrs	r3, r1, #16
 8005ca8:	fb02 3306 	mla	r3, r2, r6, r3
 8005cac:	b289      	uxth	r1, r1
 8005cae:	3001      	adds	r0, #1
 8005cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cb4:	4285      	cmp	r5, r0
 8005cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8005cba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cbe:	dcec      	bgt.n	8005c9a <__multadd+0x12>
 8005cc0:	b30e      	cbz	r6, 8005d06 <__multadd+0x7e>
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	42ab      	cmp	r3, r5
 8005cc6:	dc19      	bgt.n	8005cfc <__multadd+0x74>
 8005cc8:	6861      	ldr	r1, [r4, #4]
 8005cca:	4638      	mov	r0, r7
 8005ccc:	3101      	adds	r1, #1
 8005cce:	f7ff ff79 	bl	8005bc4 <_Balloc>
 8005cd2:	4680      	mov	r8, r0
 8005cd4:	b928      	cbnz	r0, 8005ce2 <__multadd+0x5a>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <__multadd+0x84>)
 8005cda:	480d      	ldr	r0, [pc, #52]	@ (8005d10 <__multadd+0x88>)
 8005cdc:	21ba      	movs	r1, #186	@ 0xba
 8005cde:	f7fd fe6b 	bl	80039b8 <__assert_func>
 8005ce2:	6922      	ldr	r2, [r4, #16]
 8005ce4:	3202      	adds	r2, #2
 8005ce6:	f104 010c 	add.w	r1, r4, #12
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	300c      	adds	r0, #12
 8005cee:	f001 fedb 	bl	8007aa8 <memcpy>
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f7ff ffa5 	bl	8005c44 <_Bfree>
 8005cfa:	4644      	mov	r4, r8
 8005cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d00:	3501      	adds	r5, #1
 8005d02:	615e      	str	r6, [r3, #20]
 8005d04:	6125      	str	r5, [r4, #16]
 8005d06:	4620      	mov	r0, r4
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0c:	08026785 	.word	0x08026785
 8005d10:	08026796 	.word	0x08026796

08005d14 <__s2b>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	4615      	mov	r5, r2
 8005d1c:	461f      	mov	r7, r3
 8005d1e:	2209      	movs	r2, #9
 8005d20:	3308      	adds	r3, #8
 8005d22:	4606      	mov	r6, r0
 8005d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	db09      	blt.n	8005d44 <__s2b+0x30>
 8005d30:	4630      	mov	r0, r6
 8005d32:	f7ff ff47 	bl	8005bc4 <_Balloc>
 8005d36:	b940      	cbnz	r0, 8005d4a <__s2b+0x36>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b19      	ldr	r3, [pc, #100]	@ (8005da0 <__s2b+0x8c>)
 8005d3c:	4819      	ldr	r0, [pc, #100]	@ (8005da4 <__s2b+0x90>)
 8005d3e:	21d3      	movs	r1, #211	@ 0xd3
 8005d40:	f7fd fe3a 	bl	80039b8 <__assert_func>
 8005d44:	0052      	lsls	r2, r2, #1
 8005d46:	3101      	adds	r1, #1
 8005d48:	e7f0      	b.n	8005d2c <__s2b+0x18>
 8005d4a:	9b08      	ldr	r3, [sp, #32]
 8005d4c:	6143      	str	r3, [r0, #20]
 8005d4e:	2d09      	cmp	r5, #9
 8005d50:	f04f 0301 	mov.w	r3, #1
 8005d54:	6103      	str	r3, [r0, #16]
 8005d56:	dd16      	ble.n	8005d86 <__s2b+0x72>
 8005d58:	f104 0909 	add.w	r9, r4, #9
 8005d5c:	46c8      	mov	r8, r9
 8005d5e:	442c      	add	r4, r5
 8005d60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d64:	4601      	mov	r1, r0
 8005d66:	3b30      	subs	r3, #48	@ 0x30
 8005d68:	220a      	movs	r2, #10
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff8c 	bl	8005c88 <__multadd>
 8005d70:	45a0      	cmp	r8, r4
 8005d72:	d1f5      	bne.n	8005d60 <__s2b+0x4c>
 8005d74:	f1a5 0408 	sub.w	r4, r5, #8
 8005d78:	444c      	add	r4, r9
 8005d7a:	1b2d      	subs	r5, r5, r4
 8005d7c:	1963      	adds	r3, r4, r5
 8005d7e:	42bb      	cmp	r3, r7
 8005d80:	db04      	blt.n	8005d8c <__s2b+0x78>
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	340a      	adds	r4, #10
 8005d88:	2509      	movs	r5, #9
 8005d8a:	e7f6      	b.n	8005d7a <__s2b+0x66>
 8005d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d90:	4601      	mov	r1, r0
 8005d92:	3b30      	subs	r3, #48	@ 0x30
 8005d94:	220a      	movs	r2, #10
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ff76 	bl	8005c88 <__multadd>
 8005d9c:	e7ee      	b.n	8005d7c <__s2b+0x68>
 8005d9e:	bf00      	nop
 8005da0:	08026785 	.word	0x08026785
 8005da4:	08026796 	.word	0x08026796

08005da8 <__hi0bits>:
 8005da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005dac:	4603      	mov	r3, r0
 8005dae:	bf36      	itet	cc
 8005db0:	0403      	lslcc	r3, r0, #16
 8005db2:	2000      	movcs	r0, #0
 8005db4:	2010      	movcc	r0, #16
 8005db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dba:	bf3c      	itt	cc
 8005dbc:	021b      	lslcc	r3, r3, #8
 8005dbe:	3008      	addcc	r0, #8
 8005dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc4:	bf3c      	itt	cc
 8005dc6:	011b      	lslcc	r3, r3, #4
 8005dc8:	3004      	addcc	r0, #4
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dce:	bf3c      	itt	cc
 8005dd0:	009b      	lslcc	r3, r3, #2
 8005dd2:	3002      	addcc	r0, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db05      	blt.n	8005de4 <__hi0bits+0x3c>
 8005dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ddc:	f100 0001 	add.w	r0, r0, #1
 8005de0:	bf08      	it	eq
 8005de2:	2020      	moveq	r0, #32
 8005de4:	4770      	bx	lr

08005de6 <__lo0bits>:
 8005de6:	6803      	ldr	r3, [r0, #0]
 8005de8:	4602      	mov	r2, r0
 8005dea:	f013 0007 	ands.w	r0, r3, #7
 8005dee:	d00b      	beq.n	8005e08 <__lo0bits+0x22>
 8005df0:	07d9      	lsls	r1, r3, #31
 8005df2:	d421      	bmi.n	8005e38 <__lo0bits+0x52>
 8005df4:	0798      	lsls	r0, r3, #30
 8005df6:	bf49      	itett	mi
 8005df8:	085b      	lsrmi	r3, r3, #1
 8005dfa:	089b      	lsrpl	r3, r3, #2
 8005dfc:	2001      	movmi	r0, #1
 8005dfe:	6013      	strmi	r3, [r2, #0]
 8005e00:	bf5c      	itt	pl
 8005e02:	6013      	strpl	r3, [r2, #0]
 8005e04:	2002      	movpl	r0, #2
 8005e06:	4770      	bx	lr
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	b909      	cbnz	r1, 8005e10 <__lo0bits+0x2a>
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	2010      	movs	r0, #16
 8005e10:	b2d9      	uxtb	r1, r3
 8005e12:	b909      	cbnz	r1, 8005e18 <__lo0bits+0x32>
 8005e14:	3008      	adds	r0, #8
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	0719      	lsls	r1, r3, #28
 8005e1a:	bf04      	itt	eq
 8005e1c:	091b      	lsreq	r3, r3, #4
 8005e1e:	3004      	addeq	r0, #4
 8005e20:	0799      	lsls	r1, r3, #30
 8005e22:	bf04      	itt	eq
 8005e24:	089b      	lsreq	r3, r3, #2
 8005e26:	3002      	addeq	r0, #2
 8005e28:	07d9      	lsls	r1, r3, #31
 8005e2a:	d403      	bmi.n	8005e34 <__lo0bits+0x4e>
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	f100 0001 	add.w	r0, r0, #1
 8005e32:	d003      	beq.n	8005e3c <__lo0bits+0x56>
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4770      	bx	lr
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4770      	bx	lr
 8005e3c:	2020      	movs	r0, #32
 8005e3e:	4770      	bx	lr

08005e40 <__i2b>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	460c      	mov	r4, r1
 8005e44:	2101      	movs	r1, #1
 8005e46:	f7ff febd 	bl	8005bc4 <_Balloc>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	b928      	cbnz	r0, 8005e5a <__i2b+0x1a>
 8005e4e:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <__i2b+0x24>)
 8005e50:	4805      	ldr	r0, [pc, #20]	@ (8005e68 <__i2b+0x28>)
 8005e52:	f240 1145 	movw	r1, #325	@ 0x145
 8005e56:	f7fd fdaf 	bl	80039b8 <__assert_func>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	6144      	str	r4, [r0, #20]
 8005e5e:	6103      	str	r3, [r0, #16]
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	bf00      	nop
 8005e64:	08026785 	.word	0x08026785
 8005e68:	08026796 	.word	0x08026796

08005e6c <__multiply>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4614      	mov	r4, r2
 8005e72:	690a      	ldr	r2, [r1, #16]
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bfa8      	it	ge
 8005e7a:	4623      	movge	r3, r4
 8005e7c:	460f      	mov	r7, r1
 8005e7e:	bfa4      	itt	ge
 8005e80:	460c      	movge	r4, r1
 8005e82:	461f      	movge	r7, r3
 8005e84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	6861      	ldr	r1, [r4, #4]
 8005e90:	eb0a 0609 	add.w	r6, sl, r9
 8005e94:	42b3      	cmp	r3, r6
 8005e96:	b085      	sub	sp, #20
 8005e98:	bfb8      	it	lt
 8005e9a:	3101      	addlt	r1, #1
 8005e9c:	f7ff fe92 	bl	8005bc4 <_Balloc>
 8005ea0:	b930      	cbnz	r0, 8005eb0 <__multiply+0x44>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	4b44      	ldr	r3, [pc, #272]	@ (8005fb8 <__multiply+0x14c>)
 8005ea6:	4845      	ldr	r0, [pc, #276]	@ (8005fbc <__multiply+0x150>)
 8005ea8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005eac:	f7fd fd84 	bl	80039b8 <__assert_func>
 8005eb0:	f100 0514 	add.w	r5, r0, #20
 8005eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005eb8:	462b      	mov	r3, r5
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4543      	cmp	r3, r8
 8005ebe:	d321      	bcc.n	8005f04 <__multiply+0x98>
 8005ec0:	f107 0114 	add.w	r1, r7, #20
 8005ec4:	f104 0214 	add.w	r2, r4, #20
 8005ec8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ecc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	1b13      	subs	r3, r2, r4
 8005ed4:	3b15      	subs	r3, #21
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	3304      	adds	r3, #4
 8005edc:	f104 0715 	add.w	r7, r4, #21
 8005ee0:	42ba      	cmp	r2, r7
 8005ee2:	bf38      	it	cc
 8005ee4:	2304      	movcc	r3, #4
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	9b02      	ldr	r3, [sp, #8]
 8005eea:	9103      	str	r1, [sp, #12]
 8005eec:	428b      	cmp	r3, r1
 8005eee:	d80c      	bhi.n	8005f0a <__multiply+0x9e>
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	dd03      	ble.n	8005efc <__multiply+0x90>
 8005ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d05b      	beq.n	8005fb4 <__multiply+0x148>
 8005efc:	6106      	str	r6, [r0, #16]
 8005efe:	b005      	add	sp, #20
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	f843 2b04 	str.w	r2, [r3], #4
 8005f08:	e7d8      	b.n	8005ebc <__multiply+0x50>
 8005f0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f0e:	f1ba 0f00 	cmp.w	sl, #0
 8005f12:	d024      	beq.n	8005f5e <__multiply+0xf2>
 8005f14:	f104 0e14 	add.w	lr, r4, #20
 8005f18:	46a9      	mov	r9, r5
 8005f1a:	f04f 0c00 	mov.w	ip, #0
 8005f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f22:	f8d9 3000 	ldr.w	r3, [r9]
 8005f26:	fa1f fb87 	uxth.w	fp, r7
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005f34:	f8d9 7000 	ldr.w	r7, [r9]
 8005f38:	4463      	add	r3, ip
 8005f3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005f3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005f42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f4c:	4572      	cmp	r2, lr
 8005f4e:	f849 3b04 	str.w	r3, [r9], #4
 8005f52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005f56:	d8e2      	bhi.n	8005f1e <__multiply+0xb2>
 8005f58:	9b01      	ldr	r3, [sp, #4]
 8005f5a:	f845 c003 	str.w	ip, [r5, r3]
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f64:	3104      	adds	r1, #4
 8005f66:	f1b9 0f00 	cmp.w	r9, #0
 8005f6a:	d021      	beq.n	8005fb0 <__multiply+0x144>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	f104 0c14 	add.w	ip, r4, #20
 8005f72:	46ae      	mov	lr, r5
 8005f74:	f04f 0a00 	mov.w	sl, #0
 8005f78:	f8bc b000 	ldrh.w	fp, [ip]
 8005f7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f80:	fb09 770b 	mla	r7, r9, fp, r7
 8005f84:	4457      	add	r7, sl
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f8c:	f84e 3b04 	str.w	r3, [lr], #4
 8005f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f98:	f8be 3000 	ldrh.w	r3, [lr]
 8005f9c:	fb09 330a 	mla	r3, r9, sl, r3
 8005fa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005fa4:	4562      	cmp	r2, ip
 8005fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005faa:	d8e5      	bhi.n	8005f78 <__multiply+0x10c>
 8005fac:	9f01      	ldr	r7, [sp, #4]
 8005fae:	51eb      	str	r3, [r5, r7]
 8005fb0:	3504      	adds	r5, #4
 8005fb2:	e799      	b.n	8005ee8 <__multiply+0x7c>
 8005fb4:	3e01      	subs	r6, #1
 8005fb6:	e79b      	b.n	8005ef0 <__multiply+0x84>
 8005fb8:	08026785 	.word	0x08026785
 8005fbc:	08026796 	.word	0x08026796

08005fc0 <__pow5mult>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	f012 0203 	ands.w	r2, r2, #3
 8005fca:	4607      	mov	r7, r0
 8005fcc:	460e      	mov	r6, r1
 8005fce:	d007      	beq.n	8005fe0 <__pow5mult+0x20>
 8005fd0:	4c25      	ldr	r4, [pc, #148]	@ (8006068 <__pow5mult+0xa8>)
 8005fd2:	3a01      	subs	r2, #1
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fda:	f7ff fe55 	bl	8005c88 <__multadd>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	10ad      	asrs	r5, r5, #2
 8005fe2:	d03d      	beq.n	8006060 <__pow5mult+0xa0>
 8005fe4:	69fc      	ldr	r4, [r7, #28]
 8005fe6:	b97c      	cbnz	r4, 8006008 <__pow5mult+0x48>
 8005fe8:	2010      	movs	r0, #16
 8005fea:	f7fd fd03 	bl	80039f4 <malloc>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	61f8      	str	r0, [r7, #28]
 8005ff2:	b928      	cbnz	r0, 8006000 <__pow5mult+0x40>
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <__pow5mult+0xac>)
 8005ff6:	481e      	ldr	r0, [pc, #120]	@ (8006070 <__pow5mult+0xb0>)
 8005ff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ffc:	f7fd fcdc 	bl	80039b8 <__assert_func>
 8006000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006004:	6004      	str	r4, [r0, #0]
 8006006:	60c4      	str	r4, [r0, #12]
 8006008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800600c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006010:	b94c      	cbnz	r4, 8006026 <__pow5mult+0x66>
 8006012:	f240 2171 	movw	r1, #625	@ 0x271
 8006016:	4638      	mov	r0, r7
 8006018:	f7ff ff12 	bl	8005e40 <__i2b>
 800601c:	2300      	movs	r3, #0
 800601e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006022:	4604      	mov	r4, r0
 8006024:	6003      	str	r3, [r0, #0]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	07eb      	lsls	r3, r5, #31
 800602c:	d50a      	bpl.n	8006044 <__pow5mult+0x84>
 800602e:	4631      	mov	r1, r6
 8006030:	4622      	mov	r2, r4
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff ff1a 	bl	8005e6c <__multiply>
 8006038:	4631      	mov	r1, r6
 800603a:	4680      	mov	r8, r0
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff fe01 	bl	8005c44 <_Bfree>
 8006042:	4646      	mov	r6, r8
 8006044:	106d      	asrs	r5, r5, #1
 8006046:	d00b      	beq.n	8006060 <__pow5mult+0xa0>
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	b938      	cbnz	r0, 800605c <__pow5mult+0x9c>
 800604c:	4622      	mov	r2, r4
 800604e:	4621      	mov	r1, r4
 8006050:	4638      	mov	r0, r7
 8006052:	f7ff ff0b 	bl	8005e6c <__multiply>
 8006056:	6020      	str	r0, [r4, #0]
 8006058:	f8c0 9000 	str.w	r9, [r0]
 800605c:	4604      	mov	r4, r0
 800605e:	e7e4      	b.n	800602a <__pow5mult+0x6a>
 8006060:	4630      	mov	r0, r6
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	bf00      	nop
 8006068:	080267f0 	.word	0x080267f0
 800606c:	08026716 	.word	0x08026716
 8006070:	08026796 	.word	0x08026796

08006074 <__lshift>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	460c      	mov	r4, r1
 800607a:	6849      	ldr	r1, [r1, #4]
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006082:	68a3      	ldr	r3, [r4, #8]
 8006084:	4607      	mov	r7, r0
 8006086:	4691      	mov	r9, r2
 8006088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800608c:	f108 0601 	add.w	r6, r8, #1
 8006090:	42b3      	cmp	r3, r6
 8006092:	db0b      	blt.n	80060ac <__lshift+0x38>
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff fd95 	bl	8005bc4 <_Balloc>
 800609a:	4605      	mov	r5, r0
 800609c:	b948      	cbnz	r0, 80060b2 <__lshift+0x3e>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <__lshift+0xd0>)
 80060a2:	4829      	ldr	r0, [pc, #164]	@ (8006148 <__lshift+0xd4>)
 80060a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060a8:	f7fd fc86 	bl	80039b8 <__assert_func>
 80060ac:	3101      	adds	r1, #1
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	e7ee      	b.n	8006090 <__lshift+0x1c>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f100 0114 	add.w	r1, r0, #20
 80060b8:	f100 0210 	add.w	r2, r0, #16
 80060bc:	4618      	mov	r0, r3
 80060be:	4553      	cmp	r3, sl
 80060c0:	db33      	blt.n	800612a <__lshift+0xb6>
 80060c2:	6920      	ldr	r0, [r4, #16]
 80060c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060c8:	f104 0314 	add.w	r3, r4, #20
 80060cc:	f019 091f 	ands.w	r9, r9, #31
 80060d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060d8:	d02b      	beq.n	8006132 <__lshift+0xbe>
 80060da:	f1c9 0e20 	rsb	lr, r9, #32
 80060de:	468a      	mov	sl, r1
 80060e0:	2200      	movs	r2, #0
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	fa00 f009 	lsl.w	r0, r0, r9
 80060e8:	4310      	orrs	r0, r2
 80060ea:	f84a 0b04 	str.w	r0, [sl], #4
 80060ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f2:	459c      	cmp	ip, r3
 80060f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80060f8:	d8f3      	bhi.n	80060e2 <__lshift+0x6e>
 80060fa:	ebac 0304 	sub.w	r3, ip, r4
 80060fe:	3b15      	subs	r3, #21
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	3304      	adds	r3, #4
 8006106:	f104 0015 	add.w	r0, r4, #21
 800610a:	4584      	cmp	ip, r0
 800610c:	bf38      	it	cc
 800610e:	2304      	movcc	r3, #4
 8006110:	50ca      	str	r2, [r1, r3]
 8006112:	b10a      	cbz	r2, 8006118 <__lshift+0xa4>
 8006114:	f108 0602 	add.w	r6, r8, #2
 8006118:	3e01      	subs	r6, #1
 800611a:	4638      	mov	r0, r7
 800611c:	612e      	str	r6, [r5, #16]
 800611e:	4621      	mov	r1, r4
 8006120:	f7ff fd90 	bl	8005c44 <_Bfree>
 8006124:	4628      	mov	r0, r5
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	f842 0f04 	str.w	r0, [r2, #4]!
 800612e:	3301      	adds	r3, #1
 8006130:	e7c5      	b.n	80060be <__lshift+0x4a>
 8006132:	3904      	subs	r1, #4
 8006134:	f853 2b04 	ldr.w	r2, [r3], #4
 8006138:	f841 2f04 	str.w	r2, [r1, #4]!
 800613c:	459c      	cmp	ip, r3
 800613e:	d8f9      	bhi.n	8006134 <__lshift+0xc0>
 8006140:	e7ea      	b.n	8006118 <__lshift+0xa4>
 8006142:	bf00      	nop
 8006144:	08026785 	.word	0x08026785
 8006148:	08026796 	.word	0x08026796

0800614c <__mcmp>:
 800614c:	690a      	ldr	r2, [r1, #16]
 800614e:	4603      	mov	r3, r0
 8006150:	6900      	ldr	r0, [r0, #16]
 8006152:	1a80      	subs	r0, r0, r2
 8006154:	b530      	push	{r4, r5, lr}
 8006156:	d10e      	bne.n	8006176 <__mcmp+0x2a>
 8006158:	3314      	adds	r3, #20
 800615a:	3114      	adds	r1, #20
 800615c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800616c:	4295      	cmp	r5, r2
 800616e:	d003      	beq.n	8006178 <__mcmp+0x2c>
 8006170:	d205      	bcs.n	800617e <__mcmp+0x32>
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	bd30      	pop	{r4, r5, pc}
 8006178:	42a3      	cmp	r3, r4
 800617a:	d3f3      	bcc.n	8006164 <__mcmp+0x18>
 800617c:	e7fb      	b.n	8006176 <__mcmp+0x2a>
 800617e:	2001      	movs	r0, #1
 8006180:	e7f9      	b.n	8006176 <__mcmp+0x2a>
	...

08006184 <__mdiff>:
 8006184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	4689      	mov	r9, r1
 800618a:	4606      	mov	r6, r0
 800618c:	4611      	mov	r1, r2
 800618e:	4648      	mov	r0, r9
 8006190:	4614      	mov	r4, r2
 8006192:	f7ff ffdb 	bl	800614c <__mcmp>
 8006196:	1e05      	subs	r5, r0, #0
 8006198:	d112      	bne.n	80061c0 <__mdiff+0x3c>
 800619a:	4629      	mov	r1, r5
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff fd11 	bl	8005bc4 <_Balloc>
 80061a2:	4602      	mov	r2, r0
 80061a4:	b928      	cbnz	r0, 80061b2 <__mdiff+0x2e>
 80061a6:	4b3f      	ldr	r3, [pc, #252]	@ (80062a4 <__mdiff+0x120>)
 80061a8:	f240 2137 	movw	r1, #567	@ 0x237
 80061ac:	483e      	ldr	r0, [pc, #248]	@ (80062a8 <__mdiff+0x124>)
 80061ae:	f7fd fc03 	bl	80039b8 <__assert_func>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061b8:	4610      	mov	r0, r2
 80061ba:	b003      	add	sp, #12
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	bfbc      	itt	lt
 80061c2:	464b      	movlt	r3, r9
 80061c4:	46a1      	movlt	r9, r4
 80061c6:	4630      	mov	r0, r6
 80061c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061cc:	bfba      	itte	lt
 80061ce:	461c      	movlt	r4, r3
 80061d0:	2501      	movlt	r5, #1
 80061d2:	2500      	movge	r5, #0
 80061d4:	f7ff fcf6 	bl	8005bc4 <_Balloc>
 80061d8:	4602      	mov	r2, r0
 80061da:	b918      	cbnz	r0, 80061e4 <__mdiff+0x60>
 80061dc:	4b31      	ldr	r3, [pc, #196]	@ (80062a4 <__mdiff+0x120>)
 80061de:	f240 2145 	movw	r1, #581	@ 0x245
 80061e2:	e7e3      	b.n	80061ac <__mdiff+0x28>
 80061e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061e8:	6926      	ldr	r6, [r4, #16]
 80061ea:	60c5      	str	r5, [r0, #12]
 80061ec:	f109 0310 	add.w	r3, r9, #16
 80061f0:	f109 0514 	add.w	r5, r9, #20
 80061f4:	f104 0e14 	add.w	lr, r4, #20
 80061f8:	f100 0b14 	add.w	fp, r0, #20
 80061fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	46d9      	mov	r9, fp
 8006208:	f04f 0c00 	mov.w	ip, #0
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006212:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	fa1f f38a 	uxth.w	r3, sl
 800621c:	4619      	mov	r1, r3
 800621e:	b283      	uxth	r3, r0
 8006220:	1acb      	subs	r3, r1, r3
 8006222:	0c00      	lsrs	r0, r0, #16
 8006224:	4463      	add	r3, ip
 8006226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800622a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006234:	4576      	cmp	r6, lr
 8006236:	f849 3b04 	str.w	r3, [r9], #4
 800623a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800623e:	d8e5      	bhi.n	800620c <__mdiff+0x88>
 8006240:	1b33      	subs	r3, r6, r4
 8006242:	3b15      	subs	r3, #21
 8006244:	f023 0303 	bic.w	r3, r3, #3
 8006248:	3415      	adds	r4, #21
 800624a:	3304      	adds	r3, #4
 800624c:	42a6      	cmp	r6, r4
 800624e:	bf38      	it	cc
 8006250:	2304      	movcc	r3, #4
 8006252:	441d      	add	r5, r3
 8006254:	445b      	add	r3, fp
 8006256:	461e      	mov	r6, r3
 8006258:	462c      	mov	r4, r5
 800625a:	4544      	cmp	r4, r8
 800625c:	d30e      	bcc.n	800627c <__mdiff+0xf8>
 800625e:	f108 0103 	add.w	r1, r8, #3
 8006262:	1b49      	subs	r1, r1, r5
 8006264:	f021 0103 	bic.w	r1, r1, #3
 8006268:	3d03      	subs	r5, #3
 800626a:	45a8      	cmp	r8, r5
 800626c:	bf38      	it	cc
 800626e:	2100      	movcc	r1, #0
 8006270:	440b      	add	r3, r1
 8006272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006276:	b191      	cbz	r1, 800629e <__mdiff+0x11a>
 8006278:	6117      	str	r7, [r2, #16]
 800627a:	e79d      	b.n	80061b8 <__mdiff+0x34>
 800627c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006280:	46e6      	mov	lr, ip
 8006282:	0c08      	lsrs	r0, r1, #16
 8006284:	fa1c fc81 	uxtah	ip, ip, r1
 8006288:	4471      	add	r1, lr
 800628a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800628e:	b289      	uxth	r1, r1
 8006290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006294:	f846 1b04 	str.w	r1, [r6], #4
 8006298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800629c:	e7dd      	b.n	800625a <__mdiff+0xd6>
 800629e:	3f01      	subs	r7, #1
 80062a0:	e7e7      	b.n	8006272 <__mdiff+0xee>
 80062a2:	bf00      	nop
 80062a4:	08026785 	.word	0x08026785
 80062a8:	08026796 	.word	0x08026796

080062ac <__ulp>:
 80062ac:	b082      	sub	sp, #8
 80062ae:	ed8d 0b00 	vstr	d0, [sp]
 80062b2:	9a01      	ldr	r2, [sp, #4]
 80062b4:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <__ulp+0x48>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dc08      	bgt.n	80062d2 <__ulp+0x26>
 80062c0:	425b      	negs	r3, r3
 80062c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80062c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062ca:	da04      	bge.n	80062d6 <__ulp+0x2a>
 80062cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062d0:	4113      	asrs	r3, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	e008      	b.n	80062e8 <__ulp+0x3c>
 80062d6:	f1a2 0314 	sub.w	r3, r2, #20
 80062da:	2b1e      	cmp	r3, #30
 80062dc:	bfda      	itte	le
 80062de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80062e2:	40da      	lsrle	r2, r3
 80062e4:	2201      	movgt	r2, #1
 80062e6:	2300      	movs	r3, #0
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	ec41 0b10 	vmov	d0, r0, r1
 80062f0:	b002      	add	sp, #8
 80062f2:	4770      	bx	lr
 80062f4:	7ff00000 	.word	0x7ff00000

080062f8 <__b2d>:
 80062f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fc:	6906      	ldr	r6, [r0, #16]
 80062fe:	f100 0814 	add.w	r8, r0, #20
 8006302:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006306:	1f37      	subs	r7, r6, #4
 8006308:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800630c:	4610      	mov	r0, r2
 800630e:	f7ff fd4b 	bl	8005da8 <__hi0bits>
 8006312:	f1c0 0320 	rsb	r3, r0, #32
 8006316:	280a      	cmp	r0, #10
 8006318:	600b      	str	r3, [r1, #0]
 800631a:	491b      	ldr	r1, [pc, #108]	@ (8006388 <__b2d+0x90>)
 800631c:	dc15      	bgt.n	800634a <__b2d+0x52>
 800631e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006322:	fa22 f30c 	lsr.w	r3, r2, ip
 8006326:	45b8      	cmp	r8, r7
 8006328:	ea43 0501 	orr.w	r5, r3, r1
 800632c:	bf34      	ite	cc
 800632e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006332:	2300      	movcs	r3, #0
 8006334:	3015      	adds	r0, #21
 8006336:	fa02 f000 	lsl.w	r0, r2, r0
 800633a:	fa23 f30c 	lsr.w	r3, r3, ip
 800633e:	4303      	orrs	r3, r0
 8006340:	461c      	mov	r4, r3
 8006342:	ec45 4b10 	vmov	d0, r4, r5
 8006346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634a:	45b8      	cmp	r8, r7
 800634c:	bf3a      	itte	cc
 800634e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006352:	f1a6 0708 	subcc.w	r7, r6, #8
 8006356:	2300      	movcs	r3, #0
 8006358:	380b      	subs	r0, #11
 800635a:	d012      	beq.n	8006382 <__b2d+0x8a>
 800635c:	f1c0 0120 	rsb	r1, r0, #32
 8006360:	fa23 f401 	lsr.w	r4, r3, r1
 8006364:	4082      	lsls	r2, r0
 8006366:	4322      	orrs	r2, r4
 8006368:	4547      	cmp	r7, r8
 800636a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800636e:	bf8c      	ite	hi
 8006370:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006374:	2200      	movls	r2, #0
 8006376:	4083      	lsls	r3, r0
 8006378:	40ca      	lsrs	r2, r1
 800637a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800637e:	4313      	orrs	r3, r2
 8006380:	e7de      	b.n	8006340 <__b2d+0x48>
 8006382:	ea42 0501 	orr.w	r5, r2, r1
 8006386:	e7db      	b.n	8006340 <__b2d+0x48>
 8006388:	3ff00000 	.word	0x3ff00000

0800638c <__d2b>:
 800638c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006390:	460f      	mov	r7, r1
 8006392:	2101      	movs	r1, #1
 8006394:	ec59 8b10 	vmov	r8, r9, d0
 8006398:	4616      	mov	r6, r2
 800639a:	f7ff fc13 	bl	8005bc4 <_Balloc>
 800639e:	4604      	mov	r4, r0
 80063a0:	b930      	cbnz	r0, 80063b0 <__d2b+0x24>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b23      	ldr	r3, [pc, #140]	@ (8006434 <__d2b+0xa8>)
 80063a6:	4824      	ldr	r0, [pc, #144]	@ (8006438 <__d2b+0xac>)
 80063a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80063ac:	f7fd fb04 	bl	80039b8 <__assert_func>
 80063b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063b8:	b10d      	cbz	r5, 80063be <__d2b+0x32>
 80063ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	f1b8 0300 	subs.w	r3, r8, #0
 80063c4:	d023      	beq.n	800640e <__d2b+0x82>
 80063c6:	4668      	mov	r0, sp
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f7ff fd0c 	bl	8005de6 <__lo0bits>
 80063ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063d2:	b1d0      	cbz	r0, 800640a <__d2b+0x7e>
 80063d4:	f1c0 0320 	rsb	r3, r0, #32
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	430b      	orrs	r3, r1
 80063de:	40c2      	lsrs	r2, r0
 80063e0:	6163      	str	r3, [r4, #20]
 80063e2:	9201      	str	r2, [sp, #4]
 80063e4:	9b01      	ldr	r3, [sp, #4]
 80063e6:	61a3      	str	r3, [r4, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2201      	moveq	r2, #1
 80063ee:	2202      	movne	r2, #2
 80063f0:	6122      	str	r2, [r4, #16]
 80063f2:	b1a5      	cbz	r5, 800641e <__d2b+0x92>
 80063f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063f8:	4405      	add	r5, r0
 80063fa:	603d      	str	r5, [r7, #0]
 80063fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006400:	6030      	str	r0, [r6, #0]
 8006402:	4620      	mov	r0, r4
 8006404:	b003      	add	sp, #12
 8006406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800640a:	6161      	str	r1, [r4, #20]
 800640c:	e7ea      	b.n	80063e4 <__d2b+0x58>
 800640e:	a801      	add	r0, sp, #4
 8006410:	f7ff fce9 	bl	8005de6 <__lo0bits>
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	3020      	adds	r0, #32
 800641a:	2201      	movs	r2, #1
 800641c:	e7e8      	b.n	80063f0 <__d2b+0x64>
 800641e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006422:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006426:	6038      	str	r0, [r7, #0]
 8006428:	6918      	ldr	r0, [r3, #16]
 800642a:	f7ff fcbd 	bl	8005da8 <__hi0bits>
 800642e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006432:	e7e5      	b.n	8006400 <__d2b+0x74>
 8006434:	08026785 	.word	0x08026785
 8006438:	08026796 	.word	0x08026796

0800643c <__ratio>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	b085      	sub	sp, #20
 8006442:	e9cd 1000 	strd	r1, r0, [sp]
 8006446:	a902      	add	r1, sp, #8
 8006448:	f7ff ff56 	bl	80062f8 <__b2d>
 800644c:	9800      	ldr	r0, [sp, #0]
 800644e:	a903      	add	r1, sp, #12
 8006450:	ec55 4b10 	vmov	r4, r5, d0
 8006454:	f7ff ff50 	bl	80062f8 <__b2d>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	6919      	ldr	r1, [r3, #16]
 800645c:	9b00      	ldr	r3, [sp, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	1ac9      	subs	r1, r1, r3
 8006462:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	ec5b ab10 	vmov	sl, fp, d0
 800646c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfce      	itee	gt
 8006474:	462a      	movgt	r2, r5
 8006476:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800647a:	465a      	movle	r2, fp
 800647c:	462f      	mov	r7, r5
 800647e:	46d9      	mov	r9, fp
 8006480:	bfcc      	ite	gt
 8006482:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006486:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800648a:	464b      	mov	r3, r9
 800648c:	4652      	mov	r2, sl
 800648e:	4620      	mov	r0, r4
 8006490:	4639      	mov	r1, r7
 8006492:	f7fa f9db 	bl	800084c <__aeabi_ddiv>
 8006496:	ec41 0b10 	vmov	d0, r0, r1
 800649a:	b005      	add	sp, #20
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064a0 <__copybits>:
 80064a0:	3901      	subs	r1, #1
 80064a2:	b570      	push	{r4, r5, r6, lr}
 80064a4:	1149      	asrs	r1, r1, #5
 80064a6:	6914      	ldr	r4, [r2, #16]
 80064a8:	3101      	adds	r1, #1
 80064aa:	f102 0314 	add.w	r3, r2, #20
 80064ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064b6:	1f05      	subs	r5, r0, #4
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d30c      	bcc.n	80064d6 <__copybits+0x36>
 80064bc:	1aa3      	subs	r3, r4, r2
 80064be:	3b11      	subs	r3, #17
 80064c0:	f023 0303 	bic.w	r3, r3, #3
 80064c4:	3211      	adds	r2, #17
 80064c6:	42a2      	cmp	r2, r4
 80064c8:	bf88      	it	hi
 80064ca:	2300      	movhi	r3, #0
 80064cc:	4418      	add	r0, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	4288      	cmp	r0, r1
 80064d2:	d305      	bcc.n	80064e0 <__copybits+0x40>
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80064da:	f845 6f04 	str.w	r6, [r5, #4]!
 80064de:	e7eb      	b.n	80064b8 <__copybits+0x18>
 80064e0:	f840 3b04 	str.w	r3, [r0], #4
 80064e4:	e7f4      	b.n	80064d0 <__copybits+0x30>

080064e6 <__any_on>:
 80064e6:	f100 0214 	add.w	r2, r0, #20
 80064ea:	6900      	ldr	r0, [r0, #16]
 80064ec:	114b      	asrs	r3, r1, #5
 80064ee:	4298      	cmp	r0, r3
 80064f0:	b510      	push	{r4, lr}
 80064f2:	db11      	blt.n	8006518 <__any_on+0x32>
 80064f4:	dd0a      	ble.n	800650c <__any_on+0x26>
 80064f6:	f011 011f 	ands.w	r1, r1, #31
 80064fa:	d007      	beq.n	800650c <__any_on+0x26>
 80064fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006500:	fa24 f001 	lsr.w	r0, r4, r1
 8006504:	fa00 f101 	lsl.w	r1, r0, r1
 8006508:	428c      	cmp	r4, r1
 800650a:	d10b      	bne.n	8006524 <__any_on+0x3e>
 800650c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006510:	4293      	cmp	r3, r2
 8006512:	d803      	bhi.n	800651c <__any_on+0x36>
 8006514:	2000      	movs	r0, #0
 8006516:	bd10      	pop	{r4, pc}
 8006518:	4603      	mov	r3, r0
 800651a:	e7f7      	b.n	800650c <__any_on+0x26>
 800651c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006520:	2900      	cmp	r1, #0
 8006522:	d0f5      	beq.n	8006510 <__any_on+0x2a>
 8006524:	2001      	movs	r0, #1
 8006526:	e7f6      	b.n	8006516 <__any_on+0x30>

08006528 <sulp>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	460d      	mov	r5, r1
 800652e:	ec45 4b10 	vmov	d0, r4, r5
 8006532:	4616      	mov	r6, r2
 8006534:	f7ff feba 	bl	80062ac <__ulp>
 8006538:	ec51 0b10 	vmov	r0, r1, d0
 800653c:	b17e      	cbz	r6, 800655e <sulp+0x36>
 800653e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006542:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006546:	2b00      	cmp	r3, #0
 8006548:	dd09      	ble.n	800655e <sulp+0x36>
 800654a:	051b      	lsls	r3, r3, #20
 800654c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006550:	2400      	movs	r4, #0
 8006552:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	f7fa f84d 	bl	80005f8 <__aeabi_dmul>
 800655e:	ec41 0b10 	vmov	d0, r0, r1
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	0000      	movs	r0, r0
	...

08006568 <_strtod_l>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	b09f      	sub	sp, #124	@ 0x7c
 800656e:	460c      	mov	r4, r1
 8006570:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006572:	2200      	movs	r2, #0
 8006574:	921a      	str	r2, [sp, #104]	@ 0x68
 8006576:	9005      	str	r0, [sp, #20]
 8006578:	f04f 0a00 	mov.w	sl, #0
 800657c:	f04f 0b00 	mov.w	fp, #0
 8006580:	460a      	mov	r2, r1
 8006582:	9219      	str	r2, [sp, #100]	@ 0x64
 8006584:	7811      	ldrb	r1, [r2, #0]
 8006586:	292b      	cmp	r1, #43	@ 0x2b
 8006588:	d04a      	beq.n	8006620 <_strtod_l+0xb8>
 800658a:	d838      	bhi.n	80065fe <_strtod_l+0x96>
 800658c:	290d      	cmp	r1, #13
 800658e:	d832      	bhi.n	80065f6 <_strtod_l+0x8e>
 8006590:	2908      	cmp	r1, #8
 8006592:	d832      	bhi.n	80065fa <_strtod_l+0x92>
 8006594:	2900      	cmp	r1, #0
 8006596:	d03b      	beq.n	8006610 <_strtod_l+0xa8>
 8006598:	2200      	movs	r2, #0
 800659a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800659c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800659e:	782a      	ldrb	r2, [r5, #0]
 80065a0:	2a30      	cmp	r2, #48	@ 0x30
 80065a2:	f040 80b3 	bne.w	800670c <_strtod_l+0x1a4>
 80065a6:	786a      	ldrb	r2, [r5, #1]
 80065a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065ac:	2a58      	cmp	r2, #88	@ 0x58
 80065ae:	d16e      	bne.n	800668e <_strtod_l+0x126>
 80065b0:	9302      	str	r3, [sp, #8]
 80065b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4a8e      	ldr	r2, [pc, #568]	@ (80067f4 <_strtod_l+0x28c>)
 80065bc:	9805      	ldr	r0, [sp, #20]
 80065be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065c0:	a919      	add	r1, sp, #100	@ 0x64
 80065c2:	f001 fb05 	bl	8007bd0 <__gethex>
 80065c6:	f010 060f 	ands.w	r6, r0, #15
 80065ca:	4604      	mov	r4, r0
 80065cc:	d005      	beq.n	80065da <_strtod_l+0x72>
 80065ce:	2e06      	cmp	r6, #6
 80065d0:	d128      	bne.n	8006624 <_strtod_l+0xbc>
 80065d2:	3501      	adds	r5, #1
 80065d4:	2300      	movs	r3, #0
 80065d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80065d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 858e 	bne.w	80070fe <_strtod_l+0xb96>
 80065e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065e4:	b1cb      	cbz	r3, 800661a <_strtod_l+0xb2>
 80065e6:	4652      	mov	r2, sl
 80065e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80065ec:	ec43 2b10 	vmov	d0, r2, r3
 80065f0:	b01f      	add	sp, #124	@ 0x7c
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	2920      	cmp	r1, #32
 80065f8:	d1ce      	bne.n	8006598 <_strtod_l+0x30>
 80065fa:	3201      	adds	r2, #1
 80065fc:	e7c1      	b.n	8006582 <_strtod_l+0x1a>
 80065fe:	292d      	cmp	r1, #45	@ 0x2d
 8006600:	d1ca      	bne.n	8006598 <_strtod_l+0x30>
 8006602:	2101      	movs	r1, #1
 8006604:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006606:	1c51      	adds	r1, r2, #1
 8006608:	9119      	str	r1, [sp, #100]	@ 0x64
 800660a:	7852      	ldrb	r2, [r2, #1]
 800660c:	2a00      	cmp	r2, #0
 800660e:	d1c5      	bne.n	800659c <_strtod_l+0x34>
 8006610:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006612:	9419      	str	r4, [sp, #100]	@ 0x64
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8570 	bne.w	80070fa <_strtod_l+0xb92>
 800661a:	4652      	mov	r2, sl
 800661c:	465b      	mov	r3, fp
 800661e:	e7e5      	b.n	80065ec <_strtod_l+0x84>
 8006620:	2100      	movs	r1, #0
 8006622:	e7ef      	b.n	8006604 <_strtod_l+0x9c>
 8006624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006626:	b13a      	cbz	r2, 8006638 <_strtod_l+0xd0>
 8006628:	2135      	movs	r1, #53	@ 0x35
 800662a:	a81c      	add	r0, sp, #112	@ 0x70
 800662c:	f7ff ff38 	bl	80064a0 <__copybits>
 8006630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006632:	9805      	ldr	r0, [sp, #20]
 8006634:	f7ff fb06 	bl	8005c44 <_Bfree>
 8006638:	3e01      	subs	r6, #1
 800663a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800663c:	2e04      	cmp	r6, #4
 800663e:	d806      	bhi.n	800664e <_strtod_l+0xe6>
 8006640:	e8df f006 	tbb	[pc, r6]
 8006644:	201d0314 	.word	0x201d0314
 8006648:	14          	.byte	0x14
 8006649:	00          	.byte	0x00
 800664a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800664e:	05e1      	lsls	r1, r4, #23
 8006650:	bf48      	it	mi
 8006652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800665a:	0d1b      	lsrs	r3, r3, #20
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1bb      	bne.n	80065da <_strtod_l+0x72>
 8006662:	f7fe fbdd 	bl	8004e20 <__errno>
 8006666:	2322      	movs	r3, #34	@ 0x22
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	e7b6      	b.n	80065da <_strtod_l+0x72>
 800666c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800667c:	e7e7      	b.n	800664e <_strtod_l+0xe6>
 800667e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80067fc <_strtod_l+0x294>
 8006682:	e7e4      	b.n	800664e <_strtod_l+0xe6>
 8006684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006688:	f04f 3aff 	mov.w	sl, #4294967295
 800668c:	e7df      	b.n	800664e <_strtod_l+0xe6>
 800668e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	9219      	str	r2, [sp, #100]	@ 0x64
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b30      	cmp	r3, #48	@ 0x30
 8006698:	d0f9      	beq.n	800668e <_strtod_l+0x126>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d09d      	beq.n	80065da <_strtod_l+0x72>
 800669e:	2301      	movs	r3, #1
 80066a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80066a6:	2300      	movs	r3, #0
 80066a8:	9308      	str	r3, [sp, #32]
 80066aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ac:	461f      	mov	r7, r3
 80066ae:	220a      	movs	r2, #10
 80066b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80066b2:	7805      	ldrb	r5, [r0, #0]
 80066b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80066b8:	b2d9      	uxtb	r1, r3
 80066ba:	2909      	cmp	r1, #9
 80066bc:	d928      	bls.n	8006710 <_strtod_l+0x1a8>
 80066be:	494e      	ldr	r1, [pc, #312]	@ (80067f8 <_strtod_l+0x290>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	f001 f979 	bl	80079b8 <strncmp>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d032      	beq.n	8006730 <_strtod_l+0x1c8>
 80066ca:	2000      	movs	r0, #0
 80066cc:	462a      	mov	r2, r5
 80066ce:	4681      	mov	r9, r0
 80066d0:	463d      	mov	r5, r7
 80066d2:	4603      	mov	r3, r0
 80066d4:	2a65      	cmp	r2, #101	@ 0x65
 80066d6:	d001      	beq.n	80066dc <_strtod_l+0x174>
 80066d8:	2a45      	cmp	r2, #69	@ 0x45
 80066da:	d114      	bne.n	8006706 <_strtod_l+0x19e>
 80066dc:	b91d      	cbnz	r5, 80066e6 <_strtod_l+0x17e>
 80066de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e0:	4302      	orrs	r2, r0
 80066e2:	d095      	beq.n	8006610 <_strtod_l+0xa8>
 80066e4:	2500      	movs	r5, #0
 80066e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066e8:	1c62      	adds	r2, r4, #1
 80066ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80066ec:	7862      	ldrb	r2, [r4, #1]
 80066ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80066f0:	d077      	beq.n	80067e2 <_strtod_l+0x27a>
 80066f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80066f4:	d07b      	beq.n	80067ee <_strtod_l+0x286>
 80066f6:	f04f 0c00 	mov.w	ip, #0
 80066fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80066fe:	2909      	cmp	r1, #9
 8006700:	f240 8082 	bls.w	8006808 <_strtod_l+0x2a0>
 8006704:	9419      	str	r4, [sp, #100]	@ 0x64
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	e0a2      	b.n	8006852 <_strtod_l+0x2ea>
 800670c:	2300      	movs	r3, #0
 800670e:	e7c7      	b.n	80066a0 <_strtod_l+0x138>
 8006710:	2f08      	cmp	r7, #8
 8006712:	bfd5      	itete	le
 8006714:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006716:	9908      	ldrgt	r1, [sp, #32]
 8006718:	fb02 3301 	mlale	r3, r2, r1, r3
 800671c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006720:	f100 0001 	add.w	r0, r0, #1
 8006724:	bfd4      	ite	le
 8006726:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006728:	9308      	strgt	r3, [sp, #32]
 800672a:	3701      	adds	r7, #1
 800672c:	9019      	str	r0, [sp, #100]	@ 0x64
 800672e:	e7bf      	b.n	80066b0 <_strtod_l+0x148>
 8006730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	9219      	str	r2, [sp, #100]	@ 0x64
 8006736:	785a      	ldrb	r2, [r3, #1]
 8006738:	b37f      	cbz	r7, 800679a <_strtod_l+0x232>
 800673a:	4681      	mov	r9, r0
 800673c:	463d      	mov	r5, r7
 800673e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006742:	2b09      	cmp	r3, #9
 8006744:	d912      	bls.n	800676c <_strtod_l+0x204>
 8006746:	2301      	movs	r3, #1
 8006748:	e7c4      	b.n	80066d4 <_strtod_l+0x16c>
 800674a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006750:	785a      	ldrb	r2, [r3, #1]
 8006752:	3001      	adds	r0, #1
 8006754:	2a30      	cmp	r2, #48	@ 0x30
 8006756:	d0f8      	beq.n	800674a <_strtod_l+0x1e2>
 8006758:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800675c:	2b08      	cmp	r3, #8
 800675e:	f200 84d3 	bhi.w	8007108 <_strtod_l+0xba0>
 8006762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006764:	930c      	str	r3, [sp, #48]	@ 0x30
 8006766:	4681      	mov	r9, r0
 8006768:	2000      	movs	r0, #0
 800676a:	4605      	mov	r5, r0
 800676c:	3a30      	subs	r2, #48	@ 0x30
 800676e:	f100 0301 	add.w	r3, r0, #1
 8006772:	d02a      	beq.n	80067ca <_strtod_l+0x262>
 8006774:	4499      	add	r9, r3
 8006776:	eb00 0c05 	add.w	ip, r0, r5
 800677a:	462b      	mov	r3, r5
 800677c:	210a      	movs	r1, #10
 800677e:	4563      	cmp	r3, ip
 8006780:	d10d      	bne.n	800679e <_strtod_l+0x236>
 8006782:	1c69      	adds	r1, r5, #1
 8006784:	4401      	add	r1, r0
 8006786:	4428      	add	r0, r5
 8006788:	2808      	cmp	r0, #8
 800678a:	dc16      	bgt.n	80067ba <_strtod_l+0x252>
 800678c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800678e:	230a      	movs	r3, #10
 8006790:	fb03 2300 	mla	r3, r3, r0, r2
 8006794:	930a      	str	r3, [sp, #40]	@ 0x28
 8006796:	2300      	movs	r3, #0
 8006798:	e018      	b.n	80067cc <_strtod_l+0x264>
 800679a:	4638      	mov	r0, r7
 800679c:	e7da      	b.n	8006754 <_strtod_l+0x1ec>
 800679e:	2b08      	cmp	r3, #8
 80067a0:	f103 0301 	add.w	r3, r3, #1
 80067a4:	dc03      	bgt.n	80067ae <_strtod_l+0x246>
 80067a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80067a8:	434e      	muls	r6, r1
 80067aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80067ac:	e7e7      	b.n	800677e <_strtod_l+0x216>
 80067ae:	2b10      	cmp	r3, #16
 80067b0:	bfde      	ittt	le
 80067b2:	9e08      	ldrle	r6, [sp, #32]
 80067b4:	434e      	mulle	r6, r1
 80067b6:	9608      	strle	r6, [sp, #32]
 80067b8:	e7e1      	b.n	800677e <_strtod_l+0x216>
 80067ba:	280f      	cmp	r0, #15
 80067bc:	dceb      	bgt.n	8006796 <_strtod_l+0x22e>
 80067be:	9808      	ldr	r0, [sp, #32]
 80067c0:	230a      	movs	r3, #10
 80067c2:	fb03 2300 	mla	r3, r3, r0, r2
 80067c6:	9308      	str	r3, [sp, #32]
 80067c8:	e7e5      	b.n	8006796 <_strtod_l+0x22e>
 80067ca:	4629      	mov	r1, r5
 80067cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067ce:	1c50      	adds	r0, r2, #1
 80067d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80067d2:	7852      	ldrb	r2, [r2, #1]
 80067d4:	4618      	mov	r0, r3
 80067d6:	460d      	mov	r5, r1
 80067d8:	e7b1      	b.n	800673e <_strtod_l+0x1d6>
 80067da:	f04f 0900 	mov.w	r9, #0
 80067de:	2301      	movs	r3, #1
 80067e0:	e77d      	b.n	80066de <_strtod_l+0x176>
 80067e2:	f04f 0c00 	mov.w	ip, #0
 80067e6:	1ca2      	adds	r2, r4, #2
 80067e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80067ea:	78a2      	ldrb	r2, [r4, #2]
 80067ec:	e785      	b.n	80066fa <_strtod_l+0x192>
 80067ee:	f04f 0c01 	mov.w	ip, #1
 80067f2:	e7f8      	b.n	80067e6 <_strtod_l+0x27e>
 80067f4:	08026908 	.word	0x08026908
 80067f8:	080268f0 	.word	0x080268f0
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006802:	1c51      	adds	r1, r2, #1
 8006804:	9119      	str	r1, [sp, #100]	@ 0x64
 8006806:	7852      	ldrb	r2, [r2, #1]
 8006808:	2a30      	cmp	r2, #48	@ 0x30
 800680a:	d0f9      	beq.n	8006800 <_strtod_l+0x298>
 800680c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006810:	2908      	cmp	r1, #8
 8006812:	f63f af78 	bhi.w	8006706 <_strtod_l+0x19e>
 8006816:	3a30      	subs	r2, #48	@ 0x30
 8006818:	920e      	str	r2, [sp, #56]	@ 0x38
 800681a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800681c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800681e:	f04f 080a 	mov.w	r8, #10
 8006822:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006824:	1c56      	adds	r6, r2, #1
 8006826:	9619      	str	r6, [sp, #100]	@ 0x64
 8006828:	7852      	ldrb	r2, [r2, #1]
 800682a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800682e:	f1be 0f09 	cmp.w	lr, #9
 8006832:	d939      	bls.n	80068a8 <_strtod_l+0x340>
 8006834:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006836:	1a76      	subs	r6, r6, r1
 8006838:	2e08      	cmp	r6, #8
 800683a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800683e:	dc03      	bgt.n	8006848 <_strtod_l+0x2e0>
 8006840:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006842:	4588      	cmp	r8, r1
 8006844:	bfa8      	it	ge
 8006846:	4688      	movge	r8, r1
 8006848:	f1bc 0f00 	cmp.w	ip, #0
 800684c:	d001      	beq.n	8006852 <_strtod_l+0x2ea>
 800684e:	f1c8 0800 	rsb	r8, r8, #0
 8006852:	2d00      	cmp	r5, #0
 8006854:	d14e      	bne.n	80068f4 <_strtod_l+0x38c>
 8006856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006858:	4308      	orrs	r0, r1
 800685a:	f47f aebe 	bne.w	80065da <_strtod_l+0x72>
 800685e:	2b00      	cmp	r3, #0
 8006860:	f47f aed6 	bne.w	8006610 <_strtod_l+0xa8>
 8006864:	2a69      	cmp	r2, #105	@ 0x69
 8006866:	d028      	beq.n	80068ba <_strtod_l+0x352>
 8006868:	dc25      	bgt.n	80068b6 <_strtod_l+0x34e>
 800686a:	2a49      	cmp	r2, #73	@ 0x49
 800686c:	d025      	beq.n	80068ba <_strtod_l+0x352>
 800686e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006870:	f47f aece 	bne.w	8006610 <_strtod_l+0xa8>
 8006874:	499b      	ldr	r1, [pc, #620]	@ (8006ae4 <_strtod_l+0x57c>)
 8006876:	a819      	add	r0, sp, #100	@ 0x64
 8006878:	f001 fbcc 	bl	8008014 <__match>
 800687c:	2800      	cmp	r0, #0
 800687e:	f43f aec7 	beq.w	8006610 <_strtod_l+0xa8>
 8006882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b28      	cmp	r3, #40	@ 0x28
 8006888:	d12e      	bne.n	80068e8 <_strtod_l+0x380>
 800688a:	4997      	ldr	r1, [pc, #604]	@ (8006ae8 <_strtod_l+0x580>)
 800688c:	aa1c      	add	r2, sp, #112	@ 0x70
 800688e:	a819      	add	r0, sp, #100	@ 0x64
 8006890:	f001 fbd4 	bl	800803c <__hexnan>
 8006894:	2805      	cmp	r0, #5
 8006896:	d127      	bne.n	80068e8 <_strtod_l+0x380>
 8006898:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800689a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800689e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80068a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80068a6:	e698      	b.n	80065da <_strtod_l+0x72>
 80068a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068aa:	fb08 2101 	mla	r1, r8, r1, r2
 80068ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80068b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80068b4:	e7b5      	b.n	8006822 <_strtod_l+0x2ba>
 80068b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80068b8:	e7da      	b.n	8006870 <_strtod_l+0x308>
 80068ba:	498c      	ldr	r1, [pc, #560]	@ (8006aec <_strtod_l+0x584>)
 80068bc:	a819      	add	r0, sp, #100	@ 0x64
 80068be:	f001 fba9 	bl	8008014 <__match>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f43f aea4 	beq.w	8006610 <_strtod_l+0xa8>
 80068c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ca:	4989      	ldr	r1, [pc, #548]	@ (8006af0 <_strtod_l+0x588>)
 80068cc:	3b01      	subs	r3, #1
 80068ce:	a819      	add	r0, sp, #100	@ 0x64
 80068d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80068d2:	f001 fb9f 	bl	8008014 <__match>
 80068d6:	b910      	cbnz	r0, 80068de <_strtod_l+0x376>
 80068d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068da:	3301      	adds	r3, #1
 80068dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80068de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006b00 <_strtod_l+0x598>
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	e678      	b.n	80065da <_strtod_l+0x72>
 80068e8:	4882      	ldr	r0, [pc, #520]	@ (8006af4 <_strtod_l+0x58c>)
 80068ea:	f001 f8ed 	bl	8007ac8 <nan>
 80068ee:	ec5b ab10 	vmov	sl, fp, d0
 80068f2:	e672      	b.n	80065da <_strtod_l+0x72>
 80068f4:	eba8 0309 	sub.w	r3, r8, r9
 80068f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	bf08      	it	eq
 8006900:	462f      	moveq	r7, r5
 8006902:	2d10      	cmp	r5, #16
 8006904:	462c      	mov	r4, r5
 8006906:	bfa8      	it	ge
 8006908:	2410      	movge	r4, #16
 800690a:	f7f9 fdfb 	bl	8000504 <__aeabi_ui2d>
 800690e:	2d09      	cmp	r5, #9
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	dc13      	bgt.n	800693e <_strtod_l+0x3d6>
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f ae5e 	beq.w	80065da <_strtod_l+0x72>
 800691e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006920:	dd78      	ble.n	8006a14 <_strtod_l+0x4ac>
 8006922:	2b16      	cmp	r3, #22
 8006924:	dc5f      	bgt.n	80069e6 <_strtod_l+0x47e>
 8006926:	4974      	ldr	r1, [pc, #464]	@ (8006af8 <_strtod_l+0x590>)
 8006928:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800692c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006930:	4652      	mov	r2, sl
 8006932:	465b      	mov	r3, fp
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	4682      	mov	sl, r0
 800693a:	468b      	mov	fp, r1
 800693c:	e64d      	b.n	80065da <_strtod_l+0x72>
 800693e:	4b6e      	ldr	r3, [pc, #440]	@ (8006af8 <_strtod_l+0x590>)
 8006940:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006944:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006948:	f7f9 fe56 	bl	80005f8 <__aeabi_dmul>
 800694c:	4682      	mov	sl, r0
 800694e:	9808      	ldr	r0, [sp, #32]
 8006950:	468b      	mov	fp, r1
 8006952:	f7f9 fdd7 	bl	8000504 <__aeabi_ui2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	f7f9 fc95 	bl	800028c <__adddf3>
 8006962:	2d0f      	cmp	r5, #15
 8006964:	4682      	mov	sl, r0
 8006966:	468b      	mov	fp, r1
 8006968:	ddd5      	ble.n	8006916 <_strtod_l+0x3ae>
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	1b2c      	subs	r4, r5, r4
 800696e:	441c      	add	r4, r3
 8006970:	2c00      	cmp	r4, #0
 8006972:	f340 8096 	ble.w	8006aa2 <_strtod_l+0x53a>
 8006976:	f014 030f 	ands.w	r3, r4, #15
 800697a:	d00a      	beq.n	8006992 <_strtod_l+0x42a>
 800697c:	495e      	ldr	r1, [pc, #376]	@ (8006af8 <_strtod_l+0x590>)
 800697e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006982:	4652      	mov	r2, sl
 8006984:	465b      	mov	r3, fp
 8006986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698a:	f7f9 fe35 	bl	80005f8 <__aeabi_dmul>
 800698e:	4682      	mov	sl, r0
 8006990:	468b      	mov	fp, r1
 8006992:	f034 040f 	bics.w	r4, r4, #15
 8006996:	d073      	beq.n	8006a80 <_strtod_l+0x518>
 8006998:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800699c:	dd48      	ble.n	8006a30 <_strtod_l+0x4c8>
 800699e:	2400      	movs	r4, #0
 80069a0:	46a0      	mov	r8, r4
 80069a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80069a4:	46a1      	mov	r9, r4
 80069a6:	9a05      	ldr	r2, [sp, #20]
 80069a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006b00 <_strtod_l+0x598>
 80069ac:	2322      	movs	r3, #34	@ 0x22
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f ae0f 	beq.w	80065da <_strtod_l+0x72>
 80069bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069be:	9805      	ldr	r0, [sp, #20]
 80069c0:	f7ff f940 	bl	8005c44 <_Bfree>
 80069c4:	9805      	ldr	r0, [sp, #20]
 80069c6:	4649      	mov	r1, r9
 80069c8:	f7ff f93c 	bl	8005c44 <_Bfree>
 80069cc:	9805      	ldr	r0, [sp, #20]
 80069ce:	4641      	mov	r1, r8
 80069d0:	f7ff f938 	bl	8005c44 <_Bfree>
 80069d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069d6:	9805      	ldr	r0, [sp, #20]
 80069d8:	f7ff f934 	bl	8005c44 <_Bfree>
 80069dc:	9805      	ldr	r0, [sp, #20]
 80069de:	4621      	mov	r1, r4
 80069e0:	f7ff f930 	bl	8005c44 <_Bfree>
 80069e4:	e5f9      	b.n	80065da <_strtod_l+0x72>
 80069e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069ec:	4293      	cmp	r3, r2
 80069ee:	dbbc      	blt.n	800696a <_strtod_l+0x402>
 80069f0:	4c41      	ldr	r4, [pc, #260]	@ (8006af8 <_strtod_l+0x590>)
 80069f2:	f1c5 050f 	rsb	r5, r5, #15
 80069f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069fa:	4652      	mov	r2, sl
 80069fc:	465b      	mov	r3, fp
 80069fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a02:	f7f9 fdf9 	bl	80005f8 <__aeabi_dmul>
 8006a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a08:	1b5d      	subs	r5, r3, r5
 8006a0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a12:	e78f      	b.n	8006934 <_strtod_l+0x3cc>
 8006a14:	3316      	adds	r3, #22
 8006a16:	dba8      	blt.n	800696a <_strtod_l+0x402>
 8006a18:	4b37      	ldr	r3, [pc, #220]	@ (8006af8 <_strtod_l+0x590>)
 8006a1a:	eba9 0808 	sub.w	r8, r9, r8
 8006a1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a22:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a26:	4650      	mov	r0, sl
 8006a28:	4659      	mov	r1, fp
 8006a2a:	f7f9 ff0f 	bl	800084c <__aeabi_ddiv>
 8006a2e:	e783      	b.n	8006938 <_strtod_l+0x3d0>
 8006a30:	4b32      	ldr	r3, [pc, #200]	@ (8006afc <_strtod_l+0x594>)
 8006a32:	9308      	str	r3, [sp, #32]
 8006a34:	2300      	movs	r3, #0
 8006a36:	1124      	asrs	r4, r4, #4
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	461e      	mov	r6, r3
 8006a3e:	2c01      	cmp	r4, #1
 8006a40:	dc21      	bgt.n	8006a86 <_strtod_l+0x51e>
 8006a42:	b10b      	cbz	r3, 8006a48 <_strtod_l+0x4e0>
 8006a44:	4682      	mov	sl, r0
 8006a46:	468b      	mov	fp, r1
 8006a48:	492c      	ldr	r1, [pc, #176]	@ (8006afc <_strtod_l+0x594>)
 8006a4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a52:	4652      	mov	r2, sl
 8006a54:	465b      	mov	r3, fp
 8006a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a5a:	f7f9 fdcd 	bl	80005f8 <__aeabi_dmul>
 8006a5e:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <_strtod_l+0x598>)
 8006a60:	460a      	mov	r2, r1
 8006a62:	400b      	ands	r3, r1
 8006a64:	4927      	ldr	r1, [pc, #156]	@ (8006b04 <_strtod_l+0x59c>)
 8006a66:	428b      	cmp	r3, r1
 8006a68:	4682      	mov	sl, r0
 8006a6a:	d898      	bhi.n	800699e <_strtod_l+0x436>
 8006a6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf86      	itte	hi
 8006a74:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006b08 <_strtod_l+0x5a0>
 8006a78:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a80:	2300      	movs	r3, #0
 8006a82:	9308      	str	r3, [sp, #32]
 8006a84:	e07a      	b.n	8006b7c <_strtod_l+0x614>
 8006a86:	07e2      	lsls	r2, r4, #31
 8006a88:	d505      	bpl.n	8006a96 <_strtod_l+0x52e>
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	2301      	movs	r3, #1
 8006a96:	9a08      	ldr	r2, [sp, #32]
 8006a98:	3208      	adds	r2, #8
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	1064      	asrs	r4, r4, #1
 8006a9e:	9208      	str	r2, [sp, #32]
 8006aa0:	e7cd      	b.n	8006a3e <_strtod_l+0x4d6>
 8006aa2:	d0ed      	beq.n	8006a80 <_strtod_l+0x518>
 8006aa4:	4264      	negs	r4, r4
 8006aa6:	f014 020f 	ands.w	r2, r4, #15
 8006aaa:	d00a      	beq.n	8006ac2 <_strtod_l+0x55a>
 8006aac:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <_strtod_l+0x590>)
 8006aae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fec7 	bl	800084c <__aeabi_ddiv>
 8006abe:	4682      	mov	sl, r0
 8006ac0:	468b      	mov	fp, r1
 8006ac2:	1124      	asrs	r4, r4, #4
 8006ac4:	d0dc      	beq.n	8006a80 <_strtod_l+0x518>
 8006ac6:	2c1f      	cmp	r4, #31
 8006ac8:	dd20      	ble.n	8006b0c <_strtod_l+0x5a4>
 8006aca:	2400      	movs	r4, #0
 8006acc:	46a0      	mov	r8, r4
 8006ace:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ad0:	46a1      	mov	r9, r4
 8006ad2:	9a05      	ldr	r2, [sp, #20]
 8006ad4:	2322      	movs	r3, #34	@ 0x22
 8006ad6:	f04f 0a00 	mov.w	sl, #0
 8006ada:	f04f 0b00 	mov.w	fp, #0
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e768      	b.n	80069b4 <_strtod_l+0x44c>
 8006ae2:	bf00      	nop
 8006ae4:	080266dd 	.word	0x080266dd
 8006ae8:	080268f4 	.word	0x080268f4
 8006aec:	080266d5 	.word	0x080266d5
 8006af0:	0802670c 	.word	0x0802670c
 8006af4:	080266cf 	.word	0x080266cf
 8006af8:	08026828 	.word	0x08026828
 8006afc:	08026800 	.word	0x08026800
 8006b00:	7ff00000 	.word	0x7ff00000
 8006b04:	7ca00000 	.word	0x7ca00000
 8006b08:	7fefffff 	.word	0x7fefffff
 8006b0c:	f014 0310 	ands.w	r3, r4, #16
 8006b10:	bf18      	it	ne
 8006b12:	236a      	movne	r3, #106	@ 0x6a
 8006b14:	4ea9      	ldr	r6, [pc, #676]	@ (8006dbc <_strtod_l+0x854>)
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	07e2      	lsls	r2, r4, #31
 8006b20:	d504      	bpl.n	8006b2c <_strtod_l+0x5c4>
 8006b22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	1064      	asrs	r4, r4, #1
 8006b2e:	f106 0608 	add.w	r6, r6, #8
 8006b32:	d1f4      	bne.n	8006b1e <_strtod_l+0x5b6>
 8006b34:	b10b      	cbz	r3, 8006b3a <_strtod_l+0x5d2>
 8006b36:	4682      	mov	sl, r0
 8006b38:	468b      	mov	fp, r1
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	b1b3      	cbz	r3, 8006b6c <_strtod_l+0x604>
 8006b3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	4659      	mov	r1, fp
 8006b4a:	dd0f      	ble.n	8006b6c <_strtod_l+0x604>
 8006b4c:	2b1f      	cmp	r3, #31
 8006b4e:	dd55      	ble.n	8006bfc <_strtod_l+0x694>
 8006b50:	2b34      	cmp	r3, #52	@ 0x34
 8006b52:	bfde      	ittt	le
 8006b54:	f04f 33ff 	movle.w	r3, #4294967295
 8006b58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b5c:	4093      	lslle	r3, r2
 8006b5e:	f04f 0a00 	mov.w	sl, #0
 8006b62:	bfcc      	ite	gt
 8006b64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b68:	ea03 0b01 	andle.w	fp, r3, r1
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d1a6      	bne.n	8006aca <_strtod_l+0x562>
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b82:	9805      	ldr	r0, [sp, #20]
 8006b84:	462b      	mov	r3, r5
 8006b86:	463a      	mov	r2, r7
 8006b88:	f7ff f8c4 	bl	8005d14 <__s2b>
 8006b8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f43f af05 	beq.w	800699e <_strtod_l+0x436>
 8006b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	eba9 0308 	sub.w	r3, r9, r8
 8006b9c:	bfa8      	it	ge
 8006b9e:	2300      	movge	r3, #0
 8006ba0:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ba2:	2400      	movs	r4, #0
 8006ba4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ba8:	9316      	str	r3, [sp, #88]	@ 0x58
 8006baa:	46a0      	mov	r8, r4
 8006bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bae:	9805      	ldr	r0, [sp, #20]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	f7ff f807 	bl	8005bc4 <_Balloc>
 8006bb6:	4681      	mov	r9, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f43f aef4 	beq.w	80069a6 <_strtod_l+0x43e>
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	3202      	adds	r2, #2
 8006bc4:	f103 010c 	add.w	r1, r3, #12
 8006bc8:	0092      	lsls	r2, r2, #2
 8006bca:	300c      	adds	r0, #12
 8006bcc:	f000 ff6c 	bl	8007aa8 <memcpy>
 8006bd0:	ec4b ab10 	vmov	d0, sl, fp
 8006bd4:	9805      	ldr	r0, [sp, #20]
 8006bd6:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bd8:	a91b      	add	r1, sp, #108	@ 0x6c
 8006bda:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006bde:	f7ff fbd5 	bl	800638c <__d2b>
 8006be2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f43f aede 	beq.w	80069a6 <_strtod_l+0x43e>
 8006bea:	9805      	ldr	r0, [sp, #20]
 8006bec:	2101      	movs	r1, #1
 8006bee:	f7ff f927 	bl	8005e40 <__i2b>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	b948      	cbnz	r0, 8006c0a <_strtod_l+0x6a2>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	e6d4      	b.n	80069a6 <_strtod_l+0x43e>
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	ea03 0a0a 	and.w	sl, r3, sl
 8006c08:	e7b0      	b.n	8006b6c <_strtod_l+0x604>
 8006c0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	bfab      	itete	ge
 8006c12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c1a:	bfac      	ite	ge
 8006c1c:	18ef      	addge	r7, r5, r3
 8006c1e:	1b5e      	sublt	r6, r3, r5
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	1aed      	subs	r5, r5, r3
 8006c24:	4415      	add	r5, r2
 8006c26:	4b66      	ldr	r3, [pc, #408]	@ (8006dc0 <_strtod_l+0x858>)
 8006c28:	3d01      	subs	r5, #1
 8006c2a:	429d      	cmp	r5, r3
 8006c2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c30:	da50      	bge.n	8006cd4 <_strtod_l+0x76c>
 8006c32:	1b5b      	subs	r3, r3, r5
 8006c34:	2b1f      	cmp	r3, #31
 8006c36:	eba2 0203 	sub.w	r2, r2, r3
 8006c3a:	f04f 0101 	mov.w	r1, #1
 8006c3e:	dc3d      	bgt.n	8006cbc <_strtod_l+0x754>
 8006c40:	fa01 f303 	lsl.w	r3, r1, r3
 8006c44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c46:	2300      	movs	r3, #0
 8006c48:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c4a:	18bd      	adds	r5, r7, r2
 8006c4c:	9b08      	ldr	r3, [sp, #32]
 8006c4e:	42af      	cmp	r7, r5
 8006c50:	4416      	add	r6, r2
 8006c52:	441e      	add	r6, r3
 8006c54:	463b      	mov	r3, r7
 8006c56:	bfa8      	it	ge
 8006c58:	462b      	movge	r3, r5
 8006c5a:	42b3      	cmp	r3, r6
 8006c5c:	bfa8      	it	ge
 8006c5e:	4633      	movge	r3, r6
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bfc2      	ittt	gt
 8006c64:	1aed      	subgt	r5, r5, r3
 8006c66:	1af6      	subgt	r6, r6, r3
 8006c68:	1aff      	subgt	r7, r7, r3
 8006c6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd16      	ble.n	8006c9e <_strtod_l+0x736>
 8006c70:	4641      	mov	r1, r8
 8006c72:	9805      	ldr	r0, [sp, #20]
 8006c74:	461a      	mov	r2, r3
 8006c76:	f7ff f9a3 	bl	8005fc0 <__pow5mult>
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d0ba      	beq.n	8006bf6 <_strtod_l+0x68e>
 8006c80:	4601      	mov	r1, r0
 8006c82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c84:	9805      	ldr	r0, [sp, #20]
 8006c86:	f7ff f8f1 	bl	8005e6c <__multiply>
 8006c8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f43f ae8a 	beq.w	80069a6 <_strtod_l+0x43e>
 8006c92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c94:	9805      	ldr	r0, [sp, #20]
 8006c96:	f7fe ffd5 	bl	8005c44 <_Bfree>
 8006c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c9e:	2d00      	cmp	r5, #0
 8006ca0:	dc1d      	bgt.n	8006cde <_strtod_l+0x776>
 8006ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dd23      	ble.n	8006cf0 <_strtod_l+0x788>
 8006ca8:	4649      	mov	r1, r9
 8006caa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	f7ff f987 	bl	8005fc0 <__pow5mult>
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	b9e0      	cbnz	r0, 8006cf0 <_strtod_l+0x788>
 8006cb6:	f04f 0900 	mov.w	r9, #0
 8006cba:	e674      	b.n	80069a6 <_strtod_l+0x43e>
 8006cbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006cc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006cc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006cc8:	35e2      	adds	r5, #226	@ 0xe2
 8006cca:	fa01 f305 	lsl.w	r3, r1, r5
 8006cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006cd2:	e7ba      	b.n	8006c4a <_strtod_l+0x6e2>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cd8:	2301      	movs	r3, #1
 8006cda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cdc:	e7b5      	b.n	8006c4a <_strtod_l+0x6e2>
 8006cde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ce0:	9805      	ldr	r0, [sp, #20]
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	f7ff f9c6 	bl	8006074 <__lshift>
 8006ce8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1d9      	bne.n	8006ca2 <_strtod_l+0x73a>
 8006cee:	e65a      	b.n	80069a6 <_strtod_l+0x43e>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	dd07      	ble.n	8006d04 <_strtod_l+0x79c>
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	f7ff f9bb 	bl	8006074 <__lshift>
 8006cfe:	4681      	mov	r9, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d0d8      	beq.n	8006cb6 <_strtod_l+0x74e>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	dd08      	ble.n	8006d1a <_strtod_l+0x7b2>
 8006d08:	4641      	mov	r1, r8
 8006d0a:	9805      	ldr	r0, [sp, #20]
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	f7ff f9b1 	bl	8006074 <__lshift>
 8006d12:	4680      	mov	r8, r0
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f43f ae46 	beq.w	80069a6 <_strtod_l+0x43e>
 8006d1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d1c:	9805      	ldr	r0, [sp, #20]
 8006d1e:	464a      	mov	r2, r9
 8006d20:	f7ff fa30 	bl	8006184 <__mdiff>
 8006d24:	4604      	mov	r4, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f ae3d 	beq.w	80069a6 <_strtod_l+0x43e>
 8006d2c:	68c3      	ldr	r3, [r0, #12]
 8006d2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d30:	2300      	movs	r3, #0
 8006d32:	60c3      	str	r3, [r0, #12]
 8006d34:	4641      	mov	r1, r8
 8006d36:	f7ff fa09 	bl	800614c <__mcmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	da46      	bge.n	8006dcc <_strtod_l+0x864>
 8006d3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d40:	ea53 030a 	orrs.w	r3, r3, sl
 8006d44:	d16c      	bne.n	8006e20 <_strtod_l+0x8b8>
 8006d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d168      	bne.n	8006e20 <_strtod_l+0x8b8>
 8006d4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d52:	0d1b      	lsrs	r3, r3, #20
 8006d54:	051b      	lsls	r3, r3, #20
 8006d56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d5a:	d961      	bls.n	8006e20 <_strtod_l+0x8b8>
 8006d5c:	6963      	ldr	r3, [r4, #20]
 8006d5e:	b913      	cbnz	r3, 8006d66 <_strtod_l+0x7fe>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	dd5c      	ble.n	8006e20 <_strtod_l+0x8b8>
 8006d66:	4621      	mov	r1, r4
 8006d68:	2201      	movs	r2, #1
 8006d6a:	9805      	ldr	r0, [sp, #20]
 8006d6c:	f7ff f982 	bl	8006074 <__lshift>
 8006d70:	4641      	mov	r1, r8
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7ff f9ea 	bl	800614c <__mcmp>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	dd51      	ble.n	8006e20 <_strtod_l+0x8b8>
 8006d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d80:	9a08      	ldr	r2, [sp, #32]
 8006d82:	0d1b      	lsrs	r3, r3, #20
 8006d84:	051b      	lsls	r3, r3, #20
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	d06b      	beq.n	8006e62 <_strtod_l+0x8fa>
 8006d8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d8e:	d868      	bhi.n	8006e62 <_strtod_l+0x8fa>
 8006d90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d94:	f67f ae9d 	bls.w	8006ad2 <_strtod_l+0x56a>
 8006d98:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc4 <_strtod_l+0x85c>)
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f7f9 fc2a 	bl	80005f8 <__aeabi_dmul>
 8006da4:	4b08      	ldr	r3, [pc, #32]	@ (8006dc8 <_strtod_l+0x860>)
 8006da6:	400b      	ands	r3, r1
 8006da8:	4682      	mov	sl, r0
 8006daa:	468b      	mov	fp, r1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f47f ae05 	bne.w	80069bc <_strtod_l+0x454>
 8006db2:	9a05      	ldr	r2, [sp, #20]
 8006db4:	2322      	movs	r3, #34	@ 0x22
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e600      	b.n	80069bc <_strtod_l+0x454>
 8006dba:	bf00      	nop
 8006dbc:	08026920 	.word	0x08026920
 8006dc0:	fffffc02 	.word	0xfffffc02
 8006dc4:	39500000 	.word	0x39500000
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006dd0:	d165      	bne.n	8006e9e <_strtod_l+0x936>
 8006dd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dd8:	b35a      	cbz	r2, 8006e32 <_strtod_l+0x8ca>
 8006dda:	4a9f      	ldr	r2, [pc, #636]	@ (8007058 <_strtod_l+0xaf0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d12b      	bne.n	8006e38 <_strtod_l+0x8d0>
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	4651      	mov	r1, sl
 8006de4:	b303      	cbz	r3, 8006e28 <_strtod_l+0x8c0>
 8006de6:	4b9d      	ldr	r3, [pc, #628]	@ (800705c <_strtod_l+0xaf4>)
 8006de8:	465a      	mov	r2, fp
 8006dea:	4013      	ands	r3, r2
 8006dec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	d81b      	bhi.n	8006e2e <_strtod_l+0x8c6>
 8006df6:	0d1b      	lsrs	r3, r3, #20
 8006df8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	4299      	cmp	r1, r3
 8006e02:	d119      	bne.n	8006e38 <_strtod_l+0x8d0>
 8006e04:	4b96      	ldr	r3, [pc, #600]	@ (8007060 <_strtod_l+0xaf8>)
 8006e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d102      	bne.n	8006e12 <_strtod_l+0x8aa>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	f43f adca 	beq.w	80069a6 <_strtod_l+0x43e>
 8006e12:	4b92      	ldr	r3, [pc, #584]	@ (800705c <_strtod_l+0xaf4>)
 8006e14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e16:	401a      	ands	r2, r3
 8006e18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e1c:	f04f 0a00 	mov.w	sl, #0
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1b8      	bne.n	8006d98 <_strtod_l+0x830>
 8006e26:	e5c9      	b.n	80069bc <_strtod_l+0x454>
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2c:	e7e8      	b.n	8006e00 <_strtod_l+0x898>
 8006e2e:	4613      	mov	r3, r2
 8006e30:	e7e6      	b.n	8006e00 <_strtod_l+0x898>
 8006e32:	ea53 030a 	orrs.w	r3, r3, sl
 8006e36:	d0a1      	beq.n	8006d7c <_strtod_l+0x814>
 8006e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e3a:	b1db      	cbz	r3, 8006e74 <_strtod_l+0x90c>
 8006e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e3e:	4213      	tst	r3, r2
 8006e40:	d0ee      	beq.n	8006e20 <_strtod_l+0x8b8>
 8006e42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e44:	9a08      	ldr	r2, [sp, #32]
 8006e46:	4650      	mov	r0, sl
 8006e48:	4659      	mov	r1, fp
 8006e4a:	b1bb      	cbz	r3, 8006e7c <_strtod_l+0x914>
 8006e4c:	f7ff fb6c 	bl	8006528 <sulp>
 8006e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e54:	ec53 2b10 	vmov	r2, r3, d0
 8006e58:	f7f9 fa18 	bl	800028c <__adddf3>
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	468b      	mov	fp, r1
 8006e60:	e7de      	b.n	8006e20 <_strtod_l+0x8b8>
 8006e62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8006e72:	e7d5      	b.n	8006e20 <_strtod_l+0x8b8>
 8006e74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e76:	ea13 0f0a 	tst.w	r3, sl
 8006e7a:	e7e1      	b.n	8006e40 <_strtod_l+0x8d8>
 8006e7c:	f7ff fb54 	bl	8006528 <sulp>
 8006e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e84:	ec53 2b10 	vmov	r2, r3, d0
 8006e88:	f7f9 f9fe 	bl	8000288 <__aeabi_dsub>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4682      	mov	sl, r0
 8006e92:	468b      	mov	fp, r1
 8006e94:	f7f9 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0c1      	beq.n	8006e20 <_strtod_l+0x8b8>
 8006e9c:	e619      	b.n	8006ad2 <_strtod_l+0x56a>
 8006e9e:	4641      	mov	r1, r8
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff facb 	bl	800643c <__ratio>
 8006ea6:	ec57 6b10 	vmov	r6, r7, d0
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 fe1c 	bl	8000af0 <__aeabi_dcmple>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d06f      	beq.n	8006f9c <_strtod_l+0xa34>
 8006ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d17a      	bne.n	8006fb8 <_strtod_l+0xa50>
 8006ec2:	f1ba 0f00 	cmp.w	sl, #0
 8006ec6:	d158      	bne.n	8006f7a <_strtod_l+0xa12>
 8006ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d15a      	bne.n	8006f88 <_strtod_l+0xa20>
 8006ed2:	4b64      	ldr	r3, [pc, #400]	@ (8007064 <_strtod_l+0xafc>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f7f9 fdff 	bl	8000adc <__aeabi_dcmplt>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d159      	bne.n	8006f96 <_strtod_l+0xa2e>
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4b60      	ldr	r3, [pc, #384]	@ (8007068 <_strtod_l+0xb00>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7f9 fb85 	bl	80005f8 <__aeabi_dmul>
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006ef6:	9606      	str	r6, [sp, #24]
 8006ef8:	9307      	str	r3, [sp, #28]
 8006efa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006efe:	4d57      	ldr	r5, [pc, #348]	@ (800705c <_strtod_l+0xaf4>)
 8006f00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f06:	401d      	ands	r5, r3
 8006f08:	4b58      	ldr	r3, [pc, #352]	@ (800706c <_strtod_l+0xb04>)
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	f040 80b2 	bne.w	8007074 <_strtod_l+0xb0c>
 8006f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f16:	ec4b ab10 	vmov	d0, sl, fp
 8006f1a:	f7ff f9c7 	bl	80062ac <__ulp>
 8006f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f22:	ec51 0b10 	vmov	r0, r1, d0
 8006f26:	f7f9 fb67 	bl	80005f8 <__aeabi_dmul>
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	f7f9 f9ad 	bl	800028c <__adddf3>
 8006f32:	460b      	mov	r3, r1
 8006f34:	4949      	ldr	r1, [pc, #292]	@ (800705c <_strtod_l+0xaf4>)
 8006f36:	4a4e      	ldr	r2, [pc, #312]	@ (8007070 <_strtod_l+0xb08>)
 8006f38:	4019      	ands	r1, r3
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	d942      	bls.n	8006fc6 <_strtod_l+0xa5e>
 8006f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f42:	4b47      	ldr	r3, [pc, #284]	@ (8007060 <_strtod_l+0xaf8>)
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d103      	bne.n	8006f50 <_strtod_l+0x9e8>
 8006f48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f43f ad2b 	beq.w	80069a6 <_strtod_l+0x43e>
 8006f50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007060 <_strtod_l+0xaf8>
 8006f54:	f04f 3aff 	mov.w	sl, #4294967295
 8006f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f5a:	9805      	ldr	r0, [sp, #20]
 8006f5c:	f7fe fe72 	bl	8005c44 <_Bfree>
 8006f60:	9805      	ldr	r0, [sp, #20]
 8006f62:	4649      	mov	r1, r9
 8006f64:	f7fe fe6e 	bl	8005c44 <_Bfree>
 8006f68:	9805      	ldr	r0, [sp, #20]
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	f7fe fe6a 	bl	8005c44 <_Bfree>
 8006f70:	9805      	ldr	r0, [sp, #20]
 8006f72:	4621      	mov	r1, r4
 8006f74:	f7fe fe66 	bl	8005c44 <_Bfree>
 8006f78:	e618      	b.n	8006bac <_strtod_l+0x644>
 8006f7a:	f1ba 0f01 	cmp.w	sl, #1
 8006f7e:	d103      	bne.n	8006f88 <_strtod_l+0xa20>
 8006f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f43f ada5 	beq.w	8006ad2 <_strtod_l+0x56a>
 8006f88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007038 <_strtod_l+0xad0>
 8006f8c:	4f35      	ldr	r7, [pc, #212]	@ (8007064 <_strtod_l+0xafc>)
 8006f8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f92:	2600      	movs	r6, #0
 8006f94:	e7b1      	b.n	8006efa <_strtod_l+0x992>
 8006f96:	4f34      	ldr	r7, [pc, #208]	@ (8007068 <_strtod_l+0xb00>)
 8006f98:	2600      	movs	r6, #0
 8006f9a:	e7aa      	b.n	8006ef2 <_strtod_l+0x98a>
 8006f9c:	4b32      	ldr	r3, [pc, #200]	@ (8007068 <_strtod_l+0xb00>)
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7f9 fb28 	bl	80005f8 <__aeabi_dmul>
 8006fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d09f      	beq.n	8006ef2 <_strtod_l+0x98a>
 8006fb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fb6:	e7a0      	b.n	8006efa <_strtod_l+0x992>
 8006fb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007040 <_strtod_l+0xad8>
 8006fbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fc0:	ec57 6b17 	vmov	r6, r7, d7
 8006fc4:	e799      	b.n	8006efa <_strtod_l+0x992>
 8006fc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1c1      	bne.n	8006f58 <_strtod_l+0x9f0>
 8006fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fd8:	0d1b      	lsrs	r3, r3, #20
 8006fda:	051b      	lsls	r3, r3, #20
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	d1bb      	bne.n	8006f58 <_strtod_l+0x9f0>
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 fe50 	bl	8000c88 <__aeabi_d2lz>
 8006fe8:	f7f9 fad8 	bl	800059c <__aeabi_l2d>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 f948 	bl	8000288 <__aeabi_dsub>
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007000:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007006:	ea46 060a 	orr.w	r6, r6, sl
 800700a:	431e      	orrs	r6, r3
 800700c:	d06f      	beq.n	80070ee <_strtod_l+0xb86>
 800700e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007048 <_strtod_l+0xae0>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fd62 	bl	8000adc <__aeabi_dcmplt>
 8007018:	2800      	cmp	r0, #0
 800701a:	f47f accf 	bne.w	80069bc <_strtod_l+0x454>
 800701e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007050 <_strtod_l+0xae8>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007028:	f7f9 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800702c:	2800      	cmp	r0, #0
 800702e:	d093      	beq.n	8006f58 <_strtod_l+0x9f0>
 8007030:	e4c4      	b.n	80069bc <_strtod_l+0x454>
 8007032:	bf00      	nop
 8007034:	f3af 8000 	nop.w
 8007038:	00000000 	.word	0x00000000
 800703c:	bff00000 	.word	0xbff00000
 8007040:	00000000 	.word	0x00000000
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	94a03595 	.word	0x94a03595
 800704c:	3fdfffff 	.word	0x3fdfffff
 8007050:	35afe535 	.word	0x35afe535
 8007054:	3fe00000 	.word	0x3fe00000
 8007058:	000fffff 	.word	0x000fffff
 800705c:	7ff00000 	.word	0x7ff00000
 8007060:	7fefffff 	.word	0x7fefffff
 8007064:	3ff00000 	.word	0x3ff00000
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	7fe00000 	.word	0x7fe00000
 8007070:	7c9fffff 	.word	0x7c9fffff
 8007074:	9b08      	ldr	r3, [sp, #32]
 8007076:	b323      	cbz	r3, 80070c2 <_strtod_l+0xb5a>
 8007078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800707c:	d821      	bhi.n	80070c2 <_strtod_l+0xb5a>
 800707e:	a328      	add	r3, pc, #160	@ (adr r3, 8007120 <_strtod_l+0xbb8>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	4630      	mov	r0, r6
 8007086:	4639      	mov	r1, r7
 8007088:	f7f9 fd32 	bl	8000af0 <__aeabi_dcmple>
 800708c:	b1a0      	cbz	r0, 80070b8 <_strtod_l+0xb50>
 800708e:	4639      	mov	r1, r7
 8007090:	4630      	mov	r0, r6
 8007092:	f7f9 fd89 	bl	8000ba8 <__aeabi_d2uiz>
 8007096:	2801      	cmp	r0, #1
 8007098:	bf38      	it	cc
 800709a:	2001      	movcc	r0, #1
 800709c:	f7f9 fa32 	bl	8000504 <__aeabi_ui2d>
 80070a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	b9fb      	cbnz	r3, 80070e8 <_strtod_l+0xb80>
 80070a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80070ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80070b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80070b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80070be:	1b5b      	subs	r3, r3, r5
 80070c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80070c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80070ca:	f7ff f8ef 	bl	80062ac <__ulp>
 80070ce:	4650      	mov	r0, sl
 80070d0:	ec53 2b10 	vmov	r2, r3, d0
 80070d4:	4659      	mov	r1, fp
 80070d6:	f7f9 fa8f 	bl	80005f8 <__aeabi_dmul>
 80070da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070de:	f7f9 f8d5 	bl	800028c <__adddf3>
 80070e2:	4682      	mov	sl, r0
 80070e4:	468b      	mov	fp, r1
 80070e6:	e770      	b.n	8006fca <_strtod_l+0xa62>
 80070e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070ec:	e7e0      	b.n	80070b0 <_strtod_l+0xb48>
 80070ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007128 <_strtod_l+0xbc0>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fcf2 	bl	8000adc <__aeabi_dcmplt>
 80070f8:	e798      	b.n	800702c <_strtod_l+0xac4>
 80070fa:	2300      	movs	r3, #0
 80070fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	f7ff ba6d 	b.w	80065e2 <_strtod_l+0x7a>
 8007108:	2a65      	cmp	r2, #101	@ 0x65
 800710a:	f43f ab66 	beq.w	80067da <_strtod_l+0x272>
 800710e:	2a45      	cmp	r2, #69	@ 0x45
 8007110:	f43f ab63 	beq.w	80067da <_strtod_l+0x272>
 8007114:	2301      	movs	r3, #1
 8007116:	f7ff bb9e 	b.w	8006856 <_strtod_l+0x2ee>
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w
 8007120:	ffc00000 	.word	0xffc00000
 8007124:	41dfffff 	.word	0x41dfffff
 8007128:	94a03595 	.word	0x94a03595
 800712c:	3fcfffff 	.word	0x3fcfffff

08007130 <_strtod_r>:
 8007130:	4b01      	ldr	r3, [pc, #4]	@ (8007138 <_strtod_r+0x8>)
 8007132:	f7ff ba19 	b.w	8006568 <_strtod_l>
 8007136:	bf00      	nop
 8007138:	2000005c 	.word	0x2000005c

0800713c <_strtol_l.constprop.0>:
 800713c:	2b24      	cmp	r3, #36	@ 0x24
 800713e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007142:	4686      	mov	lr, r0
 8007144:	4690      	mov	r8, r2
 8007146:	d801      	bhi.n	800714c <_strtol_l.constprop.0+0x10>
 8007148:	2b01      	cmp	r3, #1
 800714a:	d106      	bne.n	800715a <_strtol_l.constprop.0+0x1e>
 800714c:	f7fd fe68 	bl	8004e20 <__errno>
 8007150:	2316      	movs	r3, #22
 8007152:	6003      	str	r3, [r0, #0]
 8007154:	2000      	movs	r0, #0
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	4834      	ldr	r0, [pc, #208]	@ (800722c <_strtol_l.constprop.0+0xf0>)
 800715c:	460d      	mov	r5, r1
 800715e:	462a      	mov	r2, r5
 8007160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007164:	5d06      	ldrb	r6, [r0, r4]
 8007166:	f016 0608 	ands.w	r6, r6, #8
 800716a:	d1f8      	bne.n	800715e <_strtol_l.constprop.0+0x22>
 800716c:	2c2d      	cmp	r4, #45	@ 0x2d
 800716e:	d12d      	bne.n	80071cc <_strtol_l.constprop.0+0x90>
 8007170:	782c      	ldrb	r4, [r5, #0]
 8007172:	2601      	movs	r6, #1
 8007174:	1c95      	adds	r5, r2, #2
 8007176:	f033 0210 	bics.w	r2, r3, #16
 800717a:	d109      	bne.n	8007190 <_strtol_l.constprop.0+0x54>
 800717c:	2c30      	cmp	r4, #48	@ 0x30
 800717e:	d12a      	bne.n	80071d6 <_strtol_l.constprop.0+0x9a>
 8007180:	782a      	ldrb	r2, [r5, #0]
 8007182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007186:	2a58      	cmp	r2, #88	@ 0x58
 8007188:	d125      	bne.n	80071d6 <_strtol_l.constprop.0+0x9a>
 800718a:	786c      	ldrb	r4, [r5, #1]
 800718c:	2310      	movs	r3, #16
 800718e:	3502      	adds	r5, #2
 8007190:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007194:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007198:	2200      	movs	r2, #0
 800719a:	fbbc f9f3 	udiv	r9, ip, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80071a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071a8:	2f09      	cmp	r7, #9
 80071aa:	d81b      	bhi.n	80071e4 <_strtol_l.constprop.0+0xa8>
 80071ac:	463c      	mov	r4, r7
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	dd27      	ble.n	8007202 <_strtol_l.constprop.0+0xc6>
 80071b2:	1c57      	adds	r7, r2, #1
 80071b4:	d007      	beq.n	80071c6 <_strtol_l.constprop.0+0x8a>
 80071b6:	4581      	cmp	r9, r0
 80071b8:	d320      	bcc.n	80071fc <_strtol_l.constprop.0+0xc0>
 80071ba:	d101      	bne.n	80071c0 <_strtol_l.constprop.0+0x84>
 80071bc:	45a2      	cmp	sl, r4
 80071be:	db1d      	blt.n	80071fc <_strtol_l.constprop.0+0xc0>
 80071c0:	fb00 4003 	mla	r0, r0, r3, r4
 80071c4:	2201      	movs	r2, #1
 80071c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ca:	e7eb      	b.n	80071a4 <_strtol_l.constprop.0+0x68>
 80071cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80071ce:	bf04      	itt	eq
 80071d0:	782c      	ldrbeq	r4, [r5, #0]
 80071d2:	1c95      	addeq	r5, r2, #2
 80071d4:	e7cf      	b.n	8007176 <_strtol_l.constprop.0+0x3a>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1da      	bne.n	8007190 <_strtol_l.constprop.0+0x54>
 80071da:	2c30      	cmp	r4, #48	@ 0x30
 80071dc:	bf0c      	ite	eq
 80071de:	2308      	moveq	r3, #8
 80071e0:	230a      	movne	r3, #10
 80071e2:	e7d5      	b.n	8007190 <_strtol_l.constprop.0+0x54>
 80071e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071e8:	2f19      	cmp	r7, #25
 80071ea:	d801      	bhi.n	80071f0 <_strtol_l.constprop.0+0xb4>
 80071ec:	3c37      	subs	r4, #55	@ 0x37
 80071ee:	e7de      	b.n	80071ae <_strtol_l.constprop.0+0x72>
 80071f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071f4:	2f19      	cmp	r7, #25
 80071f6:	d804      	bhi.n	8007202 <_strtol_l.constprop.0+0xc6>
 80071f8:	3c57      	subs	r4, #87	@ 0x57
 80071fa:	e7d8      	b.n	80071ae <_strtol_l.constprop.0+0x72>
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	e7e1      	b.n	80071c6 <_strtol_l.constprop.0+0x8a>
 8007202:	1c53      	adds	r3, r2, #1
 8007204:	d108      	bne.n	8007218 <_strtol_l.constprop.0+0xdc>
 8007206:	2322      	movs	r3, #34	@ 0x22
 8007208:	f8ce 3000 	str.w	r3, [lr]
 800720c:	4660      	mov	r0, ip
 800720e:	f1b8 0f00 	cmp.w	r8, #0
 8007212:	d0a0      	beq.n	8007156 <_strtol_l.constprop.0+0x1a>
 8007214:	1e69      	subs	r1, r5, #1
 8007216:	e006      	b.n	8007226 <_strtol_l.constprop.0+0xea>
 8007218:	b106      	cbz	r6, 800721c <_strtol_l.constprop.0+0xe0>
 800721a:	4240      	negs	r0, r0
 800721c:	f1b8 0f00 	cmp.w	r8, #0
 8007220:	d099      	beq.n	8007156 <_strtol_l.constprop.0+0x1a>
 8007222:	2a00      	cmp	r2, #0
 8007224:	d1f6      	bne.n	8007214 <_strtol_l.constprop.0+0xd8>
 8007226:	f8c8 1000 	str.w	r1, [r8]
 800722a:	e794      	b.n	8007156 <_strtol_l.constprop.0+0x1a>
 800722c:	08026949 	.word	0x08026949

08007230 <_strtol_r>:
 8007230:	f7ff bf84 	b.w	800713c <_strtol_l.constprop.0>

08007234 <__ssputs_r>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	688e      	ldr	r6, [r1, #8]
 800723a:	461f      	mov	r7, r3
 800723c:	42be      	cmp	r6, r7
 800723e:	680b      	ldr	r3, [r1, #0]
 8007240:	4682      	mov	sl, r0
 8007242:	460c      	mov	r4, r1
 8007244:	4690      	mov	r8, r2
 8007246:	d82d      	bhi.n	80072a4 <__ssputs_r+0x70>
 8007248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800724c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007250:	d026      	beq.n	80072a0 <__ssputs_r+0x6c>
 8007252:	6965      	ldr	r5, [r4, #20]
 8007254:	6909      	ldr	r1, [r1, #16]
 8007256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800725a:	eba3 0901 	sub.w	r9, r3, r1
 800725e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007262:	1c7b      	adds	r3, r7, #1
 8007264:	444b      	add	r3, r9
 8007266:	106d      	asrs	r5, r5, #1
 8007268:	429d      	cmp	r5, r3
 800726a:	bf38      	it	cc
 800726c:	461d      	movcc	r5, r3
 800726e:	0553      	lsls	r3, r2, #21
 8007270:	d527      	bpl.n	80072c2 <__ssputs_r+0x8e>
 8007272:	4629      	mov	r1, r5
 8007274:	f7fc fbf0 	bl	8003a58 <_malloc_r>
 8007278:	4606      	mov	r6, r0
 800727a:	b360      	cbz	r0, 80072d6 <__ssputs_r+0xa2>
 800727c:	6921      	ldr	r1, [r4, #16]
 800727e:	464a      	mov	r2, r9
 8007280:	f000 fc12 	bl	8007aa8 <memcpy>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800728a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	6126      	str	r6, [r4, #16]
 8007292:	6165      	str	r5, [r4, #20]
 8007294:	444e      	add	r6, r9
 8007296:	eba5 0509 	sub.w	r5, r5, r9
 800729a:	6026      	str	r6, [r4, #0]
 800729c:	60a5      	str	r5, [r4, #8]
 800729e:	463e      	mov	r6, r7
 80072a0:	42be      	cmp	r6, r7
 80072a2:	d900      	bls.n	80072a6 <__ssputs_r+0x72>
 80072a4:	463e      	mov	r6, r7
 80072a6:	6820      	ldr	r0, [r4, #0]
 80072a8:	4632      	mov	r2, r6
 80072aa:	4641      	mov	r1, r8
 80072ac:	f000 fb6a 	bl	8007984 <memmove>
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	1b9b      	subs	r3, r3, r6
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	4433      	add	r3, r6
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	2000      	movs	r0, #0
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	462a      	mov	r2, r5
 80072c4:	f000 ff67 	bl	8008196 <_realloc_r>
 80072c8:	4606      	mov	r6, r0
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d1e0      	bne.n	8007290 <__ssputs_r+0x5c>
 80072ce:	6921      	ldr	r1, [r4, #16]
 80072d0:	4650      	mov	r0, sl
 80072d2:	f7fe fc2d 	bl	8005b30 <_free_r>
 80072d6:	230c      	movs	r3, #12
 80072d8:	f8ca 3000 	str.w	r3, [sl]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072e2:	81a3      	strh	r3, [r4, #12]
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e7e9      	b.n	80072be <__ssputs_r+0x8a>
	...

080072ec <_svfiprintf_r>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	4698      	mov	r8, r3
 80072f2:	898b      	ldrh	r3, [r1, #12]
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	b09d      	sub	sp, #116	@ 0x74
 80072f8:	4607      	mov	r7, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	4614      	mov	r4, r2
 80072fe:	d510      	bpl.n	8007322 <_svfiprintf_r+0x36>
 8007300:	690b      	ldr	r3, [r1, #16]
 8007302:	b973      	cbnz	r3, 8007322 <_svfiprintf_r+0x36>
 8007304:	2140      	movs	r1, #64	@ 0x40
 8007306:	f7fc fba7 	bl	8003a58 <_malloc_r>
 800730a:	6028      	str	r0, [r5, #0]
 800730c:	6128      	str	r0, [r5, #16]
 800730e:	b930      	cbnz	r0, 800731e <_svfiprintf_r+0x32>
 8007310:	230c      	movs	r3, #12
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	b01d      	add	sp, #116	@ 0x74
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	2340      	movs	r3, #64	@ 0x40
 8007320:	616b      	str	r3, [r5, #20]
 8007322:	2300      	movs	r3, #0
 8007324:	9309      	str	r3, [sp, #36]	@ 0x24
 8007326:	2320      	movs	r3, #32
 8007328:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800732c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007330:	2330      	movs	r3, #48	@ 0x30
 8007332:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074d0 <_svfiprintf_r+0x1e4>
 8007336:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800733a:	f04f 0901 	mov.w	r9, #1
 800733e:	4623      	mov	r3, r4
 8007340:	469a      	mov	sl, r3
 8007342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007346:	b10a      	cbz	r2, 800734c <_svfiprintf_r+0x60>
 8007348:	2a25      	cmp	r2, #37	@ 0x25
 800734a:	d1f9      	bne.n	8007340 <_svfiprintf_r+0x54>
 800734c:	ebba 0b04 	subs.w	fp, sl, r4
 8007350:	d00b      	beq.n	800736a <_svfiprintf_r+0x7e>
 8007352:	465b      	mov	r3, fp
 8007354:	4622      	mov	r2, r4
 8007356:	4629      	mov	r1, r5
 8007358:	4638      	mov	r0, r7
 800735a:	f7ff ff6b 	bl	8007234 <__ssputs_r>
 800735e:	3001      	adds	r0, #1
 8007360:	f000 80a7 	beq.w	80074b2 <_svfiprintf_r+0x1c6>
 8007364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007366:	445a      	add	r2, fp
 8007368:	9209      	str	r2, [sp, #36]	@ 0x24
 800736a:	f89a 3000 	ldrb.w	r3, [sl]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 809f 	beq.w	80074b2 <_svfiprintf_r+0x1c6>
 8007374:	2300      	movs	r3, #0
 8007376:	f04f 32ff 	mov.w	r2, #4294967295
 800737a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800737e:	f10a 0a01 	add.w	sl, sl, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	9307      	str	r3, [sp, #28]
 8007386:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800738a:	931a      	str	r3, [sp, #104]	@ 0x68
 800738c:	4654      	mov	r4, sl
 800738e:	2205      	movs	r2, #5
 8007390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007394:	484e      	ldr	r0, [pc, #312]	@ (80074d0 <_svfiprintf_r+0x1e4>)
 8007396:	f7f8 ff1b 	bl	80001d0 <memchr>
 800739a:	9a04      	ldr	r2, [sp, #16]
 800739c:	b9d8      	cbnz	r0, 80073d6 <_svfiprintf_r+0xea>
 800739e:	06d0      	lsls	r0, r2, #27
 80073a0:	bf44      	itt	mi
 80073a2:	2320      	movmi	r3, #32
 80073a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a8:	0711      	lsls	r1, r2, #28
 80073aa:	bf44      	itt	mi
 80073ac:	232b      	movmi	r3, #43	@ 0x2b
 80073ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073b2:	f89a 3000 	ldrb.w	r3, [sl]
 80073b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b8:	d015      	beq.n	80073e6 <_svfiprintf_r+0xfa>
 80073ba:	9a07      	ldr	r2, [sp, #28]
 80073bc:	4654      	mov	r4, sl
 80073be:	2000      	movs	r0, #0
 80073c0:	f04f 0c0a 	mov.w	ip, #10
 80073c4:	4621      	mov	r1, r4
 80073c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ca:	3b30      	subs	r3, #48	@ 0x30
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d94b      	bls.n	8007468 <_svfiprintf_r+0x17c>
 80073d0:	b1b0      	cbz	r0, 8007400 <_svfiprintf_r+0x114>
 80073d2:	9207      	str	r2, [sp, #28]
 80073d4:	e014      	b.n	8007400 <_svfiprintf_r+0x114>
 80073d6:	eba0 0308 	sub.w	r3, r0, r8
 80073da:	fa09 f303 	lsl.w	r3, r9, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	46a2      	mov	sl, r4
 80073e4:	e7d2      	b.n	800738c <_svfiprintf_r+0xa0>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	1d19      	adds	r1, r3, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	9103      	str	r1, [sp, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bfbb      	ittet	lt
 80073f2:	425b      	neglt	r3, r3
 80073f4:	f042 0202 	orrlt.w	r2, r2, #2
 80073f8:	9307      	strge	r3, [sp, #28]
 80073fa:	9307      	strlt	r3, [sp, #28]
 80073fc:	bfb8      	it	lt
 80073fe:	9204      	strlt	r2, [sp, #16]
 8007400:	7823      	ldrb	r3, [r4, #0]
 8007402:	2b2e      	cmp	r3, #46	@ 0x2e
 8007404:	d10a      	bne.n	800741c <_svfiprintf_r+0x130>
 8007406:	7863      	ldrb	r3, [r4, #1]
 8007408:	2b2a      	cmp	r3, #42	@ 0x2a
 800740a:	d132      	bne.n	8007472 <_svfiprintf_r+0x186>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	1d1a      	adds	r2, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	9203      	str	r2, [sp, #12]
 8007414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007418:	3402      	adds	r4, #2
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074e0 <_svfiprintf_r+0x1f4>
 8007420:	7821      	ldrb	r1, [r4, #0]
 8007422:	2203      	movs	r2, #3
 8007424:	4650      	mov	r0, sl
 8007426:	f7f8 fed3 	bl	80001d0 <memchr>
 800742a:	b138      	cbz	r0, 800743c <_svfiprintf_r+0x150>
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	eba0 000a 	sub.w	r0, r0, sl
 8007432:	2240      	movs	r2, #64	@ 0x40
 8007434:	4082      	lsls	r2, r0
 8007436:	4313      	orrs	r3, r2
 8007438:	3401      	adds	r4, #1
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007440:	4824      	ldr	r0, [pc, #144]	@ (80074d4 <_svfiprintf_r+0x1e8>)
 8007442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007446:	2206      	movs	r2, #6
 8007448:	f7f8 fec2 	bl	80001d0 <memchr>
 800744c:	2800      	cmp	r0, #0
 800744e:	d036      	beq.n	80074be <_svfiprintf_r+0x1d2>
 8007450:	4b21      	ldr	r3, [pc, #132]	@ (80074d8 <_svfiprintf_r+0x1ec>)
 8007452:	bb1b      	cbnz	r3, 800749c <_svfiprintf_r+0x1b0>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	3307      	adds	r3, #7
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	3308      	adds	r3, #8
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007462:	4433      	add	r3, r6
 8007464:	9309      	str	r3, [sp, #36]	@ 0x24
 8007466:	e76a      	b.n	800733e <_svfiprintf_r+0x52>
 8007468:	fb0c 3202 	mla	r2, ip, r2, r3
 800746c:	460c      	mov	r4, r1
 800746e:	2001      	movs	r0, #1
 8007470:	e7a8      	b.n	80073c4 <_svfiprintf_r+0xd8>
 8007472:	2300      	movs	r3, #0
 8007474:	3401      	adds	r4, #1
 8007476:	9305      	str	r3, [sp, #20]
 8007478:	4619      	mov	r1, r3
 800747a:	f04f 0c0a 	mov.w	ip, #10
 800747e:	4620      	mov	r0, r4
 8007480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007484:	3a30      	subs	r2, #48	@ 0x30
 8007486:	2a09      	cmp	r2, #9
 8007488:	d903      	bls.n	8007492 <_svfiprintf_r+0x1a6>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0c6      	beq.n	800741c <_svfiprintf_r+0x130>
 800748e:	9105      	str	r1, [sp, #20]
 8007490:	e7c4      	b.n	800741c <_svfiprintf_r+0x130>
 8007492:	fb0c 2101 	mla	r1, ip, r1, r2
 8007496:	4604      	mov	r4, r0
 8007498:	2301      	movs	r3, #1
 800749a:	e7f0      	b.n	800747e <_svfiprintf_r+0x192>
 800749c:	ab03      	add	r3, sp, #12
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	462a      	mov	r2, r5
 80074a2:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <_svfiprintf_r+0x1f0>)
 80074a4:	a904      	add	r1, sp, #16
 80074a6:	4638      	mov	r0, r7
 80074a8:	f7fc fc50 	bl	8003d4c <_printf_float>
 80074ac:	1c42      	adds	r2, r0, #1
 80074ae:	4606      	mov	r6, r0
 80074b0:	d1d6      	bne.n	8007460 <_svfiprintf_r+0x174>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	065b      	lsls	r3, r3, #25
 80074b6:	f53f af2d 	bmi.w	8007314 <_svfiprintf_r+0x28>
 80074ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074bc:	e72c      	b.n	8007318 <_svfiprintf_r+0x2c>
 80074be:	ab03      	add	r3, sp, #12
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	462a      	mov	r2, r5
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <_svfiprintf_r+0x1f0>)
 80074c6:	a904      	add	r1, sp, #16
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7fc fed7 	bl	800427c <_printf_i>
 80074ce:	e7ed      	b.n	80074ac <_svfiprintf_r+0x1c0>
 80074d0:	08026a49 	.word	0x08026a49
 80074d4:	08026a53 	.word	0x08026a53
 80074d8:	08003d4d 	.word	0x08003d4d
 80074dc:	08007235 	.word	0x08007235
 80074e0:	08026a4f 	.word	0x08026a4f

080074e4 <__sfputc_r>:
 80074e4:	6893      	ldr	r3, [r2, #8]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	b410      	push	{r4}
 80074ec:	6093      	str	r3, [r2, #8]
 80074ee:	da08      	bge.n	8007502 <__sfputc_r+0x1e>
 80074f0:	6994      	ldr	r4, [r2, #24]
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	db01      	blt.n	80074fa <__sfputc_r+0x16>
 80074f6:	290a      	cmp	r1, #10
 80074f8:	d103      	bne.n	8007502 <__sfputc_r+0x1e>
 80074fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074fe:	f7fd bb98 	b.w	8004c32 <__swbuf_r>
 8007502:	6813      	ldr	r3, [r2, #0]
 8007504:	1c58      	adds	r0, r3, #1
 8007506:	6010      	str	r0, [r2, #0]
 8007508:	7019      	strb	r1, [r3, #0]
 800750a:	4608      	mov	r0, r1
 800750c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007510:	4770      	bx	lr

08007512 <__sfputs_r>:
 8007512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	4614      	mov	r4, r2
 800751a:	18d5      	adds	r5, r2, r3
 800751c:	42ac      	cmp	r4, r5
 800751e:	d101      	bne.n	8007524 <__sfputs_r+0x12>
 8007520:	2000      	movs	r0, #0
 8007522:	e007      	b.n	8007534 <__sfputs_r+0x22>
 8007524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007528:	463a      	mov	r2, r7
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ffda 	bl	80074e4 <__sfputc_r>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d1f3      	bne.n	800751c <__sfputs_r+0xa>
 8007534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007538 <_vfiprintf_r>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	460d      	mov	r5, r1
 800753e:	b09d      	sub	sp, #116	@ 0x74
 8007540:	4614      	mov	r4, r2
 8007542:	4698      	mov	r8, r3
 8007544:	4606      	mov	r6, r0
 8007546:	b118      	cbz	r0, 8007550 <_vfiprintf_r+0x18>
 8007548:	6a03      	ldr	r3, [r0, #32]
 800754a:	b90b      	cbnz	r3, 8007550 <_vfiprintf_r+0x18>
 800754c:	f7fd fa56 	bl	80049fc <__sinit>
 8007550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007552:	07d9      	lsls	r1, r3, #31
 8007554:	d405      	bmi.n	8007562 <_vfiprintf_r+0x2a>
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	059a      	lsls	r2, r3, #22
 800755a:	d402      	bmi.n	8007562 <_vfiprintf_r+0x2a>
 800755c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800755e:	f7fd fc8a 	bl	8004e76 <__retarget_lock_acquire_recursive>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	071b      	lsls	r3, r3, #28
 8007566:	d501      	bpl.n	800756c <_vfiprintf_r+0x34>
 8007568:	692b      	ldr	r3, [r5, #16]
 800756a:	b99b      	cbnz	r3, 8007594 <_vfiprintf_r+0x5c>
 800756c:	4629      	mov	r1, r5
 800756e:	4630      	mov	r0, r6
 8007570:	f7fd fb9e 	bl	8004cb0 <__swsetup_r>
 8007574:	b170      	cbz	r0, 8007594 <_vfiprintf_r+0x5c>
 8007576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007578:	07dc      	lsls	r4, r3, #31
 800757a:	d504      	bpl.n	8007586 <_vfiprintf_r+0x4e>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	b01d      	add	sp, #116	@ 0x74
 8007582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	0598      	lsls	r0, r3, #22
 800758a:	d4f7      	bmi.n	800757c <_vfiprintf_r+0x44>
 800758c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800758e:	f7fd fc73 	bl	8004e78 <__retarget_lock_release_recursive>
 8007592:	e7f3      	b.n	800757c <_vfiprintf_r+0x44>
 8007594:	2300      	movs	r3, #0
 8007596:	9309      	str	r3, [sp, #36]	@ 0x24
 8007598:	2320      	movs	r3, #32
 800759a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800759e:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a2:	2330      	movs	r3, #48	@ 0x30
 80075a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007754 <_vfiprintf_r+0x21c>
 80075a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075ac:	f04f 0901 	mov.w	r9, #1
 80075b0:	4623      	mov	r3, r4
 80075b2:	469a      	mov	sl, r3
 80075b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b8:	b10a      	cbz	r2, 80075be <_vfiprintf_r+0x86>
 80075ba:	2a25      	cmp	r2, #37	@ 0x25
 80075bc:	d1f9      	bne.n	80075b2 <_vfiprintf_r+0x7a>
 80075be:	ebba 0b04 	subs.w	fp, sl, r4
 80075c2:	d00b      	beq.n	80075dc <_vfiprintf_r+0xa4>
 80075c4:	465b      	mov	r3, fp
 80075c6:	4622      	mov	r2, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ffa1 	bl	8007512 <__sfputs_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f000 80a7 	beq.w	8007724 <_vfiprintf_r+0x1ec>
 80075d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d8:	445a      	add	r2, fp
 80075da:	9209      	str	r2, [sp, #36]	@ 0x24
 80075dc:	f89a 3000 	ldrb.w	r3, [sl]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 809f 	beq.w	8007724 <_vfiprintf_r+0x1ec>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f0:	f10a 0a01 	add.w	sl, sl, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80075fe:	4654      	mov	r4, sl
 8007600:	2205      	movs	r2, #5
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	4853      	ldr	r0, [pc, #332]	@ (8007754 <_vfiprintf_r+0x21c>)
 8007608:	f7f8 fde2 	bl	80001d0 <memchr>
 800760c:	9a04      	ldr	r2, [sp, #16]
 800760e:	b9d8      	cbnz	r0, 8007648 <_vfiprintf_r+0x110>
 8007610:	06d1      	lsls	r1, r2, #27
 8007612:	bf44      	itt	mi
 8007614:	2320      	movmi	r3, #32
 8007616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800761a:	0713      	lsls	r3, r2, #28
 800761c:	bf44      	itt	mi
 800761e:	232b      	movmi	r3, #43	@ 0x2b
 8007620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b2a      	cmp	r3, #42	@ 0x2a
 800762a:	d015      	beq.n	8007658 <_vfiprintf_r+0x120>
 800762c:	9a07      	ldr	r2, [sp, #28]
 800762e:	4654      	mov	r4, sl
 8007630:	2000      	movs	r0, #0
 8007632:	f04f 0c0a 	mov.w	ip, #10
 8007636:	4621      	mov	r1, r4
 8007638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763c:	3b30      	subs	r3, #48	@ 0x30
 800763e:	2b09      	cmp	r3, #9
 8007640:	d94b      	bls.n	80076da <_vfiprintf_r+0x1a2>
 8007642:	b1b0      	cbz	r0, 8007672 <_vfiprintf_r+0x13a>
 8007644:	9207      	str	r2, [sp, #28]
 8007646:	e014      	b.n	8007672 <_vfiprintf_r+0x13a>
 8007648:	eba0 0308 	sub.w	r3, r0, r8
 800764c:	fa09 f303 	lsl.w	r3, r9, r3
 8007650:	4313      	orrs	r3, r2
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	46a2      	mov	sl, r4
 8007656:	e7d2      	b.n	80075fe <_vfiprintf_r+0xc6>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1d19      	adds	r1, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	9103      	str	r1, [sp, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfbb      	ittet	lt
 8007664:	425b      	neglt	r3, r3
 8007666:	f042 0202 	orrlt.w	r2, r2, #2
 800766a:	9307      	strge	r3, [sp, #28]
 800766c:	9307      	strlt	r3, [sp, #28]
 800766e:	bfb8      	it	lt
 8007670:	9204      	strlt	r2, [sp, #16]
 8007672:	7823      	ldrb	r3, [r4, #0]
 8007674:	2b2e      	cmp	r3, #46	@ 0x2e
 8007676:	d10a      	bne.n	800768e <_vfiprintf_r+0x156>
 8007678:	7863      	ldrb	r3, [r4, #1]
 800767a:	2b2a      	cmp	r3, #42	@ 0x2a
 800767c:	d132      	bne.n	80076e4 <_vfiprintf_r+0x1ac>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	9203      	str	r2, [sp, #12]
 8007686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800768a:	3402      	adds	r4, #2
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007764 <_vfiprintf_r+0x22c>
 8007692:	7821      	ldrb	r1, [r4, #0]
 8007694:	2203      	movs	r2, #3
 8007696:	4650      	mov	r0, sl
 8007698:	f7f8 fd9a 	bl	80001d0 <memchr>
 800769c:	b138      	cbz	r0, 80076ae <_vfiprintf_r+0x176>
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	eba0 000a 	sub.w	r0, r0, sl
 80076a4:	2240      	movs	r2, #64	@ 0x40
 80076a6:	4082      	lsls	r2, r0
 80076a8:	4313      	orrs	r3, r2
 80076aa:	3401      	adds	r4, #1
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b2:	4829      	ldr	r0, [pc, #164]	@ (8007758 <_vfiprintf_r+0x220>)
 80076b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076b8:	2206      	movs	r2, #6
 80076ba:	f7f8 fd89 	bl	80001d0 <memchr>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d03f      	beq.n	8007742 <_vfiprintf_r+0x20a>
 80076c2:	4b26      	ldr	r3, [pc, #152]	@ (800775c <_vfiprintf_r+0x224>)
 80076c4:	bb1b      	cbnz	r3, 800770e <_vfiprintf_r+0x1d6>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	3307      	adds	r3, #7
 80076ca:	f023 0307 	bic.w	r3, r3, #7
 80076ce:	3308      	adds	r3, #8
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d4:	443b      	add	r3, r7
 80076d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d8:	e76a      	b.n	80075b0 <_vfiprintf_r+0x78>
 80076da:	fb0c 3202 	mla	r2, ip, r2, r3
 80076de:	460c      	mov	r4, r1
 80076e0:	2001      	movs	r0, #1
 80076e2:	e7a8      	b.n	8007636 <_vfiprintf_r+0xfe>
 80076e4:	2300      	movs	r3, #0
 80076e6:	3401      	adds	r4, #1
 80076e8:	9305      	str	r3, [sp, #20]
 80076ea:	4619      	mov	r1, r3
 80076ec:	f04f 0c0a 	mov.w	ip, #10
 80076f0:	4620      	mov	r0, r4
 80076f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f6:	3a30      	subs	r2, #48	@ 0x30
 80076f8:	2a09      	cmp	r2, #9
 80076fa:	d903      	bls.n	8007704 <_vfiprintf_r+0x1cc>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0c6      	beq.n	800768e <_vfiprintf_r+0x156>
 8007700:	9105      	str	r1, [sp, #20]
 8007702:	e7c4      	b.n	800768e <_vfiprintf_r+0x156>
 8007704:	fb0c 2101 	mla	r1, ip, r1, r2
 8007708:	4604      	mov	r4, r0
 800770a:	2301      	movs	r3, #1
 800770c:	e7f0      	b.n	80076f0 <_vfiprintf_r+0x1b8>
 800770e:	ab03      	add	r3, sp, #12
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	462a      	mov	r2, r5
 8007714:	4b12      	ldr	r3, [pc, #72]	@ (8007760 <_vfiprintf_r+0x228>)
 8007716:	a904      	add	r1, sp, #16
 8007718:	4630      	mov	r0, r6
 800771a:	f7fc fb17 	bl	8003d4c <_printf_float>
 800771e:	4607      	mov	r7, r0
 8007720:	1c78      	adds	r0, r7, #1
 8007722:	d1d6      	bne.n	80076d2 <_vfiprintf_r+0x19a>
 8007724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007726:	07d9      	lsls	r1, r3, #31
 8007728:	d405      	bmi.n	8007736 <_vfiprintf_r+0x1fe>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	059a      	lsls	r2, r3, #22
 800772e:	d402      	bmi.n	8007736 <_vfiprintf_r+0x1fe>
 8007730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007732:	f7fd fba1 	bl	8004e78 <__retarget_lock_release_recursive>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	065b      	lsls	r3, r3, #25
 800773a:	f53f af1f 	bmi.w	800757c <_vfiprintf_r+0x44>
 800773e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007740:	e71e      	b.n	8007580 <_vfiprintf_r+0x48>
 8007742:	ab03      	add	r3, sp, #12
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	462a      	mov	r2, r5
 8007748:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <_vfiprintf_r+0x228>)
 800774a:	a904      	add	r1, sp, #16
 800774c:	4630      	mov	r0, r6
 800774e:	f7fc fd95 	bl	800427c <_printf_i>
 8007752:	e7e4      	b.n	800771e <_vfiprintf_r+0x1e6>
 8007754:	08026a49 	.word	0x08026a49
 8007758:	08026a53 	.word	0x08026a53
 800775c:	08003d4d 	.word	0x08003d4d
 8007760:	08007513 	.word	0x08007513
 8007764:	08026a4f 	.word	0x08026a4f

08007768 <__sflush_r>:
 8007768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	0716      	lsls	r6, r2, #28
 8007772:	4605      	mov	r5, r0
 8007774:	460c      	mov	r4, r1
 8007776:	d454      	bmi.n	8007822 <__sflush_r+0xba>
 8007778:	684b      	ldr	r3, [r1, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc02      	bgt.n	8007784 <__sflush_r+0x1c>
 800777e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	dd48      	ble.n	8007816 <__sflush_r+0xae>
 8007784:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007786:	2e00      	cmp	r6, #0
 8007788:	d045      	beq.n	8007816 <__sflush_r+0xae>
 800778a:	2300      	movs	r3, #0
 800778c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007790:	682f      	ldr	r7, [r5, #0]
 8007792:	6a21      	ldr	r1, [r4, #32]
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	d030      	beq.n	80077fa <__sflush_r+0x92>
 8007798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	0759      	lsls	r1, r3, #29
 800779e:	d505      	bpl.n	80077ac <__sflush_r+0x44>
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077a6:	b10b      	cbz	r3, 80077ac <__sflush_r+0x44>
 80077a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077b0:	6a21      	ldr	r1, [r4, #32]
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b0      	blx	r6
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	d106      	bne.n	80077ca <__sflush_r+0x62>
 80077bc:	6829      	ldr	r1, [r5, #0]
 80077be:	291d      	cmp	r1, #29
 80077c0:	d82b      	bhi.n	800781a <__sflush_r+0xb2>
 80077c2:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <__sflush_r+0x104>)
 80077c4:	410a      	asrs	r2, r1
 80077c6:	07d6      	lsls	r6, r2, #31
 80077c8:	d427      	bmi.n	800781a <__sflush_r+0xb2>
 80077ca:	2200      	movs	r2, #0
 80077cc:	6062      	str	r2, [r4, #4]
 80077ce:	04d9      	lsls	r1, r3, #19
 80077d0:	6922      	ldr	r2, [r4, #16]
 80077d2:	6022      	str	r2, [r4, #0]
 80077d4:	d504      	bpl.n	80077e0 <__sflush_r+0x78>
 80077d6:	1c42      	adds	r2, r0, #1
 80077d8:	d101      	bne.n	80077de <__sflush_r+0x76>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	b903      	cbnz	r3, 80077e0 <__sflush_r+0x78>
 80077de:	6560      	str	r0, [r4, #84]	@ 0x54
 80077e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e2:	602f      	str	r7, [r5, #0]
 80077e4:	b1b9      	cbz	r1, 8007816 <__sflush_r+0xae>
 80077e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ea:	4299      	cmp	r1, r3
 80077ec:	d002      	beq.n	80077f4 <__sflush_r+0x8c>
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7fe f99e 	bl	8005b30 <_free_r>
 80077f4:	2300      	movs	r3, #0
 80077f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80077f8:	e00d      	b.n	8007816 <__sflush_r+0xae>
 80077fa:	2301      	movs	r3, #1
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b0      	blx	r6
 8007800:	4602      	mov	r2, r0
 8007802:	1c50      	adds	r0, r2, #1
 8007804:	d1c9      	bne.n	800779a <__sflush_r+0x32>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0c6      	beq.n	800779a <__sflush_r+0x32>
 800780c:	2b1d      	cmp	r3, #29
 800780e:	d001      	beq.n	8007814 <__sflush_r+0xac>
 8007810:	2b16      	cmp	r3, #22
 8007812:	d11e      	bne.n	8007852 <__sflush_r+0xea>
 8007814:	602f      	str	r7, [r5, #0]
 8007816:	2000      	movs	r0, #0
 8007818:	e022      	b.n	8007860 <__sflush_r+0xf8>
 800781a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781e:	b21b      	sxth	r3, r3
 8007820:	e01b      	b.n	800785a <__sflush_r+0xf2>
 8007822:	690f      	ldr	r7, [r1, #16]
 8007824:	2f00      	cmp	r7, #0
 8007826:	d0f6      	beq.n	8007816 <__sflush_r+0xae>
 8007828:	0793      	lsls	r3, r2, #30
 800782a:	680e      	ldr	r6, [r1, #0]
 800782c:	bf08      	it	eq
 800782e:	694b      	ldreq	r3, [r1, #20]
 8007830:	600f      	str	r7, [r1, #0]
 8007832:	bf18      	it	ne
 8007834:	2300      	movne	r3, #0
 8007836:	eba6 0807 	sub.w	r8, r6, r7
 800783a:	608b      	str	r3, [r1, #8]
 800783c:	f1b8 0f00 	cmp.w	r8, #0
 8007840:	dde9      	ble.n	8007816 <__sflush_r+0xae>
 8007842:	6a21      	ldr	r1, [r4, #32]
 8007844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007846:	4643      	mov	r3, r8
 8007848:	463a      	mov	r2, r7
 800784a:	4628      	mov	r0, r5
 800784c:	47b0      	blx	r6
 800784e:	2800      	cmp	r0, #0
 8007850:	dc08      	bgt.n	8007864 <__sflush_r+0xfc>
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	4407      	add	r7, r0
 8007866:	eba8 0800 	sub.w	r8, r8, r0
 800786a:	e7e7      	b.n	800783c <__sflush_r+0xd4>
 800786c:	dfbffffe 	.word	0xdfbffffe

08007870 <_fflush_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	690b      	ldr	r3, [r1, #16]
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	b913      	cbnz	r3, 8007880 <_fflush_r+0x10>
 800787a:	2500      	movs	r5, #0
 800787c:	4628      	mov	r0, r5
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	b118      	cbz	r0, 800788a <_fflush_r+0x1a>
 8007882:	6a03      	ldr	r3, [r0, #32]
 8007884:	b90b      	cbnz	r3, 800788a <_fflush_r+0x1a>
 8007886:	f7fd f8b9 	bl	80049fc <__sinit>
 800788a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f3      	beq.n	800787a <_fflush_r+0xa>
 8007892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007894:	07d0      	lsls	r0, r2, #31
 8007896:	d404      	bmi.n	80078a2 <_fflush_r+0x32>
 8007898:	0599      	lsls	r1, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_fflush_r+0x32>
 800789c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800789e:	f7fd faea 	bl	8004e76 <__retarget_lock_acquire_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	4621      	mov	r1, r4
 80078a6:	f7ff ff5f 	bl	8007768 <__sflush_r>
 80078aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ac:	07da      	lsls	r2, r3, #31
 80078ae:	4605      	mov	r5, r0
 80078b0:	d4e4      	bmi.n	800787c <_fflush_r+0xc>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	d4e1      	bmi.n	800787c <_fflush_r+0xc>
 80078b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ba:	f7fd fadd 	bl	8004e78 <__retarget_lock_release_recursive>
 80078be:	e7dd      	b.n	800787c <_fflush_r+0xc>

080078c0 <__swhatbuf_r>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	460c      	mov	r4, r1
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	2900      	cmp	r1, #0
 80078ca:	b096      	sub	sp, #88	@ 0x58
 80078cc:	4615      	mov	r5, r2
 80078ce:	461e      	mov	r6, r3
 80078d0:	da0d      	bge.n	80078ee <__swhatbuf_r+0x2e>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	bf14      	ite	ne
 80078de:	2340      	movne	r3, #64	@ 0x40
 80078e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078e4:	2000      	movs	r0, #0
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	b016      	add	sp, #88	@ 0x58
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	466a      	mov	r2, sp
 80078f0:	f000 f8a4 	bl	8007a3c <_fstat_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	dbec      	blt.n	80078d2 <__swhatbuf_r+0x12>
 80078f8:	9901      	ldr	r1, [sp, #4]
 80078fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007902:	4259      	negs	r1, r3
 8007904:	4159      	adcs	r1, r3
 8007906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800790a:	e7eb      	b.n	80078e4 <__swhatbuf_r+0x24>

0800790c <__smakebuf_r>:
 800790c:	898b      	ldrh	r3, [r1, #12]
 800790e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007910:	079d      	lsls	r5, r3, #30
 8007912:	4606      	mov	r6, r0
 8007914:	460c      	mov	r4, r1
 8007916:	d507      	bpl.n	8007928 <__smakebuf_r+0x1c>
 8007918:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	2301      	movs	r3, #1
 8007922:	6163      	str	r3, [r4, #20]
 8007924:	b003      	add	sp, #12
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	ab01      	add	r3, sp, #4
 800792a:	466a      	mov	r2, sp
 800792c:	f7ff ffc8 	bl	80078c0 <__swhatbuf_r>
 8007930:	9f00      	ldr	r7, [sp, #0]
 8007932:	4605      	mov	r5, r0
 8007934:	4639      	mov	r1, r7
 8007936:	4630      	mov	r0, r6
 8007938:	f7fc f88e 	bl	8003a58 <_malloc_r>
 800793c:	b948      	cbnz	r0, 8007952 <__smakebuf_r+0x46>
 800793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007942:	059a      	lsls	r2, r3, #22
 8007944:	d4ee      	bmi.n	8007924 <__smakebuf_r+0x18>
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	e7e2      	b.n	8007918 <__smakebuf_r+0xc>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	6020      	str	r0, [r4, #0]
 8007956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007962:	b15b      	cbz	r3, 800797c <__smakebuf_r+0x70>
 8007964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007968:	4630      	mov	r0, r6
 800796a:	f000 f879 	bl	8007a60 <_isatty_r>
 800796e:	b128      	cbz	r0, 800797c <__smakebuf_r+0x70>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f023 0303 	bic.w	r3, r3, #3
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	431d      	orrs	r5, r3
 8007980:	81a5      	strh	r5, [r4, #12]
 8007982:	e7cf      	b.n	8007924 <__smakebuf_r+0x18>

08007984 <memmove>:
 8007984:	4288      	cmp	r0, r1
 8007986:	b510      	push	{r4, lr}
 8007988:	eb01 0402 	add.w	r4, r1, r2
 800798c:	d902      	bls.n	8007994 <memmove+0x10>
 800798e:	4284      	cmp	r4, r0
 8007990:	4623      	mov	r3, r4
 8007992:	d807      	bhi.n	80079a4 <memmove+0x20>
 8007994:	1e43      	subs	r3, r0, #1
 8007996:	42a1      	cmp	r1, r4
 8007998:	d008      	beq.n	80079ac <memmove+0x28>
 800799a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079a2:	e7f8      	b.n	8007996 <memmove+0x12>
 80079a4:	4402      	add	r2, r0
 80079a6:	4601      	mov	r1, r0
 80079a8:	428a      	cmp	r2, r1
 80079aa:	d100      	bne.n	80079ae <memmove+0x2a>
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079b6:	e7f7      	b.n	80079a8 <memmove+0x24>

080079b8 <strncmp>:
 80079b8:	b510      	push	{r4, lr}
 80079ba:	b16a      	cbz	r2, 80079d8 <strncmp+0x20>
 80079bc:	3901      	subs	r1, #1
 80079be:	1884      	adds	r4, r0, r2
 80079c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d103      	bne.n	80079d4 <strncmp+0x1c>
 80079cc:	42a0      	cmp	r0, r4
 80079ce:	d001      	beq.n	80079d4 <strncmp+0x1c>
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	d1f5      	bne.n	80079c0 <strncmp+0x8>
 80079d4:	1ad0      	subs	r0, r2, r3
 80079d6:	bd10      	pop	{r4, pc}
 80079d8:	4610      	mov	r0, r2
 80079da:	e7fc      	b.n	80079d6 <strncmp+0x1e>

080079dc <_raise_r>:
 80079dc:	291f      	cmp	r1, #31
 80079de:	b538      	push	{r3, r4, r5, lr}
 80079e0:	4605      	mov	r5, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	d904      	bls.n	80079f0 <_raise_r+0x14>
 80079e6:	2316      	movs	r3, #22
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	f04f 30ff 	mov.w	r0, #4294967295
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079f2:	b112      	cbz	r2, 80079fa <_raise_r+0x1e>
 80079f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f8:	b94b      	cbnz	r3, 8007a0e <_raise_r+0x32>
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 f852 	bl	8007aa4 <_getpid_r>
 8007a00:	4622      	mov	r2, r4
 8007a02:	4601      	mov	r1, r0
 8007a04:	4628      	mov	r0, r5
 8007a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a0a:	f000 b839 	b.w	8007a80 <_kill_r>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00a      	beq.n	8007a28 <_raise_r+0x4c>
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	d103      	bne.n	8007a1e <_raise_r+0x42>
 8007a16:	2316      	movs	r3, #22
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7e7      	b.n	80079ee <_raise_r+0x12>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a24:	4620      	mov	r0, r4
 8007a26:	4798      	blx	r3
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7e0      	b.n	80079ee <_raise_r+0x12>

08007a2c <raise>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <raise+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f7ff bfd3 	b.w	80079dc <_raise_r>
 8007a36:	bf00      	nop
 8007a38:	2000000c 	.word	0x2000000c

08007a3c <_fstat_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	@ (8007a5c <_fstat_r+0x20>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f7fa f94c 	bl	8001ce6 <_fstat>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d102      	bne.n	8007a58 <_fstat_r+0x1c>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b103      	cbz	r3, 8007a58 <_fstat_r+0x1c>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000330 	.word	0x20000330

08007a60 <_isatty_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d06      	ldr	r5, [pc, #24]	@ (8007a7c <_isatty_r+0x1c>)
 8007a64:	2300      	movs	r3, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7fa f94b 	bl	8001d06 <_isatty>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_isatty_r+0x1a>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_isatty_r+0x1a>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20000330 	.word	0x20000330

08007a80 <_kill_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	@ (8007aa0 <_kill_r+0x20>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	f7fa f8e6 	bl	8001c5e <_kill>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	d102      	bne.n	8007a9c <_kill_r+0x1c>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	b103      	cbz	r3, 8007a9c <_kill_r+0x1c>
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000330 	.word	0x20000330

08007aa4 <_getpid_r>:
 8007aa4:	f7fa b8d3 	b.w	8001c4e <_getpid>

08007aa8 <memcpy>:
 8007aa8:	440a      	add	r2, r1
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab0:	d100      	bne.n	8007ab4 <memcpy+0xc>
 8007ab2:	4770      	bx	lr
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	d1f9      	bne.n	8007ab6 <memcpy+0xe>
 8007ac2:	bd10      	pop	{r4, pc}
 8007ac4:	0000      	movs	r0, r0
	...

08007ac8 <nan>:
 8007ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ad0 <nan+0x8>
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	7ff80000 	.word	0x7ff80000

08007ad8 <_calloc_r>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	fba1 5402 	umull	r5, r4, r1, r2
 8007ade:	b93c      	cbnz	r4, 8007af0 <_calloc_r+0x18>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7fb ffb9 	bl	8003a58 <_malloc_r>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	b928      	cbnz	r0, 8007af6 <_calloc_r+0x1e>
 8007aea:	2600      	movs	r6, #0
 8007aec:	4630      	mov	r0, r6
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	220c      	movs	r2, #12
 8007af2:	6002      	str	r2, [r0, #0]
 8007af4:	e7f9      	b.n	8007aea <_calloc_r+0x12>
 8007af6:	462a      	mov	r2, r5
 8007af8:	4621      	mov	r1, r4
 8007afa:	f7fd f92f 	bl	8004d5c <memset>
 8007afe:	e7f5      	b.n	8007aec <_calloc_r+0x14>

08007b00 <rshift>:
 8007b00:	6903      	ldr	r3, [r0, #16]
 8007b02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b0e:	f100 0414 	add.w	r4, r0, #20
 8007b12:	dd45      	ble.n	8007ba0 <rshift+0xa0>
 8007b14:	f011 011f 	ands.w	r1, r1, #31
 8007b18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b20:	d10c      	bne.n	8007b3c <rshift+0x3c>
 8007b22:	f100 0710 	add.w	r7, r0, #16
 8007b26:	4629      	mov	r1, r5
 8007b28:	42b1      	cmp	r1, r6
 8007b2a:	d334      	bcc.n	8007b96 <rshift+0x96>
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	1eea      	subs	r2, r5, #3
 8007b32:	4296      	cmp	r6, r2
 8007b34:	bf38      	it	cc
 8007b36:	2300      	movcc	r3, #0
 8007b38:	4423      	add	r3, r4
 8007b3a:	e015      	b.n	8007b68 <rshift+0x68>
 8007b3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b40:	f1c1 0820 	rsb	r8, r1, #32
 8007b44:	40cf      	lsrs	r7, r1
 8007b46:	f105 0e04 	add.w	lr, r5, #4
 8007b4a:	46a1      	mov	r9, r4
 8007b4c:	4576      	cmp	r6, lr
 8007b4e:	46f4      	mov	ip, lr
 8007b50:	d815      	bhi.n	8007b7e <rshift+0x7e>
 8007b52:	1a9a      	subs	r2, r3, r2
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	3a04      	subs	r2, #4
 8007b58:	3501      	adds	r5, #1
 8007b5a:	42ae      	cmp	r6, r5
 8007b5c:	bf38      	it	cc
 8007b5e:	2200      	movcc	r2, #0
 8007b60:	18a3      	adds	r3, r4, r2
 8007b62:	50a7      	str	r7, [r4, r2]
 8007b64:	b107      	cbz	r7, 8007b68 <rshift+0x68>
 8007b66:	3304      	adds	r3, #4
 8007b68:	1b1a      	subs	r2, r3, r4
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b70:	bf08      	it	eq
 8007b72:	2300      	moveq	r3, #0
 8007b74:	6102      	str	r2, [r0, #16]
 8007b76:	bf08      	it	eq
 8007b78:	6143      	streq	r3, [r0, #20]
 8007b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	f8dc c000 	ldr.w	ip, [ip]
 8007b82:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b86:	ea4c 0707 	orr.w	r7, ip, r7
 8007b8a:	f849 7b04 	str.w	r7, [r9], #4
 8007b8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b92:	40cf      	lsrs	r7, r1
 8007b94:	e7da      	b.n	8007b4c <rshift+0x4c>
 8007b96:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b9a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b9e:	e7c3      	b.n	8007b28 <rshift+0x28>
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	e7e1      	b.n	8007b68 <rshift+0x68>

08007ba4 <__hexdig_fun>:
 8007ba4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	d802      	bhi.n	8007bb2 <__hexdig_fun+0xe>
 8007bac:	3820      	subs	r0, #32
 8007bae:	b2c0      	uxtb	r0, r0
 8007bb0:	4770      	bx	lr
 8007bb2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d801      	bhi.n	8007bbe <__hexdig_fun+0x1a>
 8007bba:	3847      	subs	r0, #71	@ 0x47
 8007bbc:	e7f7      	b.n	8007bae <__hexdig_fun+0xa>
 8007bbe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d801      	bhi.n	8007bca <__hexdig_fun+0x26>
 8007bc6:	3827      	subs	r0, #39	@ 0x27
 8007bc8:	e7f1      	b.n	8007bae <__hexdig_fun+0xa>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	4770      	bx	lr
	...

08007bd0 <__gethex>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	468a      	mov	sl, r1
 8007bd8:	9302      	str	r3, [sp, #8]
 8007bda:	680b      	ldr	r3, [r1, #0]
 8007bdc:	9001      	str	r0, [sp, #4]
 8007bde:	4690      	mov	r8, r2
 8007be0:	1c9c      	adds	r4, r3, #2
 8007be2:	46a1      	mov	r9, r4
 8007be4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007be8:	2830      	cmp	r0, #48	@ 0x30
 8007bea:	d0fa      	beq.n	8007be2 <__gethex+0x12>
 8007bec:	eba9 0303 	sub.w	r3, r9, r3
 8007bf0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007bf4:	f7ff ffd6 	bl	8007ba4 <__hexdig_fun>
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d168      	bne.n	8007cd0 <__gethex+0x100>
 8007bfe:	49a0      	ldr	r1, [pc, #640]	@ (8007e80 <__gethex+0x2b0>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	4648      	mov	r0, r9
 8007c04:	f7ff fed8 	bl	80079b8 <strncmp>
 8007c08:	4607      	mov	r7, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d167      	bne.n	8007cde <__gethex+0x10e>
 8007c0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007c12:	4626      	mov	r6, r4
 8007c14:	f7ff ffc6 	bl	8007ba4 <__hexdig_fun>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d062      	beq.n	8007ce2 <__gethex+0x112>
 8007c1c:	4623      	mov	r3, r4
 8007c1e:	7818      	ldrb	r0, [r3, #0]
 8007c20:	2830      	cmp	r0, #48	@ 0x30
 8007c22:	4699      	mov	r9, r3
 8007c24:	f103 0301 	add.w	r3, r3, #1
 8007c28:	d0f9      	beq.n	8007c1e <__gethex+0x4e>
 8007c2a:	f7ff ffbb 	bl	8007ba4 <__hexdig_fun>
 8007c2e:	fab0 f580 	clz	r5, r0
 8007c32:	096d      	lsrs	r5, r5, #5
 8007c34:	f04f 0b01 	mov.w	fp, #1
 8007c38:	464a      	mov	r2, r9
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	3201      	adds	r2, #1
 8007c3e:	7830      	ldrb	r0, [r6, #0]
 8007c40:	f7ff ffb0 	bl	8007ba4 <__hexdig_fun>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d1f8      	bne.n	8007c3a <__gethex+0x6a>
 8007c48:	498d      	ldr	r1, [pc, #564]	@ (8007e80 <__gethex+0x2b0>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff feb3 	bl	80079b8 <strncmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d13f      	bne.n	8007cd6 <__gethex+0x106>
 8007c56:	b944      	cbnz	r4, 8007c6a <__gethex+0x9a>
 8007c58:	1c74      	adds	r4, r6, #1
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	3201      	adds	r2, #1
 8007c60:	7830      	ldrb	r0, [r6, #0]
 8007c62:	f7ff ff9f 	bl	8007ba4 <__hexdig_fun>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1f8      	bne.n	8007c5c <__gethex+0x8c>
 8007c6a:	1ba4      	subs	r4, r4, r6
 8007c6c:	00a7      	lsls	r7, r4, #2
 8007c6e:	7833      	ldrb	r3, [r6, #0]
 8007c70:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007c74:	2b50      	cmp	r3, #80	@ 0x50
 8007c76:	d13e      	bne.n	8007cf6 <__gethex+0x126>
 8007c78:	7873      	ldrb	r3, [r6, #1]
 8007c7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c7c:	d033      	beq.n	8007ce6 <__gethex+0x116>
 8007c7e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c80:	d034      	beq.n	8007cec <__gethex+0x11c>
 8007c82:	1c71      	adds	r1, r6, #1
 8007c84:	2400      	movs	r4, #0
 8007c86:	7808      	ldrb	r0, [r1, #0]
 8007c88:	f7ff ff8c 	bl	8007ba4 <__hexdig_fun>
 8007c8c:	1e43      	subs	r3, r0, #1
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b18      	cmp	r3, #24
 8007c92:	d830      	bhi.n	8007cf6 <__gethex+0x126>
 8007c94:	f1a0 0210 	sub.w	r2, r0, #16
 8007c98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c9c:	f7ff ff82 	bl	8007ba4 <__hexdig_fun>
 8007ca0:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ca4:	fa5f fc8c 	uxtb.w	ip, ip
 8007ca8:	f1bc 0f18 	cmp.w	ip, #24
 8007cac:	f04f 030a 	mov.w	r3, #10
 8007cb0:	d91e      	bls.n	8007cf0 <__gethex+0x120>
 8007cb2:	b104      	cbz	r4, 8007cb6 <__gethex+0xe6>
 8007cb4:	4252      	negs	r2, r2
 8007cb6:	4417      	add	r7, r2
 8007cb8:	f8ca 1000 	str.w	r1, [sl]
 8007cbc:	b1ed      	cbz	r5, 8007cfa <__gethex+0x12a>
 8007cbe:	f1bb 0f00 	cmp.w	fp, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2506      	moveq	r5, #6
 8007cc6:	2500      	movne	r5, #0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	b005      	add	sp, #20
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	2500      	movs	r5, #0
 8007cd2:	462c      	mov	r4, r5
 8007cd4:	e7b0      	b.n	8007c38 <__gethex+0x68>
 8007cd6:	2c00      	cmp	r4, #0
 8007cd8:	d1c7      	bne.n	8007c6a <__gethex+0x9a>
 8007cda:	4627      	mov	r7, r4
 8007cdc:	e7c7      	b.n	8007c6e <__gethex+0x9e>
 8007cde:	464e      	mov	r6, r9
 8007ce0:	462f      	mov	r7, r5
 8007ce2:	2501      	movs	r5, #1
 8007ce4:	e7c3      	b.n	8007c6e <__gethex+0x9e>
 8007ce6:	2400      	movs	r4, #0
 8007ce8:	1cb1      	adds	r1, r6, #2
 8007cea:	e7cc      	b.n	8007c86 <__gethex+0xb6>
 8007cec:	2401      	movs	r4, #1
 8007cee:	e7fb      	b.n	8007ce8 <__gethex+0x118>
 8007cf0:	fb03 0002 	mla	r0, r3, r2, r0
 8007cf4:	e7ce      	b.n	8007c94 <__gethex+0xc4>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	e7de      	b.n	8007cb8 <__gethex+0xe8>
 8007cfa:	eba6 0309 	sub.w	r3, r6, r9
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	4629      	mov	r1, r5
 8007d02:	2b07      	cmp	r3, #7
 8007d04:	dc0a      	bgt.n	8007d1c <__gethex+0x14c>
 8007d06:	9801      	ldr	r0, [sp, #4]
 8007d08:	f7fd ff5c 	bl	8005bc4 <_Balloc>
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	b940      	cbnz	r0, 8007d22 <__gethex+0x152>
 8007d10:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <__gethex+0x2b4>)
 8007d12:	4602      	mov	r2, r0
 8007d14:	21e4      	movs	r1, #228	@ 0xe4
 8007d16:	485c      	ldr	r0, [pc, #368]	@ (8007e88 <__gethex+0x2b8>)
 8007d18:	f7fb fe4e 	bl	80039b8 <__assert_func>
 8007d1c:	3101      	adds	r1, #1
 8007d1e:	105b      	asrs	r3, r3, #1
 8007d20:	e7ef      	b.n	8007d02 <__gethex+0x132>
 8007d22:	f100 0a14 	add.w	sl, r0, #20
 8007d26:	2300      	movs	r3, #0
 8007d28:	4655      	mov	r5, sl
 8007d2a:	469b      	mov	fp, r3
 8007d2c:	45b1      	cmp	r9, r6
 8007d2e:	d337      	bcc.n	8007da0 <__gethex+0x1d0>
 8007d30:	f845 bb04 	str.w	fp, [r5], #4
 8007d34:	eba5 050a 	sub.w	r5, r5, sl
 8007d38:	10ad      	asrs	r5, r5, #2
 8007d3a:	6125      	str	r5, [r4, #16]
 8007d3c:	4658      	mov	r0, fp
 8007d3e:	f7fe f833 	bl	8005da8 <__hi0bits>
 8007d42:	016d      	lsls	r5, r5, #5
 8007d44:	f8d8 6000 	ldr.w	r6, [r8]
 8007d48:	1a2d      	subs	r5, r5, r0
 8007d4a:	42b5      	cmp	r5, r6
 8007d4c:	dd54      	ble.n	8007df8 <__gethex+0x228>
 8007d4e:	1bad      	subs	r5, r5, r6
 8007d50:	4629      	mov	r1, r5
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7fe fbc7 	bl	80064e6 <__any_on>
 8007d58:	4681      	mov	r9, r0
 8007d5a:	b178      	cbz	r0, 8007d7c <__gethex+0x1ac>
 8007d5c:	1e6b      	subs	r3, r5, #1
 8007d5e:	1159      	asrs	r1, r3, #5
 8007d60:	f003 021f 	and.w	r2, r3, #31
 8007d64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d68:	f04f 0901 	mov.w	r9, #1
 8007d6c:	fa09 f202 	lsl.w	r2, r9, r2
 8007d70:	420a      	tst	r2, r1
 8007d72:	d003      	beq.n	8007d7c <__gethex+0x1ac>
 8007d74:	454b      	cmp	r3, r9
 8007d76:	dc36      	bgt.n	8007de6 <__gethex+0x216>
 8007d78:	f04f 0902 	mov.w	r9, #2
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff febe 	bl	8007b00 <rshift>
 8007d84:	442f      	add	r7, r5
 8007d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	da42      	bge.n	8007e14 <__gethex+0x244>
 8007d8e:	9801      	ldr	r0, [sp, #4]
 8007d90:	4621      	mov	r1, r4
 8007d92:	f7fd ff57 	bl	8005c44 <_Bfree>
 8007d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	25a3      	movs	r5, #163	@ 0xa3
 8007d9e:	e793      	b.n	8007cc8 <__gethex+0xf8>
 8007da0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007da4:	2a2e      	cmp	r2, #46	@ 0x2e
 8007da6:	d012      	beq.n	8007dce <__gethex+0x1fe>
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d104      	bne.n	8007db6 <__gethex+0x1e6>
 8007dac:	f845 bb04 	str.w	fp, [r5], #4
 8007db0:	f04f 0b00 	mov.w	fp, #0
 8007db4:	465b      	mov	r3, fp
 8007db6:	7830      	ldrb	r0, [r6, #0]
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	f7ff fef3 	bl	8007ba4 <__hexdig_fun>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	f000 000f 	and.w	r0, r0, #15
 8007dc4:	4098      	lsls	r0, r3
 8007dc6:	ea4b 0b00 	orr.w	fp, fp, r0
 8007dca:	3304      	adds	r3, #4
 8007dcc:	e7ae      	b.n	8007d2c <__gethex+0x15c>
 8007dce:	45b1      	cmp	r9, r6
 8007dd0:	d8ea      	bhi.n	8007da8 <__gethex+0x1d8>
 8007dd2:	492b      	ldr	r1, [pc, #172]	@ (8007e80 <__gethex+0x2b0>)
 8007dd4:	9303      	str	r3, [sp, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff fded 	bl	80079b8 <strncmp>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d1e1      	bne.n	8007da8 <__gethex+0x1d8>
 8007de4:	e7a2      	b.n	8007d2c <__gethex+0x15c>
 8007de6:	1ea9      	subs	r1, r5, #2
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7fe fb7c 	bl	80064e6 <__any_on>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d0c2      	beq.n	8007d78 <__gethex+0x1a8>
 8007df2:	f04f 0903 	mov.w	r9, #3
 8007df6:	e7c1      	b.n	8007d7c <__gethex+0x1ac>
 8007df8:	da09      	bge.n	8007e0e <__gethex+0x23e>
 8007dfa:	1b75      	subs	r5, r6, r5
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	9801      	ldr	r0, [sp, #4]
 8007e00:	462a      	mov	r2, r5
 8007e02:	f7fe f937 	bl	8006074 <__lshift>
 8007e06:	1b7f      	subs	r7, r7, r5
 8007e08:	4604      	mov	r4, r0
 8007e0a:	f100 0a14 	add.w	sl, r0, #20
 8007e0e:	f04f 0900 	mov.w	r9, #0
 8007e12:	e7b8      	b.n	8007d86 <__gethex+0x1b6>
 8007e14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e18:	42bd      	cmp	r5, r7
 8007e1a:	dd6f      	ble.n	8007efc <__gethex+0x32c>
 8007e1c:	1bed      	subs	r5, r5, r7
 8007e1e:	42ae      	cmp	r6, r5
 8007e20:	dc34      	bgt.n	8007e8c <__gethex+0x2bc>
 8007e22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d022      	beq.n	8007e70 <__gethex+0x2a0>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d024      	beq.n	8007e78 <__gethex+0x2a8>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d115      	bne.n	8007e5e <__gethex+0x28e>
 8007e32:	42ae      	cmp	r6, r5
 8007e34:	d113      	bne.n	8007e5e <__gethex+0x28e>
 8007e36:	2e01      	cmp	r6, #1
 8007e38:	d10b      	bne.n	8007e52 <__gethex+0x282>
 8007e3a:	9a02      	ldr	r2, [sp, #8]
 8007e3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	2301      	movs	r3, #1
 8007e44:	6123      	str	r3, [r4, #16]
 8007e46:	f8ca 3000 	str.w	r3, [sl]
 8007e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e4c:	2562      	movs	r5, #98	@ 0x62
 8007e4e:	601c      	str	r4, [r3, #0]
 8007e50:	e73a      	b.n	8007cc8 <__gethex+0xf8>
 8007e52:	1e71      	subs	r1, r6, #1
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7fe fb46 	bl	80064e6 <__any_on>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1ed      	bne.n	8007e3a <__gethex+0x26a>
 8007e5e:	9801      	ldr	r0, [sp, #4]
 8007e60:	4621      	mov	r1, r4
 8007e62:	f7fd feef 	bl	8005c44 <_Bfree>
 8007e66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	2550      	movs	r5, #80	@ 0x50
 8007e6e:	e72b      	b.n	8007cc8 <__gethex+0xf8>
 8007e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f3      	bne.n	8007e5e <__gethex+0x28e>
 8007e76:	e7e0      	b.n	8007e3a <__gethex+0x26a>
 8007e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1dd      	bne.n	8007e3a <__gethex+0x26a>
 8007e7e:	e7ee      	b.n	8007e5e <__gethex+0x28e>
 8007e80:	080268f0 	.word	0x080268f0
 8007e84:	08026785 	.word	0x08026785
 8007e88:	08026a62 	.word	0x08026a62
 8007e8c:	1e6f      	subs	r7, r5, #1
 8007e8e:	f1b9 0f00 	cmp.w	r9, #0
 8007e92:	d130      	bne.n	8007ef6 <__gethex+0x326>
 8007e94:	b127      	cbz	r7, 8007ea0 <__gethex+0x2d0>
 8007e96:	4639      	mov	r1, r7
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f7fe fb24 	bl	80064e6 <__any_on>
 8007e9e:	4681      	mov	r9, r0
 8007ea0:	117a      	asrs	r2, r7, #5
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ea8:	f007 071f 	and.w	r7, r7, #31
 8007eac:	40bb      	lsls	r3, r7
 8007eae:	4213      	tst	r3, r2
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	bf18      	it	ne
 8007eb6:	f049 0902 	orrne.w	r9, r9, #2
 8007eba:	f7ff fe21 	bl	8007b00 <rshift>
 8007ebe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007ec2:	1b76      	subs	r6, r6, r5
 8007ec4:	2502      	movs	r5, #2
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	d047      	beq.n	8007f5c <__gethex+0x38c>
 8007ecc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d015      	beq.n	8007f00 <__gethex+0x330>
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d017      	beq.n	8007f08 <__gethex+0x338>
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d109      	bne.n	8007ef0 <__gethex+0x320>
 8007edc:	f019 0f02 	tst.w	r9, #2
 8007ee0:	d006      	beq.n	8007ef0 <__gethex+0x320>
 8007ee2:	f8da 3000 	ldr.w	r3, [sl]
 8007ee6:	ea49 0903 	orr.w	r9, r9, r3
 8007eea:	f019 0f01 	tst.w	r9, #1
 8007eee:	d10e      	bne.n	8007f0e <__gethex+0x33e>
 8007ef0:	f045 0510 	orr.w	r5, r5, #16
 8007ef4:	e032      	b.n	8007f5c <__gethex+0x38c>
 8007ef6:	f04f 0901 	mov.w	r9, #1
 8007efa:	e7d1      	b.n	8007ea0 <__gethex+0x2d0>
 8007efc:	2501      	movs	r5, #1
 8007efe:	e7e2      	b.n	8007ec6 <__gethex+0x2f6>
 8007f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f02:	f1c3 0301 	rsb	r3, r3, #1
 8007f06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <__gethex+0x320>
 8007f0e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f12:	f104 0314 	add.w	r3, r4, #20
 8007f16:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f1a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f1e:	f04f 0c00 	mov.w	ip, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f28:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f2c:	d01b      	beq.n	8007f66 <__gethex+0x396>
 8007f2e:	3201      	adds	r2, #1
 8007f30:	6002      	str	r2, [r0, #0]
 8007f32:	2d02      	cmp	r5, #2
 8007f34:	f104 0314 	add.w	r3, r4, #20
 8007f38:	d13c      	bne.n	8007fb4 <__gethex+0x3e4>
 8007f3a:	f8d8 2000 	ldr.w	r2, [r8]
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	42b2      	cmp	r2, r6
 8007f42:	d109      	bne.n	8007f58 <__gethex+0x388>
 8007f44:	1171      	asrs	r1, r6, #5
 8007f46:	2201      	movs	r2, #1
 8007f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f4c:	f006 061f 	and.w	r6, r6, #31
 8007f50:	fa02 f606 	lsl.w	r6, r2, r6
 8007f54:	421e      	tst	r6, r3
 8007f56:	d13a      	bne.n	8007fce <__gethex+0x3fe>
 8007f58:	f045 0520 	orr.w	r5, r5, #32
 8007f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f5e:	601c      	str	r4, [r3, #0]
 8007f60:	9b02      	ldr	r3, [sp, #8]
 8007f62:	601f      	str	r7, [r3, #0]
 8007f64:	e6b0      	b.n	8007cc8 <__gethex+0xf8>
 8007f66:	4299      	cmp	r1, r3
 8007f68:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f6c:	d8d9      	bhi.n	8007f22 <__gethex+0x352>
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	459b      	cmp	fp, r3
 8007f72:	db17      	blt.n	8007fa4 <__gethex+0x3d4>
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	9801      	ldr	r0, [sp, #4]
 8007f78:	3101      	adds	r1, #1
 8007f7a:	f7fd fe23 	bl	8005bc4 <_Balloc>
 8007f7e:	4681      	mov	r9, r0
 8007f80:	b918      	cbnz	r0, 8007f8a <__gethex+0x3ba>
 8007f82:	4b1a      	ldr	r3, [pc, #104]	@ (8007fec <__gethex+0x41c>)
 8007f84:	4602      	mov	r2, r0
 8007f86:	2184      	movs	r1, #132	@ 0x84
 8007f88:	e6c5      	b.n	8007d16 <__gethex+0x146>
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	3202      	adds	r2, #2
 8007f8e:	f104 010c 	add.w	r1, r4, #12
 8007f92:	0092      	lsls	r2, r2, #2
 8007f94:	300c      	adds	r0, #12
 8007f96:	f7ff fd87 	bl	8007aa8 <memcpy>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	9801      	ldr	r0, [sp, #4]
 8007f9e:	f7fd fe51 	bl	8005c44 <_Bfree>
 8007fa2:	464c      	mov	r4, r9
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fac:	6122      	str	r2, [r4, #16]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	615a      	str	r2, [r3, #20]
 8007fb2:	e7be      	b.n	8007f32 <__gethex+0x362>
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	455a      	cmp	r2, fp
 8007fb8:	dd0b      	ble.n	8007fd2 <__gethex+0x402>
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f7ff fd9f 	bl	8007b00 <rshift>
 8007fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fc6:	3701      	adds	r7, #1
 8007fc8:	42bb      	cmp	r3, r7
 8007fca:	f6ff aee0 	blt.w	8007d8e <__gethex+0x1be>
 8007fce:	2501      	movs	r5, #1
 8007fd0:	e7c2      	b.n	8007f58 <__gethex+0x388>
 8007fd2:	f016 061f 	ands.w	r6, r6, #31
 8007fd6:	d0fa      	beq.n	8007fce <__gethex+0x3fe>
 8007fd8:	4453      	add	r3, sl
 8007fda:	f1c6 0620 	rsb	r6, r6, #32
 8007fde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007fe2:	f7fd fee1 	bl	8005da8 <__hi0bits>
 8007fe6:	42b0      	cmp	r0, r6
 8007fe8:	dbe7      	blt.n	8007fba <__gethex+0x3ea>
 8007fea:	e7f0      	b.n	8007fce <__gethex+0x3fe>
 8007fec:	08026785 	.word	0x08026785

08007ff0 <L_shift>:
 8007ff0:	f1c2 0208 	rsb	r2, r2, #8
 8007ff4:	0092      	lsls	r2, r2, #2
 8007ff6:	b570      	push	{r4, r5, r6, lr}
 8007ff8:	f1c2 0620 	rsb	r6, r2, #32
 8007ffc:	6843      	ldr	r3, [r0, #4]
 8007ffe:	6804      	ldr	r4, [r0, #0]
 8008000:	fa03 f506 	lsl.w	r5, r3, r6
 8008004:	432c      	orrs	r4, r5
 8008006:	40d3      	lsrs	r3, r2
 8008008:	6004      	str	r4, [r0, #0]
 800800a:	f840 3f04 	str.w	r3, [r0, #4]!
 800800e:	4288      	cmp	r0, r1
 8008010:	d3f4      	bcc.n	8007ffc <L_shift+0xc>
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__match>:
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	6803      	ldr	r3, [r0, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801e:	b914      	cbnz	r4, 8008026 <__match+0x12>
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	2001      	movs	r0, #1
 8008024:	bd30      	pop	{r4, r5, pc}
 8008026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800802e:	2d19      	cmp	r5, #25
 8008030:	bf98      	it	ls
 8008032:	3220      	addls	r2, #32
 8008034:	42a2      	cmp	r2, r4
 8008036:	d0f0      	beq.n	800801a <__match+0x6>
 8008038:	2000      	movs	r0, #0
 800803a:	e7f3      	b.n	8008024 <__match+0x10>

0800803c <__hexnan>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	6801      	ldr	r1, [r0, #0]
 8008044:	115e      	asrs	r6, r3, #5
 8008046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800804a:	f013 031f 	ands.w	r3, r3, #31
 800804e:	b087      	sub	sp, #28
 8008050:	bf18      	it	ne
 8008052:	3604      	addne	r6, #4
 8008054:	2500      	movs	r5, #0
 8008056:	1f37      	subs	r7, r6, #4
 8008058:	4682      	mov	sl, r0
 800805a:	4690      	mov	r8, r2
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008062:	46b9      	mov	r9, r7
 8008064:	463c      	mov	r4, r7
 8008066:	9502      	str	r5, [sp, #8]
 8008068:	46ab      	mov	fp, r5
 800806a:	784a      	ldrb	r2, [r1, #1]
 800806c:	1c4b      	adds	r3, r1, #1
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	b342      	cbz	r2, 80080c4 <__hexnan+0x88>
 8008072:	4610      	mov	r0, r2
 8008074:	9105      	str	r1, [sp, #20]
 8008076:	9204      	str	r2, [sp, #16]
 8008078:	f7ff fd94 	bl	8007ba4 <__hexdig_fun>
 800807c:	2800      	cmp	r0, #0
 800807e:	d151      	bne.n	8008124 <__hexnan+0xe8>
 8008080:	9a04      	ldr	r2, [sp, #16]
 8008082:	9905      	ldr	r1, [sp, #20]
 8008084:	2a20      	cmp	r2, #32
 8008086:	d818      	bhi.n	80080ba <__hexnan+0x7e>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	459b      	cmp	fp, r3
 800808c:	dd13      	ble.n	80080b6 <__hexnan+0x7a>
 800808e:	454c      	cmp	r4, r9
 8008090:	d206      	bcs.n	80080a0 <__hexnan+0x64>
 8008092:	2d07      	cmp	r5, #7
 8008094:	dc04      	bgt.n	80080a0 <__hexnan+0x64>
 8008096:	462a      	mov	r2, r5
 8008098:	4649      	mov	r1, r9
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ffa8 	bl	8007ff0 <L_shift>
 80080a0:	4544      	cmp	r4, r8
 80080a2:	d952      	bls.n	800814a <__hexnan+0x10e>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f1a4 0904 	sub.w	r9, r4, #4
 80080aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ae:	f8cd b008 	str.w	fp, [sp, #8]
 80080b2:	464c      	mov	r4, r9
 80080b4:	461d      	mov	r5, r3
 80080b6:	9903      	ldr	r1, [sp, #12]
 80080b8:	e7d7      	b.n	800806a <__hexnan+0x2e>
 80080ba:	2a29      	cmp	r2, #41	@ 0x29
 80080bc:	d157      	bne.n	800816e <__hexnan+0x132>
 80080be:	3102      	adds	r1, #2
 80080c0:	f8ca 1000 	str.w	r1, [sl]
 80080c4:	f1bb 0f00 	cmp.w	fp, #0
 80080c8:	d051      	beq.n	800816e <__hexnan+0x132>
 80080ca:	454c      	cmp	r4, r9
 80080cc:	d206      	bcs.n	80080dc <__hexnan+0xa0>
 80080ce:	2d07      	cmp	r5, #7
 80080d0:	dc04      	bgt.n	80080dc <__hexnan+0xa0>
 80080d2:	462a      	mov	r2, r5
 80080d4:	4649      	mov	r1, r9
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7ff ff8a 	bl	8007ff0 <L_shift>
 80080dc:	4544      	cmp	r4, r8
 80080de:	d936      	bls.n	800814e <__hexnan+0x112>
 80080e0:	f1a8 0204 	sub.w	r2, r8, #4
 80080e4:	4623      	mov	r3, r4
 80080e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80080ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80080ee:	429f      	cmp	r7, r3
 80080f0:	d2f9      	bcs.n	80080e6 <__hexnan+0xaa>
 80080f2:	1b3b      	subs	r3, r7, r4
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3304      	adds	r3, #4
 80080fa:	3401      	adds	r4, #1
 80080fc:	3e03      	subs	r6, #3
 80080fe:	42b4      	cmp	r4, r6
 8008100:	bf88      	it	hi
 8008102:	2304      	movhi	r3, #4
 8008104:	4443      	add	r3, r8
 8008106:	2200      	movs	r2, #0
 8008108:	f843 2b04 	str.w	r2, [r3], #4
 800810c:	429f      	cmp	r7, r3
 800810e:	d2fb      	bcs.n	8008108 <__hexnan+0xcc>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	b91b      	cbnz	r3, 800811c <__hexnan+0xe0>
 8008114:	4547      	cmp	r7, r8
 8008116:	d128      	bne.n	800816a <__hexnan+0x12e>
 8008118:	2301      	movs	r3, #1
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	2005      	movs	r0, #5
 800811e:	b007      	add	sp, #28
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	3501      	adds	r5, #1
 8008126:	2d08      	cmp	r5, #8
 8008128:	f10b 0b01 	add.w	fp, fp, #1
 800812c:	dd06      	ble.n	800813c <__hexnan+0x100>
 800812e:	4544      	cmp	r4, r8
 8008130:	d9c1      	bls.n	80080b6 <__hexnan+0x7a>
 8008132:	2300      	movs	r3, #0
 8008134:	f844 3c04 	str.w	r3, [r4, #-4]
 8008138:	2501      	movs	r5, #1
 800813a:	3c04      	subs	r4, #4
 800813c:	6822      	ldr	r2, [r4, #0]
 800813e:	f000 000f 	and.w	r0, r0, #15
 8008142:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008146:	6020      	str	r0, [r4, #0]
 8008148:	e7b5      	b.n	80080b6 <__hexnan+0x7a>
 800814a:	2508      	movs	r5, #8
 800814c:	e7b3      	b.n	80080b6 <__hexnan+0x7a>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d0dd      	beq.n	8008110 <__hexnan+0xd4>
 8008154:	f1c3 0320 	rsb	r3, r3, #32
 8008158:	f04f 32ff 	mov.w	r2, #4294967295
 800815c:	40da      	lsrs	r2, r3
 800815e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008162:	4013      	ands	r3, r2
 8008164:	f846 3c04 	str.w	r3, [r6, #-4]
 8008168:	e7d2      	b.n	8008110 <__hexnan+0xd4>
 800816a:	3f04      	subs	r7, #4
 800816c:	e7d0      	b.n	8008110 <__hexnan+0xd4>
 800816e:	2004      	movs	r0, #4
 8008170:	e7d5      	b.n	800811e <__hexnan+0xe2>

08008172 <__ascii_mbtowc>:
 8008172:	b082      	sub	sp, #8
 8008174:	b901      	cbnz	r1, 8008178 <__ascii_mbtowc+0x6>
 8008176:	a901      	add	r1, sp, #4
 8008178:	b142      	cbz	r2, 800818c <__ascii_mbtowc+0x1a>
 800817a:	b14b      	cbz	r3, 8008190 <__ascii_mbtowc+0x1e>
 800817c:	7813      	ldrb	r3, [r2, #0]
 800817e:	600b      	str	r3, [r1, #0]
 8008180:	7812      	ldrb	r2, [r2, #0]
 8008182:	1e10      	subs	r0, r2, #0
 8008184:	bf18      	it	ne
 8008186:	2001      	movne	r0, #1
 8008188:	b002      	add	sp, #8
 800818a:	4770      	bx	lr
 800818c:	4610      	mov	r0, r2
 800818e:	e7fb      	b.n	8008188 <__ascii_mbtowc+0x16>
 8008190:	f06f 0001 	mvn.w	r0, #1
 8008194:	e7f8      	b.n	8008188 <__ascii_mbtowc+0x16>

08008196 <_realloc_r>:
 8008196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819a:	4680      	mov	r8, r0
 800819c:	4615      	mov	r5, r2
 800819e:	460c      	mov	r4, r1
 80081a0:	b921      	cbnz	r1, 80081ac <_realloc_r+0x16>
 80081a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	4611      	mov	r1, r2
 80081a8:	f7fb bc56 	b.w	8003a58 <_malloc_r>
 80081ac:	b92a      	cbnz	r2, 80081ba <_realloc_r+0x24>
 80081ae:	f7fd fcbf 	bl	8005b30 <_free_r>
 80081b2:	2400      	movs	r4, #0
 80081b4:	4620      	mov	r0, r4
 80081b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ba:	f000 f827 	bl	800820c <_malloc_usable_size_r>
 80081be:	4285      	cmp	r5, r0
 80081c0:	4606      	mov	r6, r0
 80081c2:	d802      	bhi.n	80081ca <_realloc_r+0x34>
 80081c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081c8:	d8f4      	bhi.n	80081b4 <_realloc_r+0x1e>
 80081ca:	4629      	mov	r1, r5
 80081cc:	4640      	mov	r0, r8
 80081ce:	f7fb fc43 	bl	8003a58 <_malloc_r>
 80081d2:	4607      	mov	r7, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0ec      	beq.n	80081b2 <_realloc_r+0x1c>
 80081d8:	42b5      	cmp	r5, r6
 80081da:	462a      	mov	r2, r5
 80081dc:	4621      	mov	r1, r4
 80081de:	bf28      	it	cs
 80081e0:	4632      	movcs	r2, r6
 80081e2:	f7ff fc61 	bl	8007aa8 <memcpy>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4640      	mov	r0, r8
 80081ea:	f7fd fca1 	bl	8005b30 <_free_r>
 80081ee:	463c      	mov	r4, r7
 80081f0:	e7e0      	b.n	80081b4 <_realloc_r+0x1e>

080081f2 <__ascii_wctomb>:
 80081f2:	4603      	mov	r3, r0
 80081f4:	4608      	mov	r0, r1
 80081f6:	b141      	cbz	r1, 800820a <__ascii_wctomb+0x18>
 80081f8:	2aff      	cmp	r2, #255	@ 0xff
 80081fa:	d904      	bls.n	8008206 <__ascii_wctomb+0x14>
 80081fc:	228a      	movs	r2, #138	@ 0x8a
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	4770      	bx	lr
 8008206:	700a      	strb	r2, [r1, #0]
 8008208:	2001      	movs	r0, #1
 800820a:	4770      	bx	lr

0800820c <_malloc_usable_size_r>:
 800820c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008210:	1f18      	subs	r0, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfbc      	itt	lt
 8008216:	580b      	ldrlt	r3, [r1, r0]
 8008218:	18c0      	addlt	r0, r0, r3
 800821a:	4770      	bx	lr
 800821c:	0000      	movs	r0, r0
	...

08008220 <log>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	ed2d 8b02 	vpush	{d8}
 8008226:	ec55 4b10 	vmov	r4, r5, d0
 800822a:	f000 f879 	bl	8008320 <__ieee754_log>
 800822e:	4622      	mov	r2, r4
 8008230:	462b      	mov	r3, r5
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	eeb0 8a40 	vmov.f32	s16, s0
 800823a:	eef0 8a60 	vmov.f32	s17, s1
 800823e:	f7f8 fc75 	bl	8000b2c <__aeabi_dcmpun>
 8008242:	b998      	cbnz	r0, 800826c <log+0x4c>
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	f7f8 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 8008250:	b960      	cbnz	r0, 800826c <log+0x4c>
 8008252:	2200      	movs	r2, #0
 8008254:	2300      	movs	r3, #0
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f8 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800825e:	b160      	cbz	r0, 800827a <log+0x5a>
 8008260:	f7fc fdde 	bl	8004e20 <__errno>
 8008264:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008290 <log+0x70>
 8008268:	2322      	movs	r3, #34	@ 0x22
 800826a:	6003      	str	r3, [r0, #0]
 800826c:	eeb0 0a48 	vmov.f32	s0, s16
 8008270:	eef0 0a68 	vmov.f32	s1, s17
 8008274:	ecbd 8b02 	vpop	{d8}
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	f7fc fdd1 	bl	8004e20 <__errno>
 800827e:	ecbd 8b02 	vpop	{d8}
 8008282:	2321      	movs	r3, #33	@ 0x21
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828a:	4803      	ldr	r0, [pc, #12]	@ (8008298 <log+0x78>)
 800828c:	f7ff bc1c 	b.w	8007ac8 <nan>
 8008290:	00000000 	.word	0x00000000
 8008294:	fff00000 	.word	0xfff00000
 8008298:	080266cf 	.word	0x080266cf

0800829c <expf>:
 800829c:	b508      	push	{r3, lr}
 800829e:	ed2d 8b02 	vpush	{d8}
 80082a2:	eef0 8a40 	vmov.f32	s17, s0
 80082a6:	f000 f9f1 	bl	800868c <__ieee754_expf>
 80082aa:	eeb0 8a40 	vmov.f32	s16, s0
 80082ae:	eeb0 0a68 	vmov.f32	s0, s17
 80082b2:	f000 f829 	bl	8008308 <finitef>
 80082b6:	b160      	cbz	r0, 80082d2 <expf+0x36>
 80082b8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80082f8 <expf+0x5c>
 80082bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	dd0a      	ble.n	80082dc <expf+0x40>
 80082c6:	f7fc fdab 	bl	8004e20 <__errno>
 80082ca:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80082fc <expf+0x60>
 80082ce:	2322      	movs	r3, #34	@ 0x22
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	eeb0 0a48 	vmov.f32	s0, s16
 80082d6:	ecbd 8b02 	vpop	{d8}
 80082da:	bd08      	pop	{r3, pc}
 80082dc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008300 <expf+0x64>
 80082e0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80082e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e8:	d5f3      	bpl.n	80082d2 <expf+0x36>
 80082ea:	f7fc fd99 	bl	8004e20 <__errno>
 80082ee:	2322      	movs	r3, #34	@ 0x22
 80082f0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8008304 <expf+0x68>
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	e7ec      	b.n	80082d2 <expf+0x36>
 80082f8:	42b17217 	.word	0x42b17217
 80082fc:	7f800000 	.word	0x7f800000
 8008300:	c2cff1b5 	.word	0xc2cff1b5
 8008304:	00000000 	.word	0x00000000

08008308 <finitef>:
 8008308:	ee10 3a10 	vmov	r3, s0
 800830c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008310:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008314:	bfac      	ite	ge
 8008316:	2000      	movge	r0, #0
 8008318:	2001      	movlt	r0, #1
 800831a:	4770      	bx	lr
 800831c:	0000      	movs	r0, r0
	...

08008320 <__ieee754_log>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	ec51 0b10 	vmov	r0, r1, d0
 8008328:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800832c:	b087      	sub	sp, #28
 800832e:	460d      	mov	r5, r1
 8008330:	da26      	bge.n	8008380 <__ieee754_log+0x60>
 8008332:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008336:	4303      	orrs	r3, r0
 8008338:	4602      	mov	r2, r0
 800833a:	d10a      	bne.n	8008352 <__ieee754_log+0x32>
 800833c:	49ce      	ldr	r1, [pc, #824]	@ (8008678 <__ieee754_log+0x358>)
 800833e:	2200      	movs	r2, #0
 8008340:	2300      	movs	r3, #0
 8008342:	2000      	movs	r0, #0
 8008344:	f7f8 fa82 	bl	800084c <__aeabi_ddiv>
 8008348:	ec41 0b10 	vmov	d0, r0, r1
 800834c:	b007      	add	sp, #28
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	2900      	cmp	r1, #0
 8008354:	da05      	bge.n	8008362 <__ieee754_log+0x42>
 8008356:	460b      	mov	r3, r1
 8008358:	f7f7 ff96 	bl	8000288 <__aeabi_dsub>
 800835c:	2200      	movs	r2, #0
 800835e:	2300      	movs	r3, #0
 8008360:	e7f0      	b.n	8008344 <__ieee754_log+0x24>
 8008362:	4bc6      	ldr	r3, [pc, #792]	@ (800867c <__ieee754_log+0x35c>)
 8008364:	2200      	movs	r2, #0
 8008366:	f7f8 f947 	bl	80005f8 <__aeabi_dmul>
 800836a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800836e:	460d      	mov	r5, r1
 8008370:	4ac3      	ldr	r2, [pc, #780]	@ (8008680 <__ieee754_log+0x360>)
 8008372:	4295      	cmp	r5, r2
 8008374:	dd06      	ble.n	8008384 <__ieee754_log+0x64>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	f7f7 ff87 	bl	800028c <__adddf3>
 800837e:	e7e3      	b.n	8008348 <__ieee754_log+0x28>
 8008380:	2300      	movs	r3, #0
 8008382:	e7f5      	b.n	8008370 <__ieee754_log+0x50>
 8008384:	152c      	asrs	r4, r5, #20
 8008386:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800838a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800838e:	441c      	add	r4, r3
 8008390:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8008394:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8008398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800839c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80083a0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80083a4:	ea42 0105 	orr.w	r1, r2, r5
 80083a8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80083ac:	2200      	movs	r2, #0
 80083ae:	4bb5      	ldr	r3, [pc, #724]	@ (8008684 <__ieee754_log+0x364>)
 80083b0:	f7f7 ff6a 	bl	8000288 <__aeabi_dsub>
 80083b4:	1cab      	adds	r3, r5, #2
 80083b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	dc53      	bgt.n	800846e <__ieee754_log+0x14e>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f7f8 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80083cc:	b1d0      	cbz	r0, 8008404 <__ieee754_log+0xe4>
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	f000 8120 	beq.w	8008614 <__ieee754_log+0x2f4>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7f8 f8a5 	bl	8000524 <__aeabi_i2d>
 80083da:	a391      	add	r3, pc, #580	@ (adr r3, 8008620 <__ieee754_log+0x300>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	4606      	mov	r6, r0
 80083e2:	460f      	mov	r7, r1
 80083e4:	f7f8 f908 	bl	80005f8 <__aeabi_dmul>
 80083e8:	a38f      	add	r3, pc, #572	@ (adr r3, 8008628 <__ieee754_log+0x308>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	e7ba      	b.n	800837a <__ieee754_log+0x5a>
 8008404:	a38a      	add	r3, pc, #552	@ (adr r3, 8008630 <__ieee754_log+0x310>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	4650      	mov	r0, sl
 800840c:	4659      	mov	r1, fp
 800840e:	f7f8 f8f3 	bl	80005f8 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	2000      	movs	r0, #0
 8008418:	499b      	ldr	r1, [pc, #620]	@ (8008688 <__ieee754_log+0x368>)
 800841a:	f7f7 ff35 	bl	8000288 <__aeabi_dsub>
 800841e:	4652      	mov	r2, sl
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	465b      	mov	r3, fp
 8008426:	4650      	mov	r0, sl
 8008428:	4659      	mov	r1, fp
 800842a:	f7f8 f8e5 	bl	80005f8 <__aeabi_dmul>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	4606      	mov	r6, r0
 800843c:	460f      	mov	r7, r1
 800843e:	b914      	cbnz	r4, 8008446 <__ieee754_log+0x126>
 8008440:	4632      	mov	r2, r6
 8008442:	463b      	mov	r3, r7
 8008444:	e0a0      	b.n	8008588 <__ieee754_log+0x268>
 8008446:	4620      	mov	r0, r4
 8008448:	f7f8 f86c 	bl	8000524 <__aeabi_i2d>
 800844c:	a374      	add	r3, pc, #464	@ (adr r3, 8008620 <__ieee754_log+0x300>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	4680      	mov	r8, r0
 8008454:	4689      	mov	r9, r1
 8008456:	f7f8 f8cf 	bl	80005f8 <__aeabi_dmul>
 800845a:	a373      	add	r3, pc, #460	@ (adr r3, 8008628 <__ieee754_log+0x308>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	e0a5      	b.n	80085ba <__ieee754_log+0x29a>
 800846e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008472:	f7f7 ff0b 	bl	800028c <__adddf3>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4650      	mov	r0, sl
 800847c:	4659      	mov	r1, fp
 800847e:	f7f8 f9e5 	bl	800084c <__aeabi_ddiv>
 8008482:	e9cd 0100 	strd	r0, r1, [sp]
 8008486:	4620      	mov	r0, r4
 8008488:	f7f8 f84c 	bl	8000524 <__aeabi_i2d>
 800848c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	f7f8 f8ae 	bl	80005f8 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084a4:	f7f8 f8a8 	bl	80005f8 <__aeabi_dmul>
 80084a8:	a363      	add	r3, pc, #396	@ (adr r3, 8008638 <__ieee754_log+0x318>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	4680      	mov	r8, r0
 80084b0:	4689      	mov	r9, r1
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	a362      	add	r3, pc, #392	@ (adr r3, 8008640 <__ieee754_log+0x320>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f7 fee6 	bl	800028c <__adddf3>
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	f7f8 f898 	bl	80005f8 <__aeabi_dmul>
 80084c8:	a35f      	add	r3, pc, #380	@ (adr r3, 8008648 <__ieee754_log+0x328>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f7 fedd 	bl	800028c <__adddf3>
 80084d2:	4642      	mov	r2, r8
 80084d4:	464b      	mov	r3, r9
 80084d6:	f7f8 f88f 	bl	80005f8 <__aeabi_dmul>
 80084da:	a35d      	add	r3, pc, #372	@ (adr r3, 8008650 <__ieee754_log+0x330>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f7f7 fed4 	bl	800028c <__adddf3>
 80084e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e8:	f7f8 f886 	bl	80005f8 <__aeabi_dmul>
 80084ec:	a35a      	add	r3, pc, #360	@ (adr r3, 8008658 <__ieee754_log+0x338>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	a358      	add	r3, pc, #352	@ (adr r3, 8008660 <__ieee754_log+0x340>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f7 fec2 	bl	800028c <__adddf3>
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	f7f8 f874 	bl	80005f8 <__aeabi_dmul>
 8008510:	a355      	add	r3, pc, #340	@ (adr r3, 8008668 <__ieee754_log+0x348>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f7 feb9 	bl	800028c <__adddf3>
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	f7f8 f86b 	bl	80005f8 <__aeabi_dmul>
 8008522:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800852e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008532:	f7f7 feab 	bl	800028c <__adddf3>
 8008536:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800853a:	3551      	adds	r5, #81	@ 0x51
 800853c:	4335      	orrs	r5, r6
 800853e:	2d00      	cmp	r5, #0
 8008540:	4680      	mov	r8, r0
 8008542:	4689      	mov	r9, r1
 8008544:	dd48      	ble.n	80085d8 <__ieee754_log+0x2b8>
 8008546:	4b50      	ldr	r3, [pc, #320]	@ (8008688 <__ieee754_log+0x368>)
 8008548:	2200      	movs	r2, #0
 800854a:	4650      	mov	r0, sl
 800854c:	4659      	mov	r1, fp
 800854e:	f7f8 f853 	bl	80005f8 <__aeabi_dmul>
 8008552:	4652      	mov	r2, sl
 8008554:	465b      	mov	r3, fp
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4606      	mov	r6, r0
 8008560:	460f      	mov	r7, r1
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f7 fe91 	bl	800028c <__adddf3>
 800856a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800856e:	f7f8 f843 	bl	80005f8 <__aeabi_dmul>
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	b964      	cbnz	r4, 8008592 <__ieee754_log+0x272>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	f7f7 fe82 	bl	8000288 <__aeabi_dsub>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	f7f7 fe7c 	bl	8000288 <__aeabi_dsub>
 8008590:	e6da      	b.n	8008348 <__ieee754_log+0x28>
 8008592:	a323      	add	r3, pc, #140	@ (adr r3, 8008620 <__ieee754_log+0x300>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859c:	f7f8 f82c 	bl	80005f8 <__aeabi_dmul>
 80085a0:	a321      	add	r3, pc, #132	@ (adr r3, 8008628 <__ieee754_log+0x308>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
 80085aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	4642      	mov	r2, r8
 80085b4:	464b      	mov	r3, r9
 80085b6:	f7f7 fe69 	bl	800028c <__adddf3>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4630      	mov	r0, r6
 80085c0:	4639      	mov	r1, r7
 80085c2:	f7f7 fe61 	bl	8000288 <__aeabi_dsub>
 80085c6:	4652      	mov	r2, sl
 80085c8:	465b      	mov	r3, fp
 80085ca:	f7f7 fe5d 	bl	8000288 <__aeabi_dsub>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	e7d9      	b.n	800858c <__ieee754_log+0x26c>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4650      	mov	r0, sl
 80085de:	4659      	mov	r1, fp
 80085e0:	f7f7 fe52 	bl	8000288 <__aeabi_dsub>
 80085e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	f43f af25 	beq.w	8008440 <__ieee754_log+0x120>
 80085f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8008620 <__ieee754_log+0x300>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008600:	f7f7 fffa 	bl	80005f8 <__aeabi_dmul>
 8008604:	a308      	add	r3, pc, #32	@ (adr r3, 8008628 <__ieee754_log+0x308>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	4604      	mov	r4, r0
 800860c:	460d      	mov	r5, r1
 800860e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008612:	e729      	b.n	8008468 <__ieee754_log+0x148>
 8008614:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8008670 <__ieee754_log+0x350>
 8008618:	e698      	b.n	800834c <__ieee754_log+0x2c>
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w
 8008620:	fee00000 	.word	0xfee00000
 8008624:	3fe62e42 	.word	0x3fe62e42
 8008628:	35793c76 	.word	0x35793c76
 800862c:	3dea39ef 	.word	0x3dea39ef
 8008630:	55555555 	.word	0x55555555
 8008634:	3fd55555 	.word	0x3fd55555
 8008638:	df3e5244 	.word	0xdf3e5244
 800863c:	3fc2f112 	.word	0x3fc2f112
 8008640:	96cb03de 	.word	0x96cb03de
 8008644:	3fc74664 	.word	0x3fc74664
 8008648:	94229359 	.word	0x94229359
 800864c:	3fd24924 	.word	0x3fd24924
 8008650:	55555593 	.word	0x55555593
 8008654:	3fe55555 	.word	0x3fe55555
 8008658:	d078c69f 	.word	0xd078c69f
 800865c:	3fc39a09 	.word	0x3fc39a09
 8008660:	1d8e78af 	.word	0x1d8e78af
 8008664:	3fcc71c5 	.word	0x3fcc71c5
 8008668:	9997fa04 	.word	0x9997fa04
 800866c:	3fd99999 	.word	0x3fd99999
	...
 8008678:	c3500000 	.word	0xc3500000
 800867c:	43500000 	.word	0x43500000
 8008680:	7fefffff 	.word	0x7fefffff
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	3fe00000 	.word	0x3fe00000

0800868c <__ieee754_expf>:
 800868c:	ee10 2a10 	vmov	r2, s0
 8008690:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8008694:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008698:	d902      	bls.n	80086a0 <__ieee754_expf+0x14>
 800869a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800869e:	4770      	bx	lr
 80086a0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80086a4:	d106      	bne.n	80086b4 <__ieee754_expf+0x28>
 80086a6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80087e0 <__ieee754_expf+0x154>
 80086aa:	2900      	cmp	r1, #0
 80086ac:	bf18      	it	ne
 80086ae:	eeb0 0a67 	vmovne.f32	s0, s15
 80086b2:	4770      	bx	lr
 80086b4:	484b      	ldr	r0, [pc, #300]	@ (80087e4 <__ieee754_expf+0x158>)
 80086b6:	4282      	cmp	r2, r0
 80086b8:	dd02      	ble.n	80086c0 <__ieee754_expf+0x34>
 80086ba:	2000      	movs	r0, #0
 80086bc:	f000 b8d4 	b.w	8008868 <__math_oflowf>
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	da05      	bge.n	80086d0 <__ieee754_expf+0x44>
 80086c4:	4a48      	ldr	r2, [pc, #288]	@ (80087e8 <__ieee754_expf+0x15c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d902      	bls.n	80086d0 <__ieee754_expf+0x44>
 80086ca:	2000      	movs	r0, #0
 80086cc:	f000 b8c6 	b.w	800885c <__math_uflowf>
 80086d0:	4a46      	ldr	r2, [pc, #280]	@ (80087ec <__ieee754_expf+0x160>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80086d8:	d952      	bls.n	8008780 <__ieee754_expf+0xf4>
 80086da:	4a45      	ldr	r2, [pc, #276]	@ (80087f0 <__ieee754_expf+0x164>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80086e2:	d834      	bhi.n	800874e <__ieee754_expf+0xc2>
 80086e4:	4b43      	ldr	r3, [pc, #268]	@ (80087f4 <__ieee754_expf+0x168>)
 80086e6:	4413      	add	r3, r2
 80086e8:	ed93 7a00 	vldr	s14, [r3]
 80086ec:	4b42      	ldr	r3, [pc, #264]	@ (80087f8 <__ieee754_expf+0x16c>)
 80086ee:	4413      	add	r3, r2
 80086f0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80086f4:	f1c1 0201 	rsb	r2, r1, #1
 80086f8:	edd3 7a00 	vldr	s15, [r3]
 80086fc:	1a52      	subs	r2, r2, r1
 80086fe:	ee37 0a67 	vsub.f32	s0, s14, s15
 8008702:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008706:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80087fc <__ieee754_expf+0x170>
 800870a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008800 <__ieee754_expf+0x174>
 800870e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8008712:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8008804 <__ieee754_expf+0x178>
 8008716:	eea6 5a86 	vfma.f32	s10, s13, s12
 800871a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008808 <__ieee754_expf+0x17c>
 800871e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8008722:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800880c <__ieee754_expf+0x180>
 8008726:	eea6 5a86 	vfma.f32	s10, s13, s12
 800872a:	eef0 6a40 	vmov.f32	s13, s0
 800872e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8008732:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008736:	ee20 5a26 	vmul.f32	s10, s0, s13
 800873a:	bb92      	cbnz	r2, 80087a2 <__ieee754_expf+0x116>
 800873c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008740:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8008744:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008748:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800874c:	4770      	bx	lr
 800874e:	4b30      	ldr	r3, [pc, #192]	@ (8008810 <__ieee754_expf+0x184>)
 8008750:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8008814 <__ieee754_expf+0x188>
 8008754:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8008818 <__ieee754_expf+0x18c>
 8008758:	4413      	add	r3, r2
 800875a:	edd3 7a00 	vldr	s15, [r3]
 800875e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008762:	eeb0 7a40 	vmov.f32	s14, s0
 8008766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800876a:	ee17 2a90 	vmov	r2, s15
 800876e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008772:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008776:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800881c <__ieee754_expf+0x190>
 800877a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800877e:	e7be      	b.n	80086fe <__ieee754_expf+0x72>
 8008780:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8008784:	d20b      	bcs.n	800879e <__ieee754_expf+0x112>
 8008786:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008820 <__ieee754_expf+0x194>
 800878a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800878e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8008792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008796:	dd02      	ble.n	800879e <__ieee754_expf+0x112>
 8008798:	ee30 0a25 	vadd.f32	s0, s0, s11
 800879c:	4770      	bx	lr
 800879e:	2200      	movs	r2, #0
 80087a0:	e7af      	b.n	8008702 <__ieee754_expf+0x76>
 80087a2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80087a6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80087aa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80087ae:	bfb8      	it	lt
 80087b0:	3264      	addlt	r2, #100	@ 0x64
 80087b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80087be:	ee17 3a90 	vmov	r3, s15
 80087c2:	bfab      	itete	ge
 80087c4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80087c8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80087cc:	ee00 3a10 	vmovge	s0, r3
 80087d0:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8008824 <__ieee754_expf+0x198>
 80087d4:	bfbc      	itt	lt
 80087d6:	ee00 3a10 	vmovlt	s0, r3
 80087da:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80087de:	4770      	bx	lr
 80087e0:	00000000 	.word	0x00000000
 80087e4:	42b17217 	.word	0x42b17217
 80087e8:	42cff1b5 	.word	0x42cff1b5
 80087ec:	3eb17218 	.word	0x3eb17218
 80087f0:	3f851591 	.word	0x3f851591
 80087f4:	08026acc 	.word	0x08026acc
 80087f8:	08026ac4 	.word	0x08026ac4
 80087fc:	3331bb4c 	.word	0x3331bb4c
 8008800:	b5ddea0e 	.word	0xb5ddea0e
 8008804:	388ab355 	.word	0x388ab355
 8008808:	bb360b61 	.word	0xbb360b61
 800880c:	3e2aaaab 	.word	0x3e2aaaab
 8008810:	08026ad4 	.word	0x08026ad4
 8008814:	3fb8aa3b 	.word	0x3fb8aa3b
 8008818:	3f317180 	.word	0x3f317180
 800881c:	3717f7d1 	.word	0x3717f7d1
 8008820:	7149f2ca 	.word	0x7149f2ca
 8008824:	0d800000 	.word	0x0d800000

08008828 <with_errnof>:
 8008828:	b510      	push	{r4, lr}
 800882a:	ed2d 8b02 	vpush	{d8}
 800882e:	eeb0 8a40 	vmov.f32	s16, s0
 8008832:	4604      	mov	r4, r0
 8008834:	f7fc faf4 	bl	8004e20 <__errno>
 8008838:	eeb0 0a48 	vmov.f32	s0, s16
 800883c:	ecbd 8b02 	vpop	{d8}
 8008840:	6004      	str	r4, [r0, #0]
 8008842:	bd10      	pop	{r4, pc}

08008844 <xflowf>:
 8008844:	b130      	cbz	r0, 8008854 <xflowf+0x10>
 8008846:	eef1 7a40 	vneg.f32	s15, s0
 800884a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800884e:	2022      	movs	r0, #34	@ 0x22
 8008850:	f7ff bfea 	b.w	8008828 <with_errnof>
 8008854:	eef0 7a40 	vmov.f32	s15, s0
 8008858:	e7f7      	b.n	800884a <xflowf+0x6>
	...

0800885c <__math_uflowf>:
 800885c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008864 <__math_uflowf+0x8>
 8008860:	f7ff bff0 	b.w	8008844 <xflowf>
 8008864:	10000000 	.word	0x10000000

08008868 <__math_oflowf>:
 8008868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008870 <__math_oflowf+0x8>
 800886c:	f7ff bfea 	b.w	8008844 <xflowf>
 8008870:	70000000 	.word	0x70000000

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	bf00      	nop
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	bf00      	nop
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
